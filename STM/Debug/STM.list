
STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008644  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08008810  08008810  00018810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a58  08008a58  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008a58  08008a58  00018a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a60  08008a60  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a60  08008a60  00018a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a64  08008a64  00018a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  200001dc  08008c44  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e0  08008c44  000207e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6a4  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ae6  00000000  00000000  0003a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001528  00000000  00000000  0003d398  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001400  00000000  00000000  0003e8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028629  00000000  00000000  0003fcc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000124a4  00000000  00000000  000682e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00101593  00000000  00000000  0007a78d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017bd20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065a8  00000000  00000000  0017bd9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001dc 	.word	0x200001dc
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080087f4 	.word	0x080087f4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001e0 	.word	0x200001e0
 8000204:	080087f4 	.word	0x080087f4

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b972 	b.w	8000edc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	4688      	mov	r8, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14b      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4615      	mov	r5, r2
 8000c22:	d967      	bls.n	8000cf4 <__udivmoddi4+0xe4>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0720 	rsb	r7, r2, #32
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	fa20 f707 	lsr.w	r7, r0, r7
 8000c36:	4095      	lsls	r5, r2
 8000c38:	ea47 0803 	orr.w	r8, r7, r3
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c48:	fa1f fc85 	uxth.w	ip, r5
 8000c4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c54:	fb07 f10c 	mul.w	r1, r7, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x60>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c62:	f080 811b 	bcs.w	8000e9c <__udivmoddi4+0x28c>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 8118 	bls.w	8000e9c <__udivmoddi4+0x28c>
 8000c6c:	3f02      	subs	r7, #2
 8000c6e:	442b      	add	r3, r5
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x8c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	442c      	add	r4, r5
 8000c9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca0:	eba4 040c 	sub.w	r4, r4, ip
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	b11e      	cbz	r6, 8000cb0 <__udivmoddi4+0xa0>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xbe>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80eb 	beq.w	8000e96 <__udivmoddi4+0x286>
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f783 	clz	r7, r3
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d147      	bne.n	8000d66 <__udivmoddi4+0x156>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd0>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4698      	mov	r8, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa0>
 8000cee:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xe8>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 808f 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d02:	1b49      	subs	r1, r1, r5
 8000d04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d08:	fa1f f885 	uxth.w	r8, r5
 8000d0c:	2701      	movs	r7, #1
 8000d0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d12:	0c23      	lsrs	r3, r4, #16
 8000d14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2bc>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1a59      	subs	r1, r3, r1
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x14c>
 8000d4c:	192c      	adds	r4, r5, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x14a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80b6 	bhi.w	8000ec6 <__udivmoddi4+0x2b6>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e79f      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000d66:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6a:	40bb      	lsls	r3, r7
 8000d6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d74:	fa01 f407 	lsl.w	r4, r1, r7
 8000d78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d84:	4325      	orrs	r5, r4
 8000d86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8a:	0c2c      	lsrs	r4, r5, #16
 8000d8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d90:	fa1f fa8e 	uxth.w	sl, lr
 8000d94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d98:	fb09 f40a 	mul.w	r4, r9, sl
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000da2:	fa00 f107 	lsl.w	r1, r0, r7
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	f080 8087 	bcs.w	8000ec2 <__udivmoddi4+0x2b2>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f240 8084 	bls.w	8000ec2 <__udivmoddi4+0x2b2>
 8000dba:	f1a9 0902 	sub.w	r9, r9, #2
 8000dbe:	4473      	add	r3, lr
 8000dc0:	1b1b      	subs	r3, r3, r4
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dcc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd4:	45a2      	cmp	sl, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de0:	d26b      	bcs.n	8000eba <__udivmoddi4+0x2aa>
 8000de2:	45a2      	cmp	sl, r4
 8000de4:	d969      	bls.n	8000eba <__udivmoddi4+0x2aa>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4474      	add	r4, lr
 8000dea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	eba4 040a 	sub.w	r4, r4, sl
 8000df6:	454c      	cmp	r4, r9
 8000df8:	46c2      	mov	sl, r8
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	d354      	bcc.n	8000ea8 <__udivmoddi4+0x298>
 8000dfe:	d051      	beq.n	8000ea4 <__udivmoddi4+0x294>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d069      	beq.n	8000ed8 <__udivmoddi4+0x2c8>
 8000e04:	ebb1 050a 	subs.w	r5, r1, sl
 8000e08:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	40fc      	lsrs	r4, r7
 8000e14:	ea4c 0505 	orr.w	r5, ip, r5
 8000e18:	e9c6 5400 	strd	r5, r4, [r6]
 8000e1c:	2700      	movs	r7, #0
 8000e1e:	e747      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	4095      	lsls	r5, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e36:	4338      	orrs	r0, r7
 8000e38:	0c01      	lsrs	r1, r0, #16
 8000e3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3e:	fa1f f885 	uxth.w	r8, r5
 8000e42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb07 f308 	mul.w	r3, r7, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x256>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e5c:	d22f      	bcs.n	8000ebe <__udivmoddi4+0x2ae>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d92d      	bls.n	8000ebe <__udivmoddi4+0x2ae>
 8000e62:	3f02      	subs	r7, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	b281      	uxth	r1, r0
 8000e6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb00 f308 	mul.w	r3, r0, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x27e>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e84:	d217      	bcs.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d915      	bls.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e94:	e73b      	b.n	8000d0e <__udivmoddi4+0xfe>
 8000e96:	4637      	mov	r7, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e709      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	e6e7      	b.n	8000c70 <__udivmoddi4+0x60>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x8c>
 8000ea4:	4541      	cmp	r1, r8
 8000ea6:	d2ab      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000ea8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eac:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	e7a4      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb6:	4660      	mov	r0, ip
 8000eb8:	e7e9      	b.n	8000e8e <__udivmoddi4+0x27e>
 8000eba:	4618      	mov	r0, r3
 8000ebc:	e795      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ebe:	4667      	mov	r7, ip
 8000ec0:	e7d1      	b.n	8000e66 <__udivmoddi4+0x256>
 8000ec2:	4681      	mov	r9, r0
 8000ec4:	e77c      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	442c      	add	r4, r5
 8000eca:	e747      	b.n	8000d5c <__udivmoddi4+0x14c>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	442b      	add	r3, r5
 8000ed2:	e72f      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xda>
 8000ed8:	4637      	mov	r7, r6
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0xa0>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <MPU6050_Init>:

uint32_t adc_value;


void MPU6050_Init (void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I
	// Esta bandera sirve para saber si el sensor responde correctamente
	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eea:	9302      	str	r3, [sp, #8]
 8000eec:	2301      	movs	r3, #1
 8000eee:	9301      	str	r3, [sp, #4]
 8000ef0:	1dfb      	adds	r3, r7, #7
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	2275      	movs	r2, #117	; 0x75
 8000ef8:	21d0      	movs	r1, #208	; 0xd0
 8000efa:	482a      	ldr	r0, [pc, #168]	; (8000fa4 <MPU6050_Init+0xc4>)
 8000efc:	f002 fad2 	bl	80034a4 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2b68      	cmp	r3, #104	; 0x68
 8000f04:	d14a      	bne.n	8000f9c <MPU6050_Init+0xbc>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		// Encender, habilitar el sensor
		Data = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0e:	9302      	str	r3, [sp, #8]
 8000f10:	2301      	movs	r3, #1
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	1dbb      	adds	r3, r7, #6
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2301      	movs	r3, #1
 8000f1a:	226b      	movs	r2, #107	; 0x6b
 8000f1c:	21d0      	movs	r1, #208	; 0xd0
 8000f1e:	4821      	ldr	r0, [pc, #132]	; (8000fa4 <MPU6050_Init+0xc4>)
 8000f20:	f002 f9ac 	bl	800327c <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		// frecuencia en la que se envían los datos
		Data = 0x07;
 8000f24:	2307      	movs	r3, #7
 8000f26:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x1A, 1, &Data, 1, 1000);
 8000f28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	1dbb      	adds	r3, r7, #6
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2301      	movs	r3, #1
 8000f38:	221a      	movs	r2, #26
 8000f3a:	21d0      	movs	r1, #208	; 0xd0
 8000f3c:	4819      	ldr	r0, [pc, #100]	; (8000fa4 <MPU6050_Init+0xc4>)
 8000f3e:	f002 f99d 	bl	800327c <HAL_I2C_Mem_Write>

		Data = 0x00;
 8000f42:	2300      	movs	r3, #0
 8000f44:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4a:	9302      	str	r3, [sp, #8]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	9301      	str	r3, [sp, #4]
 8000f50:	1dbb      	adds	r3, r7, #6
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2301      	movs	r3, #1
 8000f56:	2219      	movs	r2, #25
 8000f58:	21d0      	movs	r1, #208	; 0xd0
 8000f5a:	4812      	ldr	r0, [pc, #72]	; (8000fa4 <MPU6050_Init+0xc4>)
 8000f5c:	f002 f98e 	bl	800327c <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g FS_SEL=1 -> ± 4g
		Data = 1ul<<3;
 8000f60:	2308      	movs	r3, #8
 8000f62:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	1dbb      	adds	r3, r7, #6
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2301      	movs	r3, #1
 8000f74:	221c      	movs	r2, #28
 8000f76:	21d0      	movs	r1, #208	; 0xd0
 8000f78:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <MPU6050_Init+0xc4>)
 8000f7a:	f002 f97f 	bl	800327c <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x00;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	1dbb      	adds	r3, r7, #6
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2301      	movs	r3, #1
 8000f92:	221b      	movs	r2, #27
 8000f94:	21d0      	movs	r1, #208	; 0xd0
 8000f96:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <MPU6050_Init+0xc4>)
 8000f98:	f002 f970 	bl	800327c <HAL_I2C_Mem_Write>
	}

}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000698 	.word	0x20000698

08000fa8 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel (void)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b087      	sub	sp, #28
 8000fac:	af04      	add	r7, sp, #16
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2180      	movs	r1, #128	; 0x80
 8000fb2:	4838      	ldr	r0, [pc, #224]	; (8001094 <MPU6050_Read_Accel+0xec>)
 8000fb4:	f002 f8b8 	bl	8003128 <HAL_GPIO_WritePin>
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000fb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	2306      	movs	r3, #6
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	223b      	movs	r2, #59	; 0x3b
 8000fca:	21d0      	movs	r1, #208	; 0xd0
 8000fcc:	4832      	ldr	r0, [pc, #200]	; (8001098 <MPU6050_Read_Accel+0xf0>)
 8000fce:	f002 fa69 	bl	80034a4 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000fd2:	783b      	ldrb	r3, [r7, #0]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	787b      	ldrb	r3, [r7, #1]
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b21a      	sxth	r2, r3
 8000fe0:	4b2e      	ldr	r3, [pc, #184]	; (800109c <MPU6050_Read_Accel+0xf4>)
 8000fe2:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000fe4:	78bb      	ldrb	r3, [r7, #2]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <MPU6050_Read_Accel+0xf8>)
 8000ff4:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000ff6:	793b      	ldrb	r3, [r7, #4]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	797b      	ldrb	r3, [r7, #5]
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b21a      	sxth	r2, r3
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <MPU6050_Read_Accel+0xfc>)
 8001006:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/8192.0;
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <MPU6050_Read_Accel+0xf4>)
 800100a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fa54 	bl	80004bc <__aeabi_i2d>
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <MPU6050_Read_Accel+0x100>)
 800101a:	f7ff fbe3 	bl	80007e4 <__aeabi_ddiv>
 800101e:	4603      	mov	r3, r0
 8001020:	460c      	mov	r4, r1
 8001022:	4618      	mov	r0, r3
 8001024:	4621      	mov	r1, r4
 8001026:	f7ff fd8b 	bl	8000b40 <__aeabi_d2f>
 800102a:	4602      	mov	r2, r0
 800102c:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <MPU6050_Read_Accel+0x104>)
 800102e:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW/8192.0;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MPU6050_Read_Accel+0xf8>)
 8001032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fa40 	bl	80004bc <__aeabi_i2d>
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MPU6050_Read_Accel+0x100>)
 8001042:	f7ff fbcf 	bl	80007e4 <__aeabi_ddiv>
 8001046:	4603      	mov	r3, r0
 8001048:	460c      	mov	r4, r1
 800104a:	4618      	mov	r0, r3
 800104c:	4621      	mov	r1, r4
 800104e:	f7ff fd77 	bl	8000b40 <__aeabi_d2f>
 8001052:	4602      	mov	r2, r0
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <MPU6050_Read_Accel+0x108>)
 8001056:	601a      	str	r2, [r3, #0]
	Az = Accel_Z_RAW/8192.0;
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MPU6050_Read_Accel+0xfc>)
 800105a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fa2c 	bl	80004bc <__aeabi_i2d>
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MPU6050_Read_Accel+0x100>)
 800106a:	f7ff fbbb 	bl	80007e4 <__aeabi_ddiv>
 800106e:	4603      	mov	r3, r0
 8001070:	460c      	mov	r4, r1
 8001072:	4618      	mov	r0, r3
 8001074:	4621      	mov	r1, r4
 8001076:	f7ff fd63 	bl	8000b40 <__aeabi_d2f>
 800107a:	4602      	mov	r2, r0
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <MPU6050_Read_Accel+0x10c>)
 800107e:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2180      	movs	r1, #128	; 0x80
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <MPU6050_Read_Accel+0xec>)
 8001086:	f002 f84f 	bl	8003128 <HAL_GPIO_WritePin>
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	bd90      	pop	{r4, r7, pc}
 8001092:	bf00      	nop
 8001094:	40020400 	.word	0x40020400
 8001098:	20000698 	.word	0x20000698
 800109c:	200001f8 	.word	0x200001f8
 80010a0:	200001fa 	.word	0x200001fa
 80010a4:	200001fc 	.word	0x200001fc
 80010a8:	40c00000 	.word	0x40c00000
 80010ac:	20000738 	.word	0x20000738
 80010b0:	200006e4 	.word	0x200006e4
 80010b4:	2000073c 	.word	0x2000073c

080010b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010be:	f000 fdf8 	bl	8001cb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c2:	f000 f81b 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c6:	f000 fa29 	bl	800151c <MX_GPIO_Init>
  MX_ETH_Init();
 80010ca:	f000 f8fb 	bl	80012c4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80010ce:	f000 f9c7 	bl	8001460 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010d2:	f000 f9f5 	bl	80014c0 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80010d6:	f000 f8a3 	bl	8001220 <MX_ADC1_Init>
  MX_I2C2_Init();
 80010da:	f000 f933 	bl	8001344 <MX_I2C2_Init>
  MX_TIM2_Init();
 80010de:	f000 f971 	bl	80013c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  char buf[4];
  MPU6050_Init();
 80010e2:	f7ff fefd 	bl	8000ee0 <MPU6050_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80010e6:	4804      	ldr	r0, [pc, #16]	; (80010f8 <main+0x40>)
 80010e8:	f004 f870 	bl	80051cc <HAL_TIM_Base_Start_IT>

  HAL_Delay (1000);
 80010ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f0:	f000 fe3c 	bl	8001d6c <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <main+0x3c>
 80010f6:	bf00      	nop
 80010f8:	20000740 	.word	0x20000740

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0b4      	sub	sp, #208	; 0xd0
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001106:	2230      	movs	r2, #48	; 0x30
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f005 fce2 	bl	8006ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	2284      	movs	r2, #132	; 0x84
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f005 fcd3 	bl	8006ad4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800112e:	f002 ff59 	bl	8003fe4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	4b38      	ldr	r3, [pc, #224]	; (8001214 <SystemClock_Config+0x118>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	4a37      	ldr	r2, [pc, #220]	; (8001214 <SystemClock_Config+0x118>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113c:	6413      	str	r3, [r2, #64]	; 0x40
 800113e:	4b35      	ldr	r3, [pc, #212]	; (8001214 <SystemClock_Config+0x118>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800114a:	4b33      	ldr	r3, [pc, #204]	; (8001218 <SystemClock_Config+0x11c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001152:	4a31      	ldr	r2, [pc, #196]	; (8001218 <SystemClock_Config+0x11c>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <SystemClock_Config+0x11c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001166:	2301      	movs	r3, #1
 8001168:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800116c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001170:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001174:	2302      	movs	r3, #2
 8001176:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800117a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800117e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001182:	2304      	movs	r3, #4
 8001184:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001188:	2348      	movs	r3, #72	; 0x48
 800118a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800118e:	2302      	movs	r3, #2
 8001190:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001194:	2303      	movs	r3, #3
 8001196:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 ff30 	bl	8004004 <HAL_RCC_OscConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80011aa:	f000 faad 	bl	8001708 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ae:	230f      	movs	r3, #15
 80011b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b4:	2302      	movs	r3, #2
 80011b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ce:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011d2:	2102      	movs	r1, #2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 f9b9 	bl	800454c <HAL_RCC_ClockConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80011e0:	f000 fa92 	bl	8001708 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C2
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <SystemClock_Config+0x120>)
 80011e6:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	4618      	mov	r0, r3
 80011fc:	f003 fb9e 	bl	800493c <HAL_RCCEx_PeriphCLKConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8001206:	f000 fa7f 	bl	8001708 <Error_Handler>
  }
}
 800120a:	bf00      	nop
 800120c:	37d0      	adds	r7, #208	; 0xd0
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	40007000 	.word	0x40007000
 800121c:	00208100 	.word	0x00208100

08001220 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001226:	463b      	mov	r3, r7
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <MX_ADC1_Init+0x98>)
 8001234:	4a21      	ldr	r2, [pc, #132]	; (80012bc <MX_ADC1_Init+0x9c>)
 8001236:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <MX_ADC1_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800123e:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <MX_ADC1_Init+0x98>)
 8001240:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001244:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <MX_ADC1_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_ADC1_Init+0x98>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <MX_ADC1_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_ADC1_Init+0x98>)
 800125c:	2200      	movs	r2, #0
 800125e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_ADC1_Init+0x98>)
 8001262:	4a17      	ldr	r2, [pc, #92]	; (80012c0 <MX_ADC1_Init+0xa0>)
 8001264:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_ADC1_Init+0x98>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_ADC1_Init+0x98>)
 800126e:	2201      	movs	r2, #1
 8001270:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_ADC1_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_ADC1_Init+0x98>)
 800127c:	2201      	movs	r2, #1
 800127e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001280:	480d      	ldr	r0, [pc, #52]	; (80012b8 <MX_ADC1_Init+0x98>)
 8001282:	f000 fd95 	bl	8001db0 <HAL_ADC_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800128c:	f000 fa3c 	bl	8001708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001290:	2300      	movs	r3, #0
 8001292:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001294:	2301      	movs	r3, #1
 8001296:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_ADC1_Init+0x98>)
 80012a2:	f000 fdc9 	bl	8001e38 <HAL_ADC_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012ac:	f000 fa2c 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200006f0 	.word	0x200006f0
 80012bc:	40012000 	.word	0x40012000
 80012c0:	0f000001 	.word	0x0f000001

080012c4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <MX_ETH_Init+0x78>)
 80012ca:	4a1d      	ldr	r2, [pc, #116]	; (8001340 <MX_ETH_Init+0x7c>)
 80012cc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_ETH_Init+0x78>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <MX_ETH_Init+0x78>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <MX_ETH_Init+0x78>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <MX_ETH_Init+0x78>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	3301      	adds	r3, #1
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <MX_ETH_Init+0x78>)
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	3302      	adds	r3, #2
 80012f2:	22e1      	movs	r2, #225	; 0xe1
 80012f4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_ETH_Init+0x78>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	3303      	adds	r3, #3
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_ETH_Init+0x78>)
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	3304      	adds	r3, #4
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_ETH_Init+0x78>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	3305      	adds	r3, #5
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_ETH_Init+0x78>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <MX_ETH_Init+0x78>)
 800131c:	2200      	movs	r2, #0
 800131e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_ETH_Init+0x78>)
 8001322:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001326:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_ETH_Init+0x78>)
 800132a:	f001 f8e7 	bl	80024fc <HAL_ETH_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8001334:	f000 f9e8 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2000078c 	.word	0x2000078c
 8001340:	40028000 	.word	0x40028000

08001344 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_I2C2_Init+0x74>)
 800134a:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <MX_I2C2_Init+0x78>)
 800134c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001350:	4a1b      	ldr	r2, [pc, #108]	; (80013c0 <MX_I2C2_Init+0x7c>)
 8001352:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <MX_I2C2_Init+0x74>)
 800135c:	2201      	movs	r2, #1
 800135e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_I2C2_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_I2C2_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800137e:	480e      	ldr	r0, [pc, #56]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001380:	f001 feec 	bl	800315c <HAL_I2C_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800138a:	f000 f9bd 	bl	8001708 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800138e:	2100      	movs	r1, #0
 8001390:	4809      	ldr	r0, [pc, #36]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001392:	f002 fc47 	bl	8003c24 <HAL_I2CEx_ConfigAnalogFilter>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800139c:	f000 f9b4 	bl	8001708 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013a0:	2100      	movs	r1, #0
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_I2C2_Init+0x74>)
 80013a4:	f002 fc89 	bl	8003cba <HAL_I2CEx_ConfigDigitalFilter>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80013ae:	f000 f9ab 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000698 	.word	0x20000698
 80013bc:	40005800 	.word	0x40005800
 80013c0:	00808cd2 	.word	0x00808cd2

080013c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ca:	f107 0310 	add.w	r3, r7, #16
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <MX_TIM2_Init+0x98>)
 80013e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <MX_TIM2_Init+0x98>)
 80013ec:	2247      	movs	r2, #71	; 0x47
 80013ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f0:	4b1a      	ldr	r3, [pc, #104]	; (800145c <MX_TIM2_Init+0x98>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2500;
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <MX_TIM2_Init+0x98>)
 80013f8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80013fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <MX_TIM2_Init+0x98>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <MX_TIM2_Init+0x98>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800140a:	4814      	ldr	r0, [pc, #80]	; (800145c <MX_TIM2_Init+0x98>)
 800140c:	f003 fe86 	bl	800511c <HAL_TIM_Base_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001416:	f000 f977 	bl	8001708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4619      	mov	r1, r3
 8001426:	480d      	ldr	r0, [pc, #52]	; (800145c <MX_TIM2_Init+0x98>)
 8001428:	f004 f868 	bl	80054fc <HAL_TIM_ConfigClockSource>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001432:	f000 f969 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	4619      	mov	r1, r3
 8001442:	4806      	ldr	r0, [pc, #24]	; (800145c <MX_TIM2_Init+0x98>)
 8001444:	f004 fa7a 	bl	800593c <HAL_TIMEx_MasterConfigSynchronization>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800144e:	f000 f95b 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	3720      	adds	r7, #32
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000740 	.word	0x20000740

08001460 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 8001466:	4a15      	ldr	r2, [pc, #84]	; (80014bc <MX_USART3_UART_Init+0x5c>)
 8001468:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 800146c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001470:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 8001486:	220c      	movs	r2, #12
 8001488:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 80014a4:	f004 faf6 	bl	8005a94 <HAL_UART_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80014ae:	f000 f92b 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000210 	.word	0x20000210
 80014bc:	40004800 	.word	0x40004800

080014c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ce:	2206      	movs	r2, #6
 80014d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014d4:	2202      	movs	r2, #2
 80014d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e0:	2202      	movs	r2, #2
 80014e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014fe:	2200      	movs	r2, #0
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001504:	f002 fc25 	bl	8003d52 <HAL_PCD_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800150e:	f000 f8fb 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000294 	.word	0x20000294

0800151c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	; 0x30
 8001520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	4b4d      	ldr	r3, [pc, #308]	; (8001668 <MX_GPIO_Init+0x14c>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a4c      	ldr	r2, [pc, #304]	; (8001668 <MX_GPIO_Init+0x14c>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b4a      	ldr	r3, [pc, #296]	; (8001668 <MX_GPIO_Init+0x14c>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800154a:	4b47      	ldr	r3, [pc, #284]	; (8001668 <MX_GPIO_Init+0x14c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a46      	ldr	r2, [pc, #280]	; (8001668 <MX_GPIO_Init+0x14c>)
 8001550:	f043 0320 	orr.w	r3, r3, #32
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b44      	ldr	r3, [pc, #272]	; (8001668 <MX_GPIO_Init+0x14c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0320 	and.w	r3, r3, #32
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001562:	4b41      	ldr	r3, [pc, #260]	; (8001668 <MX_GPIO_Init+0x14c>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a40      	ldr	r2, [pc, #256]	; (8001668 <MX_GPIO_Init+0x14c>)
 8001568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b3e      	ldr	r3, [pc, #248]	; (8001668 <MX_GPIO_Init+0x14c>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	4b3b      	ldr	r3, [pc, #236]	; (8001668 <MX_GPIO_Init+0x14c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a3a      	ldr	r2, [pc, #232]	; (8001668 <MX_GPIO_Init+0x14c>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b38      	ldr	r3, [pc, #224]	; (8001668 <MX_GPIO_Init+0x14c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	4b35      	ldr	r3, [pc, #212]	; (8001668 <MX_GPIO_Init+0x14c>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a34      	ldr	r2, [pc, #208]	; (8001668 <MX_GPIO_Init+0x14c>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b32      	ldr	r3, [pc, #200]	; (8001668 <MX_GPIO_Init+0x14c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <MX_GPIO_Init+0x14c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a2e      	ldr	r2, [pc, #184]	; (8001668 <MX_GPIO_Init+0x14c>)
 80015b0:	f043 0308 	orr.w	r3, r3, #8
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b2c      	ldr	r3, [pc, #176]	; (8001668 <MX_GPIO_Init+0x14c>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015c2:	4b29      	ldr	r3, [pc, #164]	; (8001668 <MX_GPIO_Init+0x14c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a28      	ldr	r2, [pc, #160]	; (8001668 <MX_GPIO_Init+0x14c>)
 80015c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <MX_GPIO_Init+0x14c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	f244 0181 	movw	r1, #16513	; 0x4081
 80015e0:	4822      	ldr	r0, [pc, #136]	; (800166c <MX_GPIO_Init+0x150>)
 80015e2:	f001 fda1 	bl	8003128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2140      	movs	r1, #64	; 0x40
 80015ea:	4821      	ldr	r0, [pc, #132]	; (8001670 <MX_GPIO_Init+0x154>)
 80015ec:	f001 fd9c 	bl	8003128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80015f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	481b      	ldr	r0, [pc, #108]	; (8001674 <MX_GPIO_Init+0x158>)
 8001608:	f001 fbe4 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800160c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	4619      	mov	r1, r3
 8001624:	4811      	ldr	r0, [pc, #68]	; (800166c <MX_GPIO_Init+0x150>)
 8001626:	f001 fbd5 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800162a:	2340      	movs	r3, #64	; 0x40
 800162c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	480b      	ldr	r0, [pc, #44]	; (8001670 <MX_GPIO_Init+0x154>)
 8001642:	f001 fbc7 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001652:	f107 031c 	add.w	r3, r7, #28
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_GPIO_Init+0x154>)
 800165a:	f001 fbbb 	bl	8002dd4 <HAL_GPIO_Init>

}
 800165e:	bf00      	nop
 8001660:	3730      	adds	r7, #48	; 0x30
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	40020400 	.word	0x40020400
 8001670:	40021800 	.word	0x40021800
 8001674:	40020800 	.word	0x40020800

08001678 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001678:	b5b0      	push	{r4, r5, r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	//SDA 		-> F0
	//SCL 		-> F1
	//ADC1 CH0 	-> A0

	UNUSED(htim);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8001680:	2201      	movs	r2, #1
 8001682:	2101      	movs	r1, #1
 8001684:	481c      	ldr	r0, [pc, #112]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001686:	f001 fd4f 	bl	8003128 <HAL_GPIO_WritePin>
	//adc_value = HAL_ADC_GetValue(&hadc1);

	//sprintf(message, "%hu\r\n",(int)adc_value);
	//HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);

	MPU6050_Read_Accel();
 800168a:	f7ff fc8d 	bl	8000fa8 <MPU6050_Read_Accel>
	// MPU6050_Read_Gyro();
	char message[11];
	//sprintf(message, "%1.2f\n",Ax);
	gcvt(Az,4,message);
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe ff24 	bl	80004e0 <__aeabi_f2d>
 8001698:	4604      	mov	r4, r0
 800169a:	460d      	mov	r5, r1
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	4619      	mov	r1, r3
 80016a2:	2004      	movs	r0, #4
 80016a4:	ec45 4b10 	vmov	d0, r4, r5
 80016a8:	f005 f9be 	bl	8006a28 <gcvt>
	strcat(message,"\n");
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe fda9 	bl	8000208 <strlen>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	4413      	add	r3, r2
 80016c0:	490f      	ldr	r1, [pc, #60]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80016c2:	461a      	mov	r2, r3
 80016c4:	460b      	mov	r3, r1
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	8013      	strh	r3, [r2, #0]
	//message=to_string(Ax);
	HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe fd9a 	bl	8000208 <strlen>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	f107 010c 	add.w	r1, r7, #12
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295
 80016e0:	4808      	ldr	r0, [pc, #32]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80016e2:	f004 fa25 	bl	8005b30 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2101      	movs	r1, #1
 80016ea:	4803      	ldr	r0, [pc, #12]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80016ec:	f001 fd1c 	bl	8003128 <HAL_GPIO_WritePin>

}
 80016f0:	bf00      	nop
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bdb0      	pop	{r4, r5, r7, pc}
 80016f8:	40020400 	.word	0x40020400
 80016fc:	2000073c 	.word	0x2000073c
 8001700:	08008810 	.word	0x08008810
 8001704:	20000210 	.word	0x20000210

08001708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <HAL_MspInit+0x44>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a0e      	ldr	r2, [pc, #56]	; (800175c <HAL_MspInit+0x44>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_MspInit+0x44>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_MspInit+0x44>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	4a08      	ldr	r2, [pc, #32]	; (800175c <HAL_MspInit+0x44>)
 800173c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001740:	6453      	str	r3, [r2, #68]	; 0x44
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_MspInit+0x44>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800

08001760 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a15      	ldr	r2, [pc, #84]	; (80017d4 <HAL_ADC_MspInit+0x74>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d123      	bne.n	80017ca <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_ADC_MspInit+0x78>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	4a14      	ldr	r2, [pc, #80]	; (80017d8 <HAL_ADC_MspInit+0x78>)
 8001788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178c:	6453      	str	r3, [r2, #68]	; 0x44
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_ADC_MspInit+0x78>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_ADC_MspInit+0x78>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <HAL_ADC_MspInit+0x78>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <HAL_ADC_MspInit+0x78>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017b2:	2301      	movs	r3, #1
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b6:	2303      	movs	r3, #3
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	4805      	ldr	r0, [pc, #20]	; (80017dc <HAL_ADC_MspInit+0x7c>)
 80017c6:	f001 fb05 	bl	8002dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	; 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40012000 	.word	0x40012000
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020000 	.word	0x40020000

080017e0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08e      	sub	sp, #56	; 0x38
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a4e      	ldr	r2, [pc, #312]	; (8001938 <HAL_ETH_MspInit+0x158>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	f040 8096 	bne.w	8001930 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001804:	4b4d      	ldr	r3, [pc, #308]	; (800193c <HAL_ETH_MspInit+0x15c>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	4a4c      	ldr	r2, [pc, #304]	; (800193c <HAL_ETH_MspInit+0x15c>)
 800180a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800180e:	6313      	str	r3, [r2, #48]	; 0x30
 8001810:	4b4a      	ldr	r3, [pc, #296]	; (800193c <HAL_ETH_MspInit+0x15c>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001818:	623b      	str	r3, [r7, #32]
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	4b47      	ldr	r3, [pc, #284]	; (800193c <HAL_ETH_MspInit+0x15c>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	4a46      	ldr	r2, [pc, #280]	; (800193c <HAL_ETH_MspInit+0x15c>)
 8001822:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001826:	6313      	str	r3, [r2, #48]	; 0x30
 8001828:	4b44      	ldr	r3, [pc, #272]	; (800193c <HAL_ETH_MspInit+0x15c>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001830:	61fb      	str	r3, [r7, #28]
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	4b41      	ldr	r3, [pc, #260]	; (800193c <HAL_ETH_MspInit+0x15c>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	4a40      	ldr	r2, [pc, #256]	; (800193c <HAL_ETH_MspInit+0x15c>)
 800183a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800183e:	6313      	str	r3, [r2, #48]	; 0x30
 8001840:	4b3e      	ldr	r3, [pc, #248]	; (800193c <HAL_ETH_MspInit+0x15c>)
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001848:	61bb      	str	r3, [r7, #24]
 800184a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800184c:	4b3b      	ldr	r3, [pc, #236]	; (800193c <HAL_ETH_MspInit+0x15c>)
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	4a3a      	ldr	r2, [pc, #232]	; (800193c <HAL_ETH_MspInit+0x15c>)
 8001852:	f043 0304 	orr.w	r3, r3, #4
 8001856:	6313      	str	r3, [r2, #48]	; 0x30
 8001858:	4b38      	ldr	r3, [pc, #224]	; (800193c <HAL_ETH_MspInit+0x15c>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001864:	4b35      	ldr	r3, [pc, #212]	; (800193c <HAL_ETH_MspInit+0x15c>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	4a34      	ldr	r2, [pc, #208]	; (800193c <HAL_ETH_MspInit+0x15c>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6313      	str	r3, [r2, #48]	; 0x30
 8001870:	4b32      	ldr	r3, [pc, #200]	; (800193c <HAL_ETH_MspInit+0x15c>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187c:	4b2f      	ldr	r3, [pc, #188]	; (800193c <HAL_ETH_MspInit+0x15c>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	4a2e      	ldr	r2, [pc, #184]	; (800193c <HAL_ETH_MspInit+0x15c>)
 8001882:	f043 0302 	orr.w	r3, r3, #2
 8001886:	6313      	str	r3, [r2, #48]	; 0x30
 8001888:	4b2c      	ldr	r3, [pc, #176]	; (800193c <HAL_ETH_MspInit+0x15c>)
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001894:	4b29      	ldr	r3, [pc, #164]	; (800193c <HAL_ETH_MspInit+0x15c>)
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	4a28      	ldr	r2, [pc, #160]	; (800193c <HAL_ETH_MspInit+0x15c>)
 800189a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800189e:	6313      	str	r3, [r2, #48]	; 0x30
 80018a0:	4b26      	ldr	r3, [pc, #152]	; (800193c <HAL_ETH_MspInit+0x15c>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80018ac:	2332      	movs	r3, #50	; 0x32
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b8:	2303      	movs	r3, #3
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018bc:	230b      	movs	r3, #11
 80018be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c4:	4619      	mov	r1, r3
 80018c6:	481e      	ldr	r0, [pc, #120]	; (8001940 <HAL_ETH_MspInit+0x160>)
 80018c8:	f001 fa84 	bl	8002dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80018cc:	2386      	movs	r3, #134	; 0x86
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d8:	2303      	movs	r3, #3
 80018da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018dc:	230b      	movs	r3, #11
 80018de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e4:	4619      	mov	r1, r3
 80018e6:	4817      	ldr	r0, [pc, #92]	; (8001944 <HAL_ETH_MspInit+0x164>)
 80018e8:	f001 fa74 	bl	8002dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80018ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018fe:	230b      	movs	r3, #11
 8001900:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001906:	4619      	mov	r1, r3
 8001908:	480f      	ldr	r0, [pc, #60]	; (8001948 <HAL_ETH_MspInit+0x168>)
 800190a:	f001 fa63 	bl	8002dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800190e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001920:	230b      	movs	r3, #11
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001928:	4619      	mov	r1, r3
 800192a:	4808      	ldr	r0, [pc, #32]	; (800194c <HAL_ETH_MspInit+0x16c>)
 800192c:	f001 fa52 	bl	8002dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001930:	bf00      	nop
 8001932:	3738      	adds	r7, #56	; 0x38
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40028000 	.word	0x40028000
 800193c:	40023800 	.word	0x40023800
 8001940:	40020800 	.word	0x40020800
 8001944:	40020000 	.word	0x40020000
 8001948:	40020400 	.word	0x40020400
 800194c:	40021800 	.word	0x40021800

08001950 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a17      	ldr	r2, [pc, #92]	; (80019cc <HAL_I2C_MspInit+0x7c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d127      	bne.n	80019c2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <HAL_I2C_MspInit+0x80>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a16      	ldr	r2, [pc, #88]	; (80019d0 <HAL_I2C_MspInit+0x80>)
 8001978:	f043 0320 	orr.w	r3, r3, #32
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <HAL_I2C_MspInit+0x80>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0320 	and.w	r3, r3, #32
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800198a:	2303      	movs	r3, #3
 800198c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800198e:	2312      	movs	r3, #18
 8001990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001992:	2301      	movs	r3, #1
 8001994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001996:	2303      	movs	r3, #3
 8001998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800199a:	2304      	movs	r3, #4
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	480b      	ldr	r0, [pc, #44]	; (80019d4 <HAL_I2C_MspInit+0x84>)
 80019a6:	f001 fa15 	bl	8002dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_I2C_MspInit+0x80>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a08      	ldr	r2, [pc, #32]	; (80019d0 <HAL_I2C_MspInit+0x80>)
 80019b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_I2C_MspInit+0x80>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019c2:	bf00      	nop
 80019c4:	3728      	adds	r7, #40	; 0x28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40005800 	.word	0x40005800
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40021400 	.word	0x40021400

080019d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e8:	d113      	bne.n	8001a12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_TIM_Base_MspInit+0x44>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <HAL_TIM_Base_MspInit+0x44>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_TIM_Base_MspInit+0x44>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	201c      	movs	r0, #28
 8001a08:	f000 fd41 	bl	800248e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a0c:	201c      	movs	r0, #28
 8001a0e:	f000 fd5a 	bl	80024c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800

08001a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a17      	ldr	r2, [pc, #92]	; (8001a9c <HAL_UART_MspInit+0x7c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d128      	bne.n	8001a94 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_UART_MspInit+0x80>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	4a16      	ldr	r2, [pc, #88]	; (8001aa0 <HAL_UART_MspInit+0x80>)
 8001a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <HAL_UART_MspInit+0x80>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_UART_MspInit+0x80>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a10      	ldr	r2, [pc, #64]	; (8001aa0 <HAL_UART_MspInit+0x80>)
 8001a60:	f043 0308 	orr.w	r3, r3, #8
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <HAL_UART_MspInit+0x80>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a84:	2307      	movs	r3, #7
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <HAL_UART_MspInit+0x84>)
 8001a90:	f001 f9a0 	bl	8002dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a94:	bf00      	nop
 8001a96:	3728      	adds	r7, #40	; 0x28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40004800 	.word	0x40004800
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020c00 	.word	0x40020c00

08001aa8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ac8:	d141      	bne.n	8001b4e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <HAL_PCD_MspInit+0xb0>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <HAL_PCD_MspInit+0xb0>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_PCD_MspInit+0xb0>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ae2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001af4:	230a      	movs	r3, #10
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	4817      	ldr	r0, [pc, #92]	; (8001b5c <HAL_PCD_MspInit+0xb4>)
 8001b00:	f001 f968 	bl	8002dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4619      	mov	r1, r3
 8001b18:	4810      	ldr	r0, [pc, #64]	; (8001b5c <HAL_PCD_MspInit+0xb4>)
 8001b1a:	f001 f95b 	bl	8002dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_PCD_MspInit+0xb0>)
 8001b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b22:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <HAL_PCD_MspInit+0xb0>)
 8001b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b28:	6353      	str	r3, [r2, #52]	; 0x34
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_PCD_MspInit+0xb0>)
 8001b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_PCD_MspInit+0xb0>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <HAL_PCD_MspInit+0xb0>)
 8001b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_PCD_MspInit+0xb0>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b4e:	bf00      	nop
 8001b50:	3728      	adds	r7, #40	; 0x28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40020000 	.word	0x40020000

08001b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <HardFault_Handler+0x4>

08001b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <MemManage_Handler+0x4>

08001b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <BusFault_Handler+0x4>

08001b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <UsageFault_Handler+0x4>

08001b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb4:	f000 f8ba 	bl	8001d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <TIM2_IRQHandler+0x10>)
 8001bc2:	f003 fb7b 	bl	80052bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000740 	.word	0x20000740

08001bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd8:	4a14      	ldr	r2, [pc, #80]	; (8001c2c <_sbrk+0x5c>)
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <_sbrk+0x60>)
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <_sbrk+0x64>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d102      	bne.n	8001bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <_sbrk+0x64>)
 8001bee:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <_sbrk+0x68>)
 8001bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <_sbrk+0x64>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d207      	bcs.n	8001c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c00:	f004 ff3e 	bl	8006a80 <__errno>
 8001c04:	4602      	mov	r2, r0
 8001c06:	230c      	movs	r3, #12
 8001c08:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	e009      	b.n	8001c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <_sbrk+0x64>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c16:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <_sbrk+0x64>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	4a05      	ldr	r2, [pc, #20]	; (8001c34 <_sbrk+0x64>)
 8001c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c22:	68fb      	ldr	r3, [r7, #12]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20050000 	.word	0x20050000
 8001c30:	00000400 	.word	0x00000400
 8001c34:	20000200 	.word	0x20000200
 8001c38:	200007e0 	.word	0x200007e0

08001c3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <SystemInit+0x20>)
 8001c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c46:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <SystemInit+0x20>)
 8001c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c64:	480d      	ldr	r0, [pc, #52]	; (8001c9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c66:	490e      	ldr	r1, [pc, #56]	; (8001ca0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c68:	4a0e      	ldr	r2, [pc, #56]	; (8001ca4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c6c:	e002      	b.n	8001c74 <LoopCopyDataInit>

08001c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c72:	3304      	adds	r3, #4

08001c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c78:	d3f9      	bcc.n	8001c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c7c:	4c0b      	ldr	r4, [pc, #44]	; (8001cac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c80:	e001      	b.n	8001c86 <LoopFillZerobss>

08001c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c84:	3204      	adds	r2, #4

08001c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c88:	d3fb      	bcc.n	8001c82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c8a:	f7ff ffd7 	bl	8001c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c8e:	f004 fefd 	bl	8006a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c92:	f7ff fa11 	bl	80010b8 <main>
  bx  lr    
 8001c96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c98:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ca4:	08008a68 	.word	0x08008a68
  ldr r2, =_sbss
 8001ca8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001cac:	200007e0 	.word	0x200007e0

08001cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb0:	e7fe      	b.n	8001cb0 <ADC_IRQHandler>

08001cb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb6:	2003      	movs	r0, #3
 8001cb8:	f000 fbde 	bl	8002478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f000 f805 	bl	8001ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc2:	f7ff fd29 	bl	8001718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_InitTick+0x54>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_InitTick+0x58>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 fbf9 	bl	80024e2 <HAL_SYSTICK_Config>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00e      	b.n	8001d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b0f      	cmp	r3, #15
 8001cfe:	d80a      	bhi.n	8001d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d00:	2200      	movs	r2, #0
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	f000 fbc1 	bl	800248e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d0c:	4a06      	ldr	r2, [pc, #24]	; (8001d28 <HAL_InitTick+0x5c>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e000      	b.n	8001d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000000 	.word	0x20000000
 8001d24:	20000008 	.word	0x20000008
 8001d28:	20000004 	.word	0x20000004

08001d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_IncTick+0x20>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_IncTick+0x24>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <HAL_IncTick+0x24>)
 8001d3e:	6013      	str	r3, [r2, #0]
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000008 	.word	0x20000008
 8001d50:	200007d8 	.word	0x200007d8

08001d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return uwTick;
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <HAL_GetTick+0x14>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	200007d8 	.word	0x200007d8

08001d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d74:	f7ff ffee 	bl	8001d54 <HAL_GetTick>
 8001d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d84:	d005      	beq.n	8001d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_Delay+0x40>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d92:	bf00      	nop
 8001d94:	f7ff ffde 	bl	8001d54 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d8f7      	bhi.n	8001d94 <HAL_Delay+0x28>
  {
  }
}
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000008 	.word	0x20000008

08001db0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e031      	b.n	8001e2a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff fcc6 	bl	8001760 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d116      	bne.n	8001e1c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_ADC_Init+0x84>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	f043 0202 	orr.w	r2, r3, #2
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f970 	bl	80020e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f023 0303 	bic.w	r3, r3, #3
 8001e12:	f043 0201 	orr.w	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	641a      	str	r2, [r3, #64]	; 0x40
 8001e1a:	e001      	b.n	8001e20 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	ffffeefd 	.word	0xffffeefd

08001e38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x1c>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e136      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x28a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b09      	cmp	r3, #9
 8001e62:	d93a      	bls.n	8001eda <HAL_ADC_ConfigChannel+0xa2>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e6c:	d035      	beq.n	8001eda <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68d9      	ldr	r1, [r3, #12]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	3b1e      	subs	r3, #30
 8001e84:	2207      	movs	r2, #7
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	400a      	ands	r2, r1
 8001e92:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a8d      	ldr	r2, [pc, #564]	; (80020d0 <HAL_ADC_ConfigChannel+0x298>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d10a      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68d9      	ldr	r1, [r3, #12]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	061a      	lsls	r2, r3, #24
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eb2:	e035      	b.n	8001f20 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68d9      	ldr	r1, [r3, #12]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4403      	add	r3, r0
 8001ecc:	3b1e      	subs	r3, #30
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ed8:	e022      	b.n	8001f20 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6919      	ldr	r1, [r3, #16]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	2207      	movs	r2, #7
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43da      	mvns	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	400a      	ands	r2, r1
 8001efc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6919      	ldr	r1, [r3, #16]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	4603      	mov	r3, r0
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4403      	add	r3, r0
 8001f16:	409a      	lsls	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b06      	cmp	r3, #6
 8001f26:	d824      	bhi.n	8001f72 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	3b05      	subs	r3, #5
 8001f3a:	221f      	movs	r2, #31
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43da      	mvns	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	400a      	ands	r2, r1
 8001f48:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	4618      	mov	r0, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	3b05      	subs	r3, #5
 8001f64:	fa00 f203 	lsl.w	r2, r0, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	635a      	str	r2, [r3, #52]	; 0x34
 8001f70:	e04c      	b.n	800200c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b0c      	cmp	r3, #12
 8001f78:	d824      	bhi.n	8001fc4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	3b23      	subs	r3, #35	; 0x23
 8001f8c:	221f      	movs	r2, #31
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43da      	mvns	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	400a      	ands	r2, r1
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	4618      	mov	r0, r3
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3b23      	subs	r3, #35	; 0x23
 8001fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	631a      	str	r2, [r3, #48]	; 0x30
 8001fc2:	e023      	b.n	800200c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3b41      	subs	r3, #65	; 0x41
 8001fd6:	221f      	movs	r2, #31
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43da      	mvns	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	400a      	ands	r2, r1
 8001fe4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3b41      	subs	r3, #65	; 0x41
 8002000:	fa00 f203 	lsl.w	r2, r0, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a30      	ldr	r2, [pc, #192]	; (80020d4 <HAL_ADC_ConfigChannel+0x29c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d10a      	bne.n	800202c <HAL_ADC_ConfigChannel+0x1f4>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800201e:	d105      	bne.n	800202c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002020:	4b2d      	ldr	r3, [pc, #180]	; (80020d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4a2c      	ldr	r2, [pc, #176]	; (80020d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002026:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800202a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a28      	ldr	r2, [pc, #160]	; (80020d4 <HAL_ADC_ConfigChannel+0x29c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d10f      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x21e>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b12      	cmp	r3, #18
 800203c:	d10b      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800203e:	4b26      	ldr	r3, [pc, #152]	; (80020d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4a25      	ldr	r2, [pc, #148]	; (80020d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002044:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002048:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800204a:	4b23      	ldr	r3, [pc, #140]	; (80020d8 <HAL_ADC_ConfigChannel+0x2a0>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4a22      	ldr	r2, [pc, #136]	; (80020d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002050:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002054:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a1e      	ldr	r2, [pc, #120]	; (80020d4 <HAL_ADC_ConfigChannel+0x29c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d12b      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x280>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a1a      	ldr	r2, [pc, #104]	; (80020d0 <HAL_ADC_ConfigChannel+0x298>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d003      	beq.n	8002072 <HAL_ADC_ConfigChannel+0x23a>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b11      	cmp	r3, #17
 8002070:	d122      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002072:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4a18      	ldr	r2, [pc, #96]	; (80020d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002078:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800207c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800207e:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4a15      	ldr	r2, [pc, #84]	; (80020d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002084:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002088:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a10      	ldr	r2, [pc, #64]	; (80020d0 <HAL_ADC_ConfigChannel+0x298>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d111      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_ADC_ConfigChannel+0x2a4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <HAL_ADC_ConfigChannel+0x2a8>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	0c9a      	lsrs	r2, r3, #18
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020aa:	e002      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f9      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	10000012 	.word	0x10000012
 80020d4:	40012000 	.word	0x40012000
 80020d8:	40012300 	.word	0x40012300
 80020dc:	20000000 	.word	0x20000000
 80020e0:	431bde83 	.word	0x431bde83

080020e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020ec:	4b78      	ldr	r3, [pc, #480]	; (80022d0 <ADC_Init+0x1ec>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4a77      	ldr	r2, [pc, #476]	; (80022d0 <ADC_Init+0x1ec>)
 80020f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020f8:	4b75      	ldr	r3, [pc, #468]	; (80022d0 <ADC_Init+0x1ec>)
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4973      	ldr	r1, [pc, #460]	; (80022d0 <ADC_Init+0x1ec>)
 8002102:	4313      	orrs	r3, r2
 8002104:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002114:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6859      	ldr	r1, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	021a      	lsls	r2, r3, #8
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002138:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6899      	ldr	r1, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	4a58      	ldr	r2, [pc, #352]	; (80022d4 <ADC_Init+0x1f0>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d022      	beq.n	80021be <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002186:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6899      	ldr	r1, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6899      	ldr	r1, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	e00f      	b.n	80021de <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0202 	bic.w	r2, r2, #2
 80021ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6899      	ldr	r1, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	005a      	lsls	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01b      	beq.n	8002244 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800221a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800222a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6859      	ldr	r1, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	3b01      	subs	r3, #1
 8002238:	035a      	lsls	r2, r3, #13
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	e007      	b.n	8002254 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002252:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	3b01      	subs	r3, #1
 8002270:	051a      	lsls	r2, r3, #20
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002288:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6899      	ldr	r1, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002296:	025a      	lsls	r2, r3, #9
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6899      	ldr	r1, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	029a      	lsls	r2, r3, #10
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	609a      	str	r2, [r3, #8]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40012300 	.word	0x40012300
 80022d4:	0f000001 	.word	0x0f000001

080022d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <__NVIC_SetPriorityGrouping+0x40>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f4:	4013      	ands	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <__NVIC_SetPriorityGrouping+0x44>)
 8002302:	4313      	orrs	r3, r2
 8002304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002306:	4a04      	ldr	r2, [pc, #16]	; (8002318 <__NVIC_SetPriorityGrouping+0x40>)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	60d3      	str	r3, [r2, #12]
}
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000ed00 	.word	0xe000ed00
 800231c:	05fa0000 	.word	0x05fa0000

08002320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <__NVIC_GetPriorityGrouping+0x18>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	f003 0307 	and.w	r3, r3, #7
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	2b00      	cmp	r3, #0
 800234c:	db0b      	blt.n	8002366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	4907      	ldr	r1, [pc, #28]	; (8002374 <__NVIC_EnableIRQ+0x38>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	2001      	movs	r0, #1
 800235e:	fa00 f202 	lsl.w	r2, r0, r2
 8002362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000e100 	.word	0xe000e100

08002378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	6039      	str	r1, [r7, #0]
 8002382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	2b00      	cmp	r3, #0
 800238a:	db0a      	blt.n	80023a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	490c      	ldr	r1, [pc, #48]	; (80023c4 <__NVIC_SetPriority+0x4c>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	440b      	add	r3, r1
 800239c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a0:	e00a      	b.n	80023b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4908      	ldr	r1, [pc, #32]	; (80023c8 <__NVIC_SetPriority+0x50>)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	3b04      	subs	r3, #4
 80023b0:	0112      	lsls	r2, r2, #4
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	440b      	add	r3, r1
 80023b6:	761a      	strb	r2, [r3, #24]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000e100 	.word	0xe000e100
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f1c3 0307 	rsb	r3, r3, #7
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	bf28      	it	cs
 80023ea:	2304      	movcs	r3, #4
 80023ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3304      	adds	r3, #4
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d902      	bls.n	80023fc <NVIC_EncodePriority+0x30>
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3b03      	subs	r3, #3
 80023fa:	e000      	b.n	80023fe <NVIC_EncodePriority+0x32>
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	f04f 32ff 	mov.w	r2, #4294967295
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	401a      	ands	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43d9      	mvns	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	4313      	orrs	r3, r2
         );
}
 8002426:	4618      	mov	r0, r3
 8002428:	3724      	adds	r7, #36	; 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002444:	d301      	bcc.n	800244a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002446:	2301      	movs	r3, #1
 8002448:	e00f      	b.n	800246a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <SysTick_Config+0x40>)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3b01      	subs	r3, #1
 8002450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002452:	210f      	movs	r1, #15
 8002454:	f04f 30ff 	mov.w	r0, #4294967295
 8002458:	f7ff ff8e 	bl	8002378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <SysTick_Config+0x40>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002462:	4b04      	ldr	r3, [pc, #16]	; (8002474 <SysTick_Config+0x40>)
 8002464:	2207      	movs	r2, #7
 8002466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	e000e010 	.word	0xe000e010

08002478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff ff29 	bl	80022d8 <__NVIC_SetPriorityGrouping>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024a0:	f7ff ff3e 	bl	8002320 <__NVIC_GetPriorityGrouping>
 80024a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	6978      	ldr	r0, [r7, #20]
 80024ac:	f7ff ff8e 	bl	80023cc <NVIC_EncodePriority>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff5d 	bl	8002378 <__NVIC_SetPriority>
}
 80024be:	bf00      	nop
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff31 	bl	800233c <__NVIC_EnableIRQ>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff ffa2 	bl	8002434 <SysTick_Config>
 80024f0:	4603      	mov	r3, r0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800250c:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_ETH_Init+0x2b8>)
 800250e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002514:	2300      	movs	r3, #0
 8002516:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e183      	b.n	800282a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d106      	bne.n	800253c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff f952 	bl	80017e0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253c:	4b9e      	ldr	r3, [pc, #632]	; (80027b8 <HAL_ETH_Init+0x2bc>)
 800253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002540:	4a9d      	ldr	r2, [pc, #628]	; (80027b8 <HAL_ETH_Init+0x2bc>)
 8002542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002546:	6453      	str	r3, [r2, #68]	; 0x44
 8002548:	4b9b      	ldr	r3, [pc, #620]	; (80027b8 <HAL_ETH_Init+0x2bc>)
 800254a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002554:	4b99      	ldr	r3, [pc, #612]	; (80027bc <HAL_ETH_Init+0x2c0>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4a98      	ldr	r2, [pc, #608]	; (80027bc <HAL_ETH_Init+0x2c0>)
 800255a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800255e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002560:	4b96      	ldr	r3, [pc, #600]	; (80027bc <HAL_ETH_Init+0x2c0>)
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	4994      	ldr	r1, [pc, #592]	; (80027bc <HAL_ETH_Init+0x2c0>)
 800256a:	4313      	orrs	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0201 	orr.w	r2, r2, #1
 8002580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002584:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002586:	f7ff fbe5 	bl	8001d54 <HAL_GetTick>
 800258a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800258c:	e011      	b.n	80025b2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800258e:	f7ff fbe1 	bl	8001d54 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800259c:	d909      	bls.n	80025b2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2203      	movs	r2, #3
 80025a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e13b      	b.n	800282a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1e4      	bne.n	800258e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f023 031c 	bic.w	r3, r3, #28
 80025d2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80025d4:	f002 f97e 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 80025d8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	4a78      	ldr	r2, [pc, #480]	; (80027c0 <HAL_ETH_Init+0x2c4>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d908      	bls.n	80025f4 <HAL_ETH_Init+0xf8>
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	4a77      	ldr	r2, [pc, #476]	; (80027c4 <HAL_ETH_Init+0x2c8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d804      	bhi.n	80025f4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f043 0308 	orr.w	r3, r3, #8
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	e027      	b.n	8002644 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	4a73      	ldr	r2, [pc, #460]	; (80027c4 <HAL_ETH_Init+0x2c8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d908      	bls.n	800260e <HAL_ETH_Init+0x112>
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	4a72      	ldr	r2, [pc, #456]	; (80027c8 <HAL_ETH_Init+0x2cc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d804      	bhi.n	800260e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f043 030c 	orr.w	r3, r3, #12
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	e01a      	b.n	8002644 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	4a6d      	ldr	r2, [pc, #436]	; (80027c8 <HAL_ETH_Init+0x2cc>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d903      	bls.n	800261e <HAL_ETH_Init+0x122>
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	4a6c      	ldr	r2, [pc, #432]	; (80027cc <HAL_ETH_Init+0x2d0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d911      	bls.n	8002642 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	4a6a      	ldr	r2, [pc, #424]	; (80027cc <HAL_ETH_Init+0x2d0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d908      	bls.n	8002638 <HAL_ETH_Init+0x13c>
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	4a69      	ldr	r2, [pc, #420]	; (80027d0 <HAL_ETH_Init+0x2d4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d804      	bhi.n	8002638 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	e005      	b.n	8002644 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f043 0310 	orr.w	r3, r3, #16
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	e000      	b.n	8002644 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002642:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800264c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002650:	2100      	movs	r1, #0
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f956 	bl	8002904 <HAL_ETH_WritePHYRegister>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002662:	6939      	ldr	r1, [r7, #16]
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f9b3 	bl	80029d0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e0d9      	b.n	800282a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002676:	20ff      	movs	r0, #255	; 0xff
 8002678:	f7ff fb78 	bl	8001d6c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80a7 	beq.w	80027d4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002686:	f7ff fb65 	bl	8001d54 <HAL_GetTick>
 800268a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800268c:	f107 030c 	add.w	r3, r7, #12
 8002690:	461a      	mov	r2, r3
 8002692:	2101      	movs	r1, #1
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f8cd 	bl	8002834 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800269a:	f7ff fb5b 	bl	8001d54 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d90f      	bls.n	80026cc <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80026b0:	6939      	ldr	r1, [r7, #16]
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f98c 	bl	80029d0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e0ae      	b.n	800282a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0da      	beq.n	800268c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80026d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026da:	2100      	movs	r1, #0
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f911 	bl	8002904 <HAL_ETH_WritePHYRegister>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00b      	beq.n	8002700 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80026ec:	6939      	ldr	r1, [r7, #16]
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f96e 	bl	80029d0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80026fc:	2301      	movs	r3, #1
 80026fe:	e094      	b.n	800282a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002700:	f7ff fb28 	bl	8001d54 <HAL_GetTick>
 8002704:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002706:	f107 030c 	add.w	r3, r7, #12
 800270a:	461a      	mov	r2, r3
 800270c:	2101      	movs	r1, #1
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f890 	bl	8002834 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002714:	f7ff fb1e 	bl	8001d54 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d90f      	bls.n	8002746 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800272a:	6939      	ldr	r1, [r7, #16]
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f94f 	bl	80029d0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e071      	b.n	800282a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0da      	beq.n	8002706 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002750:	f107 030c 	add.w	r3, r7, #12
 8002754:	461a      	mov	r2, r3
 8002756:	211f      	movs	r1, #31
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f86b 	bl	8002834 <HAL_ETH_ReadPHYRegister>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00b      	beq.n	800277c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002768:	6939      	ldr	r1, [r7, #16]
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f930 	bl	80029d0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002778:	2301      	movs	r3, #1
 800277a:	e056      	b.n	800282a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b00      	cmp	r3, #0
 8002784:	d004      	beq.n	8002790 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	e002      	b.n	8002796 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	e037      	b.n	8002818 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	e032      	b.n	8002818 <HAL_ETH_Init+0x31c>
 80027b2:	bf00      	nop
 80027b4:	03938700 	.word	0x03938700
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40013800 	.word	0x40013800
 80027c0:	01312cff 	.word	0x01312cff
 80027c4:	02160ebf 	.word	0x02160ebf
 80027c8:	039386ff 	.word	0x039386ff
 80027cc:	05f5e0ff 	.word	0x05f5e0ff
 80027d0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	08db      	lsrs	r3, r3, #3
 80027da:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	085b      	lsrs	r3, r3, #1
 80027e2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80027e4:	4313      	orrs	r3, r2
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	461a      	mov	r2, r3
 80027ea:	2100      	movs	r1, #0
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f889 	bl	8002904 <HAL_ETH_WritePHYRegister>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00b      	beq.n	8002810 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80027fc:	6939      	ldr	r1, [r7, #16]
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f8e6 	bl	80029d0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e00c      	b.n	800282a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002810:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002814:	f7ff faaa 	bl	8001d6c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002818:	6939      	ldr	r1, [r7, #16]
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f8d8 	bl	80029d0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3720      	adds	r7, #32
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop

08002834 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	460b      	mov	r3, r1
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b82      	cmp	r3, #130	; 0x82
 8002854:	d101      	bne.n	800285a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002856:	2302      	movs	r3, #2
 8002858:	e050      	b.n	80028fc <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2282      	movs	r2, #130	; 0x82
 800285e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f003 031c 	and.w	r3, r3, #28
 8002870:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8a1b      	ldrh	r3, [r3, #16]
 8002876:	02db      	lsls	r3, r3, #11
 8002878:	b29b      	uxth	r3, r3
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002880:	897b      	ldrh	r3, [r7, #10]
 8002882:	019b      	lsls	r3, r3, #6
 8002884:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	4313      	orrs	r3, r2
 800288c:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f023 0302 	bic.w	r3, r3, #2
 8002894:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80028a6:	f7ff fa55 	bl	8001d54 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80028ac:	e015      	b.n	80028da <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80028ae:	f7ff fa51 	bl	8001d54 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028bc:	d309      	bcc.n	80028d2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e014      	b.n	80028fc <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1e4      	bne.n	80028ae <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	460b      	mov	r3, r1
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b42      	cmp	r3, #66	; 0x42
 8002924:	d101      	bne.n	800292a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002926:	2302      	movs	r3, #2
 8002928:	e04e      	b.n	80029c8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2242      	movs	r2, #66	; 0x42
 800292e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f003 031c 	and.w	r3, r3, #28
 8002940:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8a1b      	ldrh	r3, [r3, #16]
 8002946:	02db      	lsls	r3, r3, #11
 8002948:	b29b      	uxth	r3, r3
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4313      	orrs	r3, r2
 800294e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002950:	897b      	ldrh	r3, [r7, #10]
 8002952:	019b      	lsls	r3, r3, #6
 8002954:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4313      	orrs	r3, r2
 800295c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f043 0302 	orr.w	r3, r3, #2
 8002964:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002980:	f7ff f9e8 	bl	8001d54 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002986:	e015      	b.n	80029b4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002988:	f7ff f9e4 	bl	8001d54 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002996:	d309      	bcc.n	80029ac <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e00d      	b.n	80029c8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1e4      	bne.n	8002988 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b0b0      	sub	sp, #192	; 0xc0
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029ec:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80029f6:	2300      	movs	r3, #0
 80029f8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80029fe:	2300      	movs	r3, #0
 8002a00:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002a06:	2300      	movs	r3, #0
 8002a08:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d103      	bne.n	8002a1e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a1a:	663b      	str	r3, [r7, #96]	; 0x60
 8002a1c:	e001      	b.n	8002a22 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a26:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002a3c:	2340      	movs	r3, #64	; 0x40
 8002a3e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002a52:	2300      	movs	r3, #0
 8002a54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a76:	2300      	movs	r3, #0
 8002a78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002aa4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002aa8:	4bab      	ldr	r3, [pc, #684]	; (8002d58 <ETH_MACDMAConfig+0x388>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002ab0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002ab4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002ab8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002abc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002ac2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002ac4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002ac6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002ac8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002aca:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002ad0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002ad4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002ad6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002ad8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002adc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002ae0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002ae2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002ae4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002ae6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002af8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b04:	2001      	movs	r0, #1
 8002b06:	f7ff f931 	bl	8001d6c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b12:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b14:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002b16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b18:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002b1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002b1c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002b1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002b22:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002b28:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002b2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002b2e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002b34:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002b38:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002b40:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b42:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b4e:	2001      	movs	r0, #1
 8002b50:	f7ff f90c 	bl	8001d6c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b5c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b66:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002b70:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002b7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b80:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b84:	4013      	ands	r3, r2
 8002b86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002b8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b8e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002b90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002b94:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002b96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002b9a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002b9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002ba0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002ba6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002ba8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002bac:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002bae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bc0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bcc:	2001      	movs	r0, #1
 8002bce:	f7ff f8cd 	bl	8001d6c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bda:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002bdc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002be0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	f7ff f8b8 	bl	8001d6c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c04:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002c0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c0e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002c14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c18:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c26:	2300      	movs	r3, #0
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002c2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002c34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c38:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c3e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c44:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c5a:	4413      	add	r3, r2
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002c62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c66:	4b3d      	ldr	r3, [pc, #244]	; (8002d5c <ETH_MACDMAConfig+0x38c>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002c6e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002c70:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002c72:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002c74:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002c76:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002c78:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002c7a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002c7c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002c7e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002c80:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002c82:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002c84:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002c86:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002c8a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002c8e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002c90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ca8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	f241 0318 	movw	r3, #4120	; 0x1018
 8002cb2:	4413      	add	r3, r2
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cba:	2001      	movs	r0, #1
 8002cbc:	f7ff f856 	bl	8001d6c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002cc8:	4413      	add	r3, r2
 8002cca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cce:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002cd4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002cd8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002cdc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002ce0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002ce6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002cea:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cf8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d08:	2001      	movs	r0, #1
 8002d0a:	f7ff f82f 	bl	8001d6c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d1a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d10d      	bne.n	8002d40 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	f241 031c 	movw	r3, #4124	; 0x101c
 8002d2c:	4413      	add	r3, r2
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6811      	ldr	r1, [r2, #0]
 8002d34:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <ETH_MACDMAConfig+0x390>)
 8002d36:	431a      	orrs	r2, r3
 8002d38:	f241 031c 	movw	r3, #4124	; 0x101c
 8002d3c:	440b      	add	r3, r1
 8002d3e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	461a      	mov	r2, r3
 8002d46:	2100      	movs	r1, #0
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f80b 	bl	8002d64 <ETH_MACAddressConfig>
}
 8002d4e:	bf00      	nop
 8002d50:	37c0      	adds	r7, #192	; 0xc0
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	ff20810f 	.word	0xff20810f
 8002d5c:	f8de3f23 	.word	0xf8de3f23
 8002d60:	00010040 	.word	0x00010040

08002d64 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3305      	adds	r3, #5
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	021b      	lsls	r3, r3, #8
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	3204      	adds	r2, #4
 8002d7c:	7812      	ldrb	r2, [r2, #0]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <ETH_MACAddressConfig+0x68>)
 8002d86:	4413      	add	r3, r2
 8002d88:	461a      	mov	r2, r3
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3303      	adds	r3, #3
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	061a      	lsls	r2, r3, #24
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3302      	adds	r3, #2
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	041b      	lsls	r3, r3, #16
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3301      	adds	r3, #1
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	4313      	orrs	r3, r2
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	7812      	ldrb	r2, [r2, #0]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <ETH_MACAddressConfig+0x6c>)
 8002db6:	4413      	add	r3, r2
 8002db8:	461a      	mov	r2, r3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	6013      	str	r3, [r2, #0]
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40028040 	.word	0x40028040
 8002dd0:	40028044 	.word	0x40028044

08002dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	; 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	e175      	b.n	80030e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002df4:	2201      	movs	r2, #1
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4013      	ands	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	f040 8164 	bne.w	80030da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d005      	beq.n	8002e2a <HAL_GPIO_Init+0x56>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d130      	bne.n	8002e8c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	2203      	movs	r2, #3
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e60:	2201      	movs	r2, #1
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f003 0201 	and.w	r2, r3, #1
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d017      	beq.n	8002ec8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d123      	bne.n	8002f1c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	08da      	lsrs	r2, r3, #3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3208      	adds	r2, #8
 8002edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	220f      	movs	r2, #15
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	08da      	lsrs	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3208      	adds	r2, #8
 8002f16:	69b9      	ldr	r1, [r7, #24]
 8002f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	2203      	movs	r2, #3
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 0203 	and.w	r2, r3, #3
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80be 	beq.w	80030da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5e:	4b65      	ldr	r3, [pc, #404]	; (80030f4 <HAL_GPIO_Init+0x320>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	4a64      	ldr	r2, [pc, #400]	; (80030f4 <HAL_GPIO_Init+0x320>)
 8002f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f68:	6453      	str	r3, [r2, #68]	; 0x44
 8002f6a:	4b62      	ldr	r3, [pc, #392]	; (80030f4 <HAL_GPIO_Init+0x320>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f76:	4a60      	ldr	r2, [pc, #384]	; (80030f8 <HAL_GPIO_Init+0x324>)
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	220f      	movs	r2, #15
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a57      	ldr	r2, [pc, #348]	; (80030fc <HAL_GPIO_Init+0x328>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d037      	beq.n	8003012 <HAL_GPIO_Init+0x23e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a56      	ldr	r2, [pc, #344]	; (8003100 <HAL_GPIO_Init+0x32c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d031      	beq.n	800300e <HAL_GPIO_Init+0x23a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a55      	ldr	r2, [pc, #340]	; (8003104 <HAL_GPIO_Init+0x330>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d02b      	beq.n	800300a <HAL_GPIO_Init+0x236>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a54      	ldr	r2, [pc, #336]	; (8003108 <HAL_GPIO_Init+0x334>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d025      	beq.n	8003006 <HAL_GPIO_Init+0x232>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a53      	ldr	r2, [pc, #332]	; (800310c <HAL_GPIO_Init+0x338>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d01f      	beq.n	8003002 <HAL_GPIO_Init+0x22e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a52      	ldr	r2, [pc, #328]	; (8003110 <HAL_GPIO_Init+0x33c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d019      	beq.n	8002ffe <HAL_GPIO_Init+0x22a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a51      	ldr	r2, [pc, #324]	; (8003114 <HAL_GPIO_Init+0x340>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d013      	beq.n	8002ffa <HAL_GPIO_Init+0x226>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a50      	ldr	r2, [pc, #320]	; (8003118 <HAL_GPIO_Init+0x344>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00d      	beq.n	8002ff6 <HAL_GPIO_Init+0x222>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a4f      	ldr	r2, [pc, #316]	; (800311c <HAL_GPIO_Init+0x348>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d007      	beq.n	8002ff2 <HAL_GPIO_Init+0x21e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a4e      	ldr	r2, [pc, #312]	; (8003120 <HAL_GPIO_Init+0x34c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d101      	bne.n	8002fee <HAL_GPIO_Init+0x21a>
 8002fea:	2309      	movs	r3, #9
 8002fec:	e012      	b.n	8003014 <HAL_GPIO_Init+0x240>
 8002fee:	230a      	movs	r3, #10
 8002ff0:	e010      	b.n	8003014 <HAL_GPIO_Init+0x240>
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	e00e      	b.n	8003014 <HAL_GPIO_Init+0x240>
 8002ff6:	2307      	movs	r3, #7
 8002ff8:	e00c      	b.n	8003014 <HAL_GPIO_Init+0x240>
 8002ffa:	2306      	movs	r3, #6
 8002ffc:	e00a      	b.n	8003014 <HAL_GPIO_Init+0x240>
 8002ffe:	2305      	movs	r3, #5
 8003000:	e008      	b.n	8003014 <HAL_GPIO_Init+0x240>
 8003002:	2304      	movs	r3, #4
 8003004:	e006      	b.n	8003014 <HAL_GPIO_Init+0x240>
 8003006:	2303      	movs	r3, #3
 8003008:	e004      	b.n	8003014 <HAL_GPIO_Init+0x240>
 800300a:	2302      	movs	r3, #2
 800300c:	e002      	b.n	8003014 <HAL_GPIO_Init+0x240>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_GPIO_Init+0x240>
 8003012:	2300      	movs	r3, #0
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	f002 0203 	and.w	r2, r2, #3
 800301a:	0092      	lsls	r2, r2, #2
 800301c:	4093      	lsls	r3, r2
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003024:	4934      	ldr	r1, [pc, #208]	; (80030f8 <HAL_GPIO_Init+0x324>)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	089b      	lsrs	r3, r3, #2
 800302a:	3302      	adds	r3, #2
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003032:	4b3c      	ldr	r3, [pc, #240]	; (8003124 <HAL_GPIO_Init+0x350>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	43db      	mvns	r3, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4013      	ands	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003056:	4a33      	ldr	r2, [pc, #204]	; (8003124 <HAL_GPIO_Init+0x350>)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800305c:	4b31      	ldr	r3, [pc, #196]	; (8003124 <HAL_GPIO_Init+0x350>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	43db      	mvns	r3, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4013      	ands	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003080:	4a28      	ldr	r2, [pc, #160]	; (8003124 <HAL_GPIO_Init+0x350>)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003086:	4b27      	ldr	r3, [pc, #156]	; (8003124 <HAL_GPIO_Init+0x350>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030aa:	4a1e      	ldr	r2, [pc, #120]	; (8003124 <HAL_GPIO_Init+0x350>)
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030b0:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <HAL_GPIO_Init+0x350>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030d4:	4a13      	ldr	r2, [pc, #76]	; (8003124 <HAL_GPIO_Init+0x350>)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3301      	adds	r3, #1
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	2b0f      	cmp	r3, #15
 80030e4:	f67f ae86 	bls.w	8002df4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030e8:	bf00      	nop
 80030ea:	3724      	adds	r7, #36	; 0x24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40013800 	.word	0x40013800
 80030fc:	40020000 	.word	0x40020000
 8003100:	40020400 	.word	0x40020400
 8003104:	40020800 	.word	0x40020800
 8003108:	40020c00 	.word	0x40020c00
 800310c:	40021000 	.word	0x40021000
 8003110:	40021400 	.word	0x40021400
 8003114:	40021800 	.word	0x40021800
 8003118:	40021c00 	.word	0x40021c00
 800311c:	40022000 	.word	0x40022000
 8003120:	40022400 	.word	0x40022400
 8003124:	40013c00 	.word	0x40013c00

08003128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	807b      	strh	r3, [r7, #2]
 8003134:	4613      	mov	r3, r2
 8003136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003138:	787b      	ldrb	r3, [r7, #1]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800313e:	887a      	ldrh	r2, [r7, #2]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003144:	e003      	b.n	800314e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003146:	887b      	ldrh	r3, [r7, #2]
 8003148:	041a      	lsls	r2, r3, #16
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	619a      	str	r2, [r3, #24]
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e07f      	b.n	800326e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fe fbe4 	bl	8001950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2224      	movs	r2, #36	; 0x24
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d107      	bne.n	80031d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	e006      	b.n	80031e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80031e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d104      	bne.n	80031f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <HAL_I2C_Init+0x11c>)
 8003202:	430b      	orrs	r3, r1
 8003204:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003214:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69d9      	ldr	r1, [r3, #28]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1a      	ldr	r2, [r3, #32]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	02008000 	.word	0x02008000

0800327c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af02      	add	r7, sp, #8
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	4608      	mov	r0, r1
 8003286:	4611      	mov	r1, r2
 8003288:	461a      	mov	r2, r3
 800328a:	4603      	mov	r3, r0
 800328c:	817b      	strh	r3, [r7, #10]
 800328e:	460b      	mov	r3, r1
 8003290:	813b      	strh	r3, [r7, #8]
 8003292:	4613      	mov	r3, r2
 8003294:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b20      	cmp	r3, #32
 80032a0:	f040 80f9 	bne.w	8003496 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_I2C_Mem_Write+0x34>
 80032aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d105      	bne.n	80032bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0ed      	b.n	8003498 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_I2C_Mem_Write+0x4e>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e0e6      	b.n	8003498 <HAL_I2C_Mem_Write+0x21c>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032d2:	f7fe fd3f 	bl	8001d54 <HAL_GetTick>
 80032d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	2319      	movs	r3, #25
 80032de:	2201      	movs	r2, #1
 80032e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 fac3 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e0d1      	b.n	8003498 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2221      	movs	r2, #33	; 0x21
 80032f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2240      	movs	r2, #64	; 0x40
 8003300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a3a      	ldr	r2, [r7, #32]
 800330e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003314:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800331c:	88f8      	ldrh	r0, [r7, #6]
 800331e:	893a      	ldrh	r2, [r7, #8]
 8003320:	8979      	ldrh	r1, [r7, #10]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	4603      	mov	r3, r0
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 f9d3 	bl	80036d8 <I2C_RequestMemoryWrite>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0a9      	b.n	8003498 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	2bff      	cmp	r3, #255	; 0xff
 800334c:	d90e      	bls.n	800336c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	22ff      	movs	r2, #255	; 0xff
 8003352:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003358:	b2da      	uxtb	r2, r3
 800335a:	8979      	ldrh	r1, [r7, #10]
 800335c:	2300      	movs	r3, #0
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fc2b 	bl	8003bc0 <I2C_TransferConfig>
 800336a:	e00f      	b.n	800338c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337a:	b2da      	uxtb	r2, r3
 800337c:	8979      	ldrh	r1, [r7, #10]
 800337e:	2300      	movs	r3, #0
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fc1a 	bl	8003bc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 faad 	bl	80038f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e07b      	b.n	8003498 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	781a      	ldrb	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d034      	beq.n	8003444 <HAL_I2C_Mem_Write+0x1c8>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d130      	bne.n	8003444 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e8:	2200      	movs	r2, #0
 80033ea:	2180      	movs	r1, #128	; 0x80
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fa3f 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e04d      	b.n	8003498 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003400:	b29b      	uxth	r3, r3
 8003402:	2bff      	cmp	r3, #255	; 0xff
 8003404:	d90e      	bls.n	8003424 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	22ff      	movs	r2, #255	; 0xff
 800340a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003410:	b2da      	uxtb	r2, r3
 8003412:	8979      	ldrh	r1, [r7, #10]
 8003414:	2300      	movs	r3, #0
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 fbcf 	bl	8003bc0 <I2C_TransferConfig>
 8003422:	e00f      	b.n	8003444 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003432:	b2da      	uxtb	r2, r3
 8003434:	8979      	ldrh	r1, [r7, #10]
 8003436:	2300      	movs	r3, #0
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fbbe 	bl	8003bc0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d19e      	bne.n	800338c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 fa8c 	bl	8003970 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e01a      	b.n	8003498 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2220      	movs	r2, #32
 8003468:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <HAL_I2C_Mem_Write+0x224>)
 8003476:	400b      	ands	r3, r1
 8003478:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e000      	b.n	8003498 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003496:	2302      	movs	r3, #2
  }
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	fe00e800 	.word	0xfe00e800

080034a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	4608      	mov	r0, r1
 80034ae:	4611      	mov	r1, r2
 80034b0:	461a      	mov	r2, r3
 80034b2:	4603      	mov	r3, r0
 80034b4:	817b      	strh	r3, [r7, #10]
 80034b6:	460b      	mov	r3, r1
 80034b8:	813b      	strh	r3, [r7, #8]
 80034ba:	4613      	mov	r3, r2
 80034bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	f040 80fd 	bne.w	80036c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_I2C_Mem_Read+0x34>
 80034d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d105      	bne.n	80034e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0f1      	b.n	80036c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_I2C_Mem_Read+0x4e>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e0ea      	b.n	80036c8 <HAL_I2C_Mem_Read+0x224>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034fa:	f7fe fc2b 	bl	8001d54 <HAL_GetTick>
 80034fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	2319      	movs	r3, #25
 8003506:	2201      	movs	r2, #1
 8003508:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f9af 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0d5      	b.n	80036c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2222      	movs	r2, #34	; 0x22
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2240      	movs	r2, #64	; 0x40
 8003528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a3a      	ldr	r2, [r7, #32]
 8003536:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800353c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003544:	88f8      	ldrh	r0, [r7, #6]
 8003546:	893a      	ldrh	r2, [r7, #8]
 8003548:	8979      	ldrh	r1, [r7, #10]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	9301      	str	r3, [sp, #4]
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	4603      	mov	r3, r0
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 f913 	bl	8003780 <I2C_RequestMemoryRead>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0ad      	b.n	80036c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	2bff      	cmp	r3, #255	; 0xff
 8003574:	d90e      	bls.n	8003594 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	22ff      	movs	r2, #255	; 0xff
 800357a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003580:	b2da      	uxtb	r2, r3
 8003582:	8979      	ldrh	r1, [r7, #10]
 8003584:	4b52      	ldr	r3, [pc, #328]	; (80036d0 <HAL_I2C_Mem_Read+0x22c>)
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 fb17 	bl	8003bc0 <I2C_TransferConfig>
 8003592:	e00f      	b.n	80035b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	8979      	ldrh	r1, [r7, #10]
 80035a6:	4b4a      	ldr	r3, [pc, #296]	; (80036d0 <HAL_I2C_Mem_Read+0x22c>)
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 fb06 	bl	8003bc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ba:	2200      	movs	r2, #0
 80035bc:	2104      	movs	r1, #4
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f956 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e07c      	b.n	80036c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d034      	beq.n	8003674 <HAL_I2C_Mem_Read+0x1d0>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	2b00      	cmp	r3, #0
 8003610:	d130      	bne.n	8003674 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003618:	2200      	movs	r2, #0
 800361a:	2180      	movs	r1, #128	; 0x80
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f927 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e04d      	b.n	80036c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	2bff      	cmp	r3, #255	; 0xff
 8003634:	d90e      	bls.n	8003654 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	22ff      	movs	r2, #255	; 0xff
 800363a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003640:	b2da      	uxtb	r2, r3
 8003642:	8979      	ldrh	r1, [r7, #10]
 8003644:	2300      	movs	r3, #0
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 fab7 	bl	8003bc0 <I2C_TransferConfig>
 8003652:	e00f      	b.n	8003674 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003662:	b2da      	uxtb	r2, r3
 8003664:	8979      	ldrh	r1, [r7, #10]
 8003666:	2300      	movs	r3, #0
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 faa6 	bl	8003bc0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d19a      	bne.n	80035b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f974 	bl	8003970 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e01a      	b.n	80036c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2220      	movs	r2, #32
 8003698:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6859      	ldr	r1, [r3, #4]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_I2C_Mem_Read+0x230>)
 80036a6:	400b      	ands	r3, r1
 80036a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e000      	b.n	80036c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
  }
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	80002400 	.word	0x80002400
 80036d4:	fe00e800 	.word	0xfe00e800

080036d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	4608      	mov	r0, r1
 80036e2:	4611      	mov	r1, r2
 80036e4:	461a      	mov	r2, r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	817b      	strh	r3, [r7, #10]
 80036ea:	460b      	mov	r3, r1
 80036ec:	813b      	strh	r3, [r7, #8]
 80036ee:	4613      	mov	r3, r2
 80036f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	8979      	ldrh	r1, [r7, #10]
 80036f8:	4b20      	ldr	r3, [pc, #128]	; (800377c <I2C_RequestMemoryWrite+0xa4>)
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 fa5d 	bl	8003bc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	69b9      	ldr	r1, [r7, #24]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f8f0 	bl	80038f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e02c      	b.n	8003774 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800371a:	88fb      	ldrh	r3, [r7, #6]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d105      	bne.n	800372c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003720:	893b      	ldrh	r3, [r7, #8]
 8003722:	b2da      	uxtb	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	629a      	str	r2, [r3, #40]	; 0x28
 800372a:	e015      	b.n	8003758 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800372c:	893b      	ldrh	r3, [r7, #8]
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	b29b      	uxth	r3, r3
 8003732:	b2da      	uxtb	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800373a:	69fa      	ldr	r2, [r7, #28]
 800373c:	69b9      	ldr	r1, [r7, #24]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f8d6 	bl	80038f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e012      	b.n	8003774 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800374e:	893b      	ldrh	r3, [r7, #8]
 8003750:	b2da      	uxtb	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	2200      	movs	r2, #0
 8003760:	2180      	movs	r1, #128	; 0x80
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f884 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	80002000 	.word	0x80002000

08003780 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af02      	add	r7, sp, #8
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	4608      	mov	r0, r1
 800378a:	4611      	mov	r1, r2
 800378c:	461a      	mov	r2, r3
 800378e:	4603      	mov	r3, r0
 8003790:	817b      	strh	r3, [r7, #10]
 8003792:	460b      	mov	r3, r1
 8003794:	813b      	strh	r3, [r7, #8]
 8003796:	4613      	mov	r3, r2
 8003798:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800379a:	88fb      	ldrh	r3, [r7, #6]
 800379c:	b2da      	uxtb	r2, r3
 800379e:	8979      	ldrh	r1, [r7, #10]
 80037a0:	4b20      	ldr	r3, [pc, #128]	; (8003824 <I2C_RequestMemoryRead+0xa4>)
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	2300      	movs	r3, #0
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 fa0a 	bl	8003bc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	69b9      	ldr	r1, [r7, #24]
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 f89d 	bl	80038f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e02c      	b.n	800381a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037c0:	88fb      	ldrh	r3, [r7, #6]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d105      	bne.n	80037d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037c6:	893b      	ldrh	r3, [r7, #8]
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	629a      	str	r2, [r3, #40]	; 0x28
 80037d0:	e015      	b.n	80037fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80037d2:	893b      	ldrh	r3, [r7, #8]
 80037d4:	0a1b      	lsrs	r3, r3, #8
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e0:	69fa      	ldr	r2, [r7, #28]
 80037e2:	69b9      	ldr	r1, [r7, #24]
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f883 	bl	80038f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e012      	b.n	800381a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037f4:	893b      	ldrh	r3, [r7, #8]
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	2200      	movs	r2, #0
 8003806:	2140      	movs	r1, #64	; 0x40
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 f831 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e000      	b.n	800381a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	80002000 	.word	0x80002000

08003828 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b02      	cmp	r3, #2
 800383c:	d103      	bne.n	8003846 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2200      	movs	r2, #0
 8003844:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b01      	cmp	r3, #1
 8003852:	d007      	beq.n	8003864 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699a      	ldr	r2, [r3, #24]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	619a      	str	r2, [r3, #24]
  }
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003880:	e022      	b.n	80038c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d01e      	beq.n	80038c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388a:	f7fe fa63 	bl	8001d54 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d113      	bne.n	80038c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a4:	f043 0220 	orr.w	r2, r3, #32
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e00f      	b.n	80038e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4013      	ands	r3, r2
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d0cd      	beq.n	8003882 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038fc:	e02c      	b.n	8003958 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f870 	bl	80039e8 <I2C_IsErrorOccurred>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e02a      	b.n	8003968 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003918:	d01e      	beq.n	8003958 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391a:	f7fe fa1b 	bl	8001d54 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	429a      	cmp	r2, r3
 8003928:	d302      	bcc.n	8003930 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d113      	bne.n	8003958 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003934:	f043 0220 	orr.w	r2, r3, #32
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e007      	b.n	8003968 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b02      	cmp	r3, #2
 8003964:	d1cb      	bne.n	80038fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800397c:	e028      	b.n	80039d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f830 	bl	80039e8 <I2C_IsErrorOccurred>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e026      	b.n	80039e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003992:	f7fe f9df 	bl	8001d54 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d302      	bcc.n	80039a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d113      	bne.n	80039d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ac:	f043 0220 	orr.w	r2, r3, #32
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e007      	b.n	80039e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b20      	cmp	r3, #32
 80039dc:	d1cf      	bne.n	800397e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	; 0x28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d075      	beq.n	8003b00 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2210      	movs	r2, #16
 8003a1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a1c:	e056      	b.n	8003acc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a24:	d052      	beq.n	8003acc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a26:	f7fe f995 	bl	8001d54 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d302      	bcc.n	8003a3c <I2C_IsErrorOccurred+0x54>
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d147      	bne.n	8003acc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a5e:	d12e      	bne.n	8003abe <I2C_IsErrorOccurred+0xd6>
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a66:	d02a      	beq.n	8003abe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003a68:	7cfb      	ldrb	r3, [r7, #19]
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	d027      	beq.n	8003abe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a7c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a7e:	f7fe f969 	bl	8001d54 <HAL_GetTick>
 8003a82:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a84:	e01b      	b.n	8003abe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a86:	f7fe f965 	bl	8001d54 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b19      	cmp	r3, #25
 8003a92:	d914      	bls.n	8003abe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a98:	f043 0220 	orr.w	r2, r3, #32
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d1dc      	bne.n	8003a86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d003      	beq.n	8003ae2 <I2C_IsErrorOccurred+0xfa>
 8003ada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d09d      	beq.n	8003a1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d103      	bne.n	8003af2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2220      	movs	r2, #32
 8003af0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	f043 0304 	orr.w	r3, r3, #4
 8003af8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00b      	beq.n	8003b2a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00b      	beq.n	8003b4c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	f043 0308 	orr.w	r3, r3, #8
 8003b3a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00b      	beq.n	8003b6e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	f043 0302 	orr.w	r3, r3, #2
 8003b5c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d01c      	beq.n	8003bb0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f7ff fe56 	bl	8003828 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6859      	ldr	r1, [r3, #4]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <I2C_IsErrorOccurred+0x1d4>)
 8003b88:	400b      	ands	r3, r1
 8003b8a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3728      	adds	r7, #40	; 0x28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	fe00e800 	.word	0xfe00e800

08003bc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	607b      	str	r3, [r7, #4]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	817b      	strh	r3, [r7, #10]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bd2:	897b      	ldrh	r3, [r7, #10]
 8003bd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bd8:	7a7b      	ldrb	r3, [r7, #9]
 8003bda:	041b      	lsls	r3, r3, #16
 8003bdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003be0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bee:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	0d5b      	lsrs	r3, r3, #21
 8003bfa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003bfe:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <I2C_TransferConfig+0x60>)
 8003c00:	430b      	orrs	r3, r1
 8003c02:	43db      	mvns	r3, r3
 8003c04:	ea02 0103 	and.w	r1, r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c12:	bf00      	nop
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	03ff63ff 	.word	0x03ff63ff

08003c24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	d138      	bne.n	8003cac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e032      	b.n	8003cae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2224      	movs	r2, #36	; 0x24
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0201 	bic.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6819      	ldr	r1, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e000      	b.n	8003cae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cac:	2302      	movs	r3, #2
  }
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d139      	bne.n	8003d44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e033      	b.n	8003d46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2224      	movs	r2, #36	; 0x24
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	e000      	b.n	8003d46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d44:	2302      	movs	r3, #2
  }
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d54:	b08f      	sub	sp, #60	; 0x3c
 8003d56:	af0a      	add	r7, sp, #40	; 0x28
 8003d58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e116      	b.n	8003f92 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d106      	bne.n	8003d84 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7fd fe92 	bl	8001aa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2203      	movs	r2, #3
 8003d88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d102      	bne.n	8003d9e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f002 fbaa 	bl	80064fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	603b      	str	r3, [r7, #0]
 8003dae:	687e      	ldr	r6, [r7, #4]
 8003db0:	466d      	mov	r5, sp
 8003db2:	f106 0410 	add.w	r4, r6, #16
 8003db6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dc2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dc6:	1d33      	adds	r3, r6, #4
 8003dc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dca:	6838      	ldr	r0, [r7, #0]
 8003dcc:	f002 fb3e 	bl	800644c <USB_CoreInit>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2202      	movs	r2, #2
 8003dda:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e0d7      	b.n	8003f92 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2100      	movs	r1, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	f002 fb98 	bl	800651e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	73fb      	strb	r3, [r7, #15]
 8003df2:	e04a      	b.n	8003e8a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003df4:	7bfa      	ldrb	r2, [r7, #15]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	333d      	adds	r3, #61	; 0x3d
 8003e04:	2201      	movs	r2, #1
 8003e06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e08:	7bfa      	ldrb	r2, [r7, #15]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	333c      	adds	r3, #60	; 0x3c
 8003e18:	7bfa      	ldrb	r2, [r7, #15]
 8003e1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e1c:	7bfa      	ldrb	r2, [r7, #15]
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	b298      	uxth	r0, r3
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	3342      	adds	r3, #66	; 0x42
 8003e30:	4602      	mov	r2, r0
 8003e32:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e34:	7bfa      	ldrb	r2, [r7, #15]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	333f      	adds	r3, #63	; 0x3f
 8003e44:	2200      	movs	r2, #0
 8003e46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e48:	7bfa      	ldrb	r2, [r7, #15]
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	3344      	adds	r3, #68	; 0x44
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e5c:	7bfa      	ldrb	r2, [r7, #15]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	3348      	adds	r3, #72	; 0x48
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e70:	7bfa      	ldrb	r2, [r7, #15]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	3350      	adds	r3, #80	; 0x50
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	3301      	adds	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
 8003e8a:	7bfa      	ldrb	r2, [r7, #15]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d3af      	bcc.n	8003df4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e94:	2300      	movs	r3, #0
 8003e96:	73fb      	strb	r3, [r7, #15]
 8003e98:	e044      	b.n	8003f24 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e9a:	7bfa      	ldrb	r2, [r7, #15]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003eac:	2200      	movs	r2, #0
 8003eae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003eb0:	7bfa      	ldrb	r2, [r7, #15]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003ec2:	7bfa      	ldrb	r2, [r7, #15]
 8003ec4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ec6:	7bfa      	ldrb	r2, [r7, #15]
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003ed8:	2200      	movs	r2, #0
 8003eda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003edc:	7bfa      	ldrb	r2, [r7, #15]
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ef2:	7bfa      	ldrb	r2, [r7, #15]
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	1a9b      	subs	r3, r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f08:	7bfa      	ldrb	r2, [r7, #15]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	3301      	adds	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
 8003f24:	7bfa      	ldrb	r2, [r7, #15]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d3b5      	bcc.n	8003e9a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	687e      	ldr	r6, [r7, #4]
 8003f36:	466d      	mov	r5, sp
 8003f38:	f106 0410 	add.w	r4, r6, #16
 8003f3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f48:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f4c:	1d33      	adds	r3, r6, #4
 8003f4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f50:	6838      	ldr	r0, [r7, #0]
 8003f52:	f002 fb31 	bl	80065b8 <USB_DevInit>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e014      	b.n	8003f92 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d102      	bne.n	8003f86 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f80b 	bl	8003f9c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f002 fceb 	bl	8006966 <USB_DevDisconnect>

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003f9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fca:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <HAL_PCDEx_ActivateLPM+0x44>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	10000003 	.word	0x10000003

08003fe4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fe8:	4b05      	ldr	r3, [pc, #20]	; (8004000 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a04      	ldr	r2, [pc, #16]	; (8004000 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff2:	6013      	str	r3, [r2, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40007000 	.word	0x40007000

08004004 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800400c:	2300      	movs	r3, #0
 800400e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e291      	b.n	800453e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 8087 	beq.w	8004136 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004028:	4b96      	ldr	r3, [pc, #600]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 030c 	and.w	r3, r3, #12
 8004030:	2b04      	cmp	r3, #4
 8004032:	d00c      	beq.n	800404e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004034:	4b93      	ldr	r3, [pc, #588]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 030c 	and.w	r3, r3, #12
 800403c:	2b08      	cmp	r3, #8
 800403e:	d112      	bne.n	8004066 <HAL_RCC_OscConfig+0x62>
 8004040:	4b90      	ldr	r3, [pc, #576]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004048:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800404c:	d10b      	bne.n	8004066 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800404e:	4b8d      	ldr	r3, [pc, #564]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d06c      	beq.n	8004134 <HAL_RCC_OscConfig+0x130>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d168      	bne.n	8004134 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e26b      	b.n	800453e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406e:	d106      	bne.n	800407e <HAL_RCC_OscConfig+0x7a>
 8004070:	4b84      	ldr	r3, [pc, #528]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a83      	ldr	r2, [pc, #524]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	e02e      	b.n	80040dc <HAL_RCC_OscConfig+0xd8>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10c      	bne.n	80040a0 <HAL_RCC_OscConfig+0x9c>
 8004086:	4b7f      	ldr	r3, [pc, #508]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a7e      	ldr	r2, [pc, #504]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 800408c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	4b7c      	ldr	r3, [pc, #496]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a7b      	ldr	r2, [pc, #492]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	e01d      	b.n	80040dc <HAL_RCC_OscConfig+0xd8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCC_OscConfig+0xc0>
 80040aa:	4b76      	ldr	r3, [pc, #472]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a75      	ldr	r2, [pc, #468]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80040b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	4b73      	ldr	r3, [pc, #460]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a72      	ldr	r2, [pc, #456]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80040bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e00b      	b.n	80040dc <HAL_RCC_OscConfig+0xd8>
 80040c4:	4b6f      	ldr	r3, [pc, #444]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a6e      	ldr	r2, [pc, #440]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80040ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	4b6c      	ldr	r3, [pc, #432]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a6b      	ldr	r2, [pc, #428]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80040d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d013      	beq.n	800410c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fd fe36 	bl	8001d54 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040ec:	f7fd fe32 	bl	8001d54 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b64      	cmp	r3, #100	; 0x64
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e21f      	b.n	800453e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fe:	4b61      	ldr	r3, [pc, #388]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0xe8>
 800410a:	e014      	b.n	8004136 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7fd fe22 	bl	8001d54 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004114:	f7fd fe1e 	bl	8001d54 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b64      	cmp	r3, #100	; 0x64
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e20b      	b.n	800453e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004126:	4b57      	ldr	r3, [pc, #348]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0x110>
 8004132:	e000      	b.n	8004136 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d069      	beq.n	8004216 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004142:	4b50      	ldr	r3, [pc, #320]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800414e:	4b4d      	ldr	r3, [pc, #308]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	2b08      	cmp	r3, #8
 8004158:	d11c      	bne.n	8004194 <HAL_RCC_OscConfig+0x190>
 800415a:	4b4a      	ldr	r3, [pc, #296]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d116      	bne.n	8004194 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004166:	4b47      	ldr	r3, [pc, #284]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_RCC_OscConfig+0x17a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d001      	beq.n	800417e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e1df      	b.n	800453e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800417e:	4b41      	ldr	r3, [pc, #260]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	493d      	ldr	r1, [pc, #244]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 800418e:	4313      	orrs	r3, r2
 8004190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004192:	e040      	b.n	8004216 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d023      	beq.n	80041e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800419c:	4b39      	ldr	r3, [pc, #228]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a38      	ldr	r2, [pc, #224]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80041a2:	f043 0301 	orr.w	r3, r3, #1
 80041a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fd fdd4 	bl	8001d54 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b0:	f7fd fdd0 	bl	8001d54 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e1bd      	b.n	800453e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c2:	4b30      	ldr	r3, [pc, #192]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0f0      	beq.n	80041b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ce:	4b2d      	ldr	r3, [pc, #180]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4929      	ldr	r1, [pc, #164]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]
 80041e2:	e018      	b.n	8004216 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041e4:	4b27      	ldr	r3, [pc, #156]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a26      	ldr	r2, [pc, #152]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f0:	f7fd fdb0 	bl	8001d54 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f8:	f7fd fdac 	bl	8001d54 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e199      	b.n	800453e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420a:	4b1e      	ldr	r3, [pc, #120]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d038      	beq.n	8004294 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d019      	beq.n	800425e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800422a:	4b16      	ldr	r3, [pc, #88]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 800422c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422e:	4a15      	ldr	r2, [pc, #84]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004236:	f7fd fd8d 	bl	8001d54 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800423e:	f7fd fd89 	bl	8001d54 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e176      	b.n	800453e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004250:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x23a>
 800425c:	e01a      	b.n	8004294 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800425e:	4b09      	ldr	r3, [pc, #36]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004262:	4a08      	ldr	r2, [pc, #32]	; (8004284 <HAL_RCC_OscConfig+0x280>)
 8004264:	f023 0301 	bic.w	r3, r3, #1
 8004268:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426a:	f7fd fd73 	bl	8001d54 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004270:	e00a      	b.n	8004288 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004272:	f7fd fd6f 	bl	8001d54 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d903      	bls.n	8004288 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e15c      	b.n	800453e <HAL_RCC_OscConfig+0x53a>
 8004284:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004288:	4b91      	ldr	r3, [pc, #580]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 800428a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1ee      	bne.n	8004272 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 80a4 	beq.w	80043ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a2:	4b8b      	ldr	r3, [pc, #556]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10d      	bne.n	80042ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ae:	4b88      	ldr	r3, [pc, #544]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	4a87      	ldr	r2, [pc, #540]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 80042b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ba:	4b85      	ldr	r3, [pc, #532]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c2:	60bb      	str	r3, [r7, #8]
 80042c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042c6:	2301      	movs	r3, #1
 80042c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ca:	4b82      	ldr	r3, [pc, #520]	; (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d118      	bne.n	8004308 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80042d6:	4b7f      	ldr	r3, [pc, #508]	; (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a7e      	ldr	r2, [pc, #504]	; (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 80042dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e2:	f7fd fd37 	bl	8001d54 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ea:	f7fd fd33 	bl	8001d54 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b64      	cmp	r3, #100	; 0x64
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e120      	b.n	800453e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042fc:	4b75      	ldr	r3, [pc, #468]	; (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d106      	bne.n	800431e <HAL_RCC_OscConfig+0x31a>
 8004310:	4b6f      	ldr	r3, [pc, #444]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	4a6e      	ldr	r2, [pc, #440]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	6713      	str	r3, [r2, #112]	; 0x70
 800431c:	e02d      	b.n	800437a <HAL_RCC_OscConfig+0x376>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10c      	bne.n	8004340 <HAL_RCC_OscConfig+0x33c>
 8004326:	4b6a      	ldr	r3, [pc, #424]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432a:	4a69      	ldr	r2, [pc, #420]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 800432c:	f023 0301 	bic.w	r3, r3, #1
 8004330:	6713      	str	r3, [r2, #112]	; 0x70
 8004332:	4b67      	ldr	r3, [pc, #412]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	4a66      	ldr	r2, [pc, #408]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 8004338:	f023 0304 	bic.w	r3, r3, #4
 800433c:	6713      	str	r3, [r2, #112]	; 0x70
 800433e:	e01c      	b.n	800437a <HAL_RCC_OscConfig+0x376>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b05      	cmp	r3, #5
 8004346:	d10c      	bne.n	8004362 <HAL_RCC_OscConfig+0x35e>
 8004348:	4b61      	ldr	r3, [pc, #388]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	4a60      	ldr	r2, [pc, #384]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 800434e:	f043 0304 	orr.w	r3, r3, #4
 8004352:	6713      	str	r3, [r2, #112]	; 0x70
 8004354:	4b5e      	ldr	r3, [pc, #376]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 8004356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004358:	4a5d      	ldr	r2, [pc, #372]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	6713      	str	r3, [r2, #112]	; 0x70
 8004360:	e00b      	b.n	800437a <HAL_RCC_OscConfig+0x376>
 8004362:	4b5b      	ldr	r3, [pc, #364]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004366:	4a5a      	ldr	r2, [pc, #360]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 8004368:	f023 0301 	bic.w	r3, r3, #1
 800436c:	6713      	str	r3, [r2, #112]	; 0x70
 800436e:	4b58      	ldr	r3, [pc, #352]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	4a57      	ldr	r2, [pc, #348]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 8004374:	f023 0304 	bic.w	r3, r3, #4
 8004378:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d015      	beq.n	80043ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004382:	f7fd fce7 	bl	8001d54 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004388:	e00a      	b.n	80043a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438a:	f7fd fce3 	bl	8001d54 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	f241 3288 	movw	r2, #5000	; 0x1388
 8004398:	4293      	cmp	r3, r2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e0ce      	b.n	800453e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a0:	4b4b      	ldr	r3, [pc, #300]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0ee      	beq.n	800438a <HAL_RCC_OscConfig+0x386>
 80043ac:	e014      	b.n	80043d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ae:	f7fd fcd1 	bl	8001d54 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b4:	e00a      	b.n	80043cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7fd fccd 	bl	8001d54 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e0b8      	b.n	800453e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043cc:	4b40      	ldr	r3, [pc, #256]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1ee      	bne.n	80043b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d105      	bne.n	80043ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043de:	4b3c      	ldr	r3, [pc, #240]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	4a3b      	ldr	r2, [pc, #236]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 80043e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 80a4 	beq.w	800453c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043f4:	4b36      	ldr	r3, [pc, #216]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 030c 	and.w	r3, r3, #12
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d06b      	beq.n	80044d8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	2b02      	cmp	r3, #2
 8004406:	d149      	bne.n	800449c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004408:	4b31      	ldr	r3, [pc, #196]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a30      	ldr	r2, [pc, #192]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 800440e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004414:	f7fd fc9e 	bl	8001d54 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441c:	f7fd fc9a 	bl	8001d54 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e087      	b.n	800453e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442e:	4b28      	ldr	r3, [pc, #160]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69da      	ldr	r2, [r3, #28]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	019b      	lsls	r3, r3, #6
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	085b      	lsrs	r3, r3, #1
 8004452:	3b01      	subs	r3, #1
 8004454:	041b      	lsls	r3, r3, #16
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	061b      	lsls	r3, r3, #24
 800445e:	4313      	orrs	r3, r2
 8004460:	4a1b      	ldr	r2, [pc, #108]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 8004462:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004466:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004468:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a18      	ldr	r2, [pc, #96]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 800446e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fd fc6e 	bl	8001d54 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800447c:	f7fd fc6a 	bl	8001d54 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e057      	b.n	800453e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448e:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0f0      	beq.n	800447c <HAL_RCC_OscConfig+0x478>
 800449a:	e04f      	b.n	800453c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449c:	4b0c      	ldr	r3, [pc, #48]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a0b      	ldr	r2, [pc, #44]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 80044a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fd fc54 	bl	8001d54 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b0:	f7fd fc50 	bl	8001d54 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e03d      	b.n	800453e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c2:	4b03      	ldr	r3, [pc, #12]	; (80044d0 <HAL_RCC_OscConfig+0x4cc>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x4ac>
 80044ce:	e035      	b.n	800453c <HAL_RCC_OscConfig+0x538>
 80044d0:	40023800 	.word	0x40023800
 80044d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80044d8:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <HAL_RCC_OscConfig+0x544>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d028      	beq.n	8004538 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d121      	bne.n	8004538 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fe:	429a      	cmp	r2, r3
 8004500:	d11a      	bne.n	8004538 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004508:	4013      	ands	r3, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800450e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004510:	4293      	cmp	r3, r2
 8004512:	d111      	bne.n	8004538 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451e:	085b      	lsrs	r3, r3, #1
 8004520:	3b01      	subs	r3, #1
 8004522:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004524:	429a      	cmp	r2, r3
 8004526:	d107      	bne.n	8004538 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004534:	429a      	cmp	r2, r3
 8004536:	d001      	beq.n	800453c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40023800 	.word	0x40023800

0800454c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0d0      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004564:	4b6a      	ldr	r3, [pc, #424]	; (8004710 <HAL_RCC_ClockConfig+0x1c4>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d910      	bls.n	8004594 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004572:	4b67      	ldr	r3, [pc, #412]	; (8004710 <HAL_RCC_ClockConfig+0x1c4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f023 020f 	bic.w	r2, r3, #15
 800457a:	4965      	ldr	r1, [pc, #404]	; (8004710 <HAL_RCC_ClockConfig+0x1c4>)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004582:	4b63      	ldr	r3, [pc, #396]	; (8004710 <HAL_RCC_ClockConfig+0x1c4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d001      	beq.n	8004594 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0b8      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d020      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045ac:	4b59      	ldr	r3, [pc, #356]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	4a58      	ldr	r2, [pc, #352]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 80045b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045c4:	4b53      	ldr	r3, [pc, #332]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4a52      	ldr	r2, [pc, #328]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 80045ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d0:	4b50      	ldr	r3, [pc, #320]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	494d      	ldr	r1, [pc, #308]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d040      	beq.n	8004670 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d107      	bne.n	8004606 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f6:	4b47      	ldr	r3, [pc, #284]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d115      	bne.n	800462e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e07f      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d107      	bne.n	800461e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800460e:	4b41      	ldr	r3, [pc, #260]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d109      	bne.n	800462e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e073      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461e:	4b3d      	ldr	r3, [pc, #244]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e06b      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800462e:	4b39      	ldr	r3, [pc, #228]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f023 0203 	bic.w	r2, r3, #3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	4936      	ldr	r1, [pc, #216]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 800463c:	4313      	orrs	r3, r2
 800463e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004640:	f7fd fb88 	bl	8001d54 <HAL_GetTick>
 8004644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004646:	e00a      	b.n	800465e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004648:	f7fd fb84 	bl	8001d54 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f241 3288 	movw	r2, #5000	; 0x1388
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e053      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465e:	4b2d      	ldr	r3, [pc, #180]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 020c 	and.w	r2, r3, #12
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	429a      	cmp	r2, r3
 800466e:	d1eb      	bne.n	8004648 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004670:	4b27      	ldr	r3, [pc, #156]	; (8004710 <HAL_RCC_ClockConfig+0x1c4>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d210      	bcs.n	80046a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467e:	4b24      	ldr	r3, [pc, #144]	; (8004710 <HAL_RCC_ClockConfig+0x1c4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 020f 	bic.w	r2, r3, #15
 8004686:	4922      	ldr	r1, [pc, #136]	; (8004710 <HAL_RCC_ClockConfig+0x1c4>)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800468e:	4b20      	ldr	r3, [pc, #128]	; (8004710 <HAL_RCC_ClockConfig+0x1c4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e032      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046ac:	4b19      	ldr	r3, [pc, #100]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	4916      	ldr	r1, [pc, #88]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d009      	beq.n	80046de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046ca:	4b12      	ldr	r3, [pc, #72]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	490e      	ldr	r1, [pc, #56]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046de:	f000 f821 	bl	8004724 <HAL_RCC_GetSysClockFreq>
 80046e2:	4601      	mov	r1, r0
 80046e4:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	091b      	lsrs	r3, r3, #4
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	4a0a      	ldr	r2, [pc, #40]	; (8004718 <HAL_RCC_ClockConfig+0x1cc>)
 80046f0:	5cd3      	ldrb	r3, [r2, r3]
 80046f2:	fa21 f303 	lsr.w	r3, r1, r3
 80046f6:	4a09      	ldr	r2, [pc, #36]	; (800471c <HAL_RCC_ClockConfig+0x1d0>)
 80046f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046fa:	4b09      	ldr	r3, [pc, #36]	; (8004720 <HAL_RCC_ClockConfig+0x1d4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fd fae4 	bl	8001ccc <HAL_InitTick>

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40023c00 	.word	0x40023c00
 8004714:	40023800 	.word	0x40023800
 8004718:	08008814 	.word	0x08008814
 800471c:	20000000 	.word	0x20000000
 8004720:	20000004 	.word	0x20000004

08004724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800472a:	2300      	movs	r3, #0
 800472c:	607b      	str	r3, [r7, #4]
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	2300      	movs	r3, #0
 8004734:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004736:	2300      	movs	r3, #0
 8004738:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800473a:	4b63      	ldr	r3, [pc, #396]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b04      	cmp	r3, #4
 8004744:	d007      	beq.n	8004756 <HAL_RCC_GetSysClockFreq+0x32>
 8004746:	2b08      	cmp	r3, #8
 8004748:	d008      	beq.n	800475c <HAL_RCC_GetSysClockFreq+0x38>
 800474a:	2b00      	cmp	r3, #0
 800474c:	f040 80b4 	bne.w	80048b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004750:	4b5e      	ldr	r3, [pc, #376]	; (80048cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004752:	60bb      	str	r3, [r7, #8]
      break;
 8004754:	e0b3      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004756:	4b5e      	ldr	r3, [pc, #376]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004758:	60bb      	str	r3, [r7, #8]
      break;
 800475a:	e0b0      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800475c:	4b5a      	ldr	r3, [pc, #360]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004764:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004766:	4b58      	ldr	r3, [pc, #352]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d04a      	beq.n	8004808 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004772:	4b55      	ldr	r3, [pc, #340]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	099b      	lsrs	r3, r3, #6
 8004778:	f04f 0400 	mov.w	r4, #0
 800477c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	ea03 0501 	and.w	r5, r3, r1
 8004788:	ea04 0602 	and.w	r6, r4, r2
 800478c:	4629      	mov	r1, r5
 800478e:	4632      	mov	r2, r6
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	f04f 0400 	mov.w	r4, #0
 8004798:	0154      	lsls	r4, r2, #5
 800479a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800479e:	014b      	lsls	r3, r1, #5
 80047a0:	4619      	mov	r1, r3
 80047a2:	4622      	mov	r2, r4
 80047a4:	1b49      	subs	r1, r1, r5
 80047a6:	eb62 0206 	sbc.w	r2, r2, r6
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	f04f 0400 	mov.w	r4, #0
 80047b2:	0194      	lsls	r4, r2, #6
 80047b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047b8:	018b      	lsls	r3, r1, #6
 80047ba:	1a5b      	subs	r3, r3, r1
 80047bc:	eb64 0402 	sbc.w	r4, r4, r2
 80047c0:	f04f 0100 	mov.w	r1, #0
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	00e2      	lsls	r2, r4, #3
 80047ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047ce:	00d9      	lsls	r1, r3, #3
 80047d0:	460b      	mov	r3, r1
 80047d2:	4614      	mov	r4, r2
 80047d4:	195b      	adds	r3, r3, r5
 80047d6:	eb44 0406 	adc.w	r4, r4, r6
 80047da:	f04f 0100 	mov.w	r1, #0
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	0262      	lsls	r2, r4, #9
 80047e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80047e8:	0259      	lsls	r1, r3, #9
 80047ea:	460b      	mov	r3, r1
 80047ec:	4614      	mov	r4, r2
 80047ee:	4618      	mov	r0, r3
 80047f0:	4621      	mov	r1, r4
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f04f 0400 	mov.w	r4, #0
 80047f8:	461a      	mov	r2, r3
 80047fa:	4623      	mov	r3, r4
 80047fc:	f7fc f9f0 	bl	8000be0 <__aeabi_uldivmod>
 8004800:	4603      	mov	r3, r0
 8004802:	460c      	mov	r4, r1
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	e049      	b.n	800489c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004808:	4b2f      	ldr	r3, [pc, #188]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	099b      	lsrs	r3, r3, #6
 800480e:	f04f 0400 	mov.w	r4, #0
 8004812:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	ea03 0501 	and.w	r5, r3, r1
 800481e:	ea04 0602 	and.w	r6, r4, r2
 8004822:	4629      	mov	r1, r5
 8004824:	4632      	mov	r2, r6
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	f04f 0400 	mov.w	r4, #0
 800482e:	0154      	lsls	r4, r2, #5
 8004830:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004834:	014b      	lsls	r3, r1, #5
 8004836:	4619      	mov	r1, r3
 8004838:	4622      	mov	r2, r4
 800483a:	1b49      	subs	r1, r1, r5
 800483c:	eb62 0206 	sbc.w	r2, r2, r6
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	f04f 0400 	mov.w	r4, #0
 8004848:	0194      	lsls	r4, r2, #6
 800484a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800484e:	018b      	lsls	r3, r1, #6
 8004850:	1a5b      	subs	r3, r3, r1
 8004852:	eb64 0402 	sbc.w	r4, r4, r2
 8004856:	f04f 0100 	mov.w	r1, #0
 800485a:	f04f 0200 	mov.w	r2, #0
 800485e:	00e2      	lsls	r2, r4, #3
 8004860:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004864:	00d9      	lsls	r1, r3, #3
 8004866:	460b      	mov	r3, r1
 8004868:	4614      	mov	r4, r2
 800486a:	195b      	adds	r3, r3, r5
 800486c:	eb44 0406 	adc.w	r4, r4, r6
 8004870:	f04f 0100 	mov.w	r1, #0
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	02a2      	lsls	r2, r4, #10
 800487a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800487e:	0299      	lsls	r1, r3, #10
 8004880:	460b      	mov	r3, r1
 8004882:	4614      	mov	r4, r2
 8004884:	4618      	mov	r0, r3
 8004886:	4621      	mov	r1, r4
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f04f 0400 	mov.w	r4, #0
 800488e:	461a      	mov	r2, r3
 8004890:	4623      	mov	r3, r4
 8004892:	f7fc f9a5 	bl	8000be0 <__aeabi_uldivmod>
 8004896:	4603      	mov	r3, r0
 8004898:	460c      	mov	r4, r1
 800489a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	0c1b      	lsrs	r3, r3, #16
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	3301      	adds	r3, #1
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b4:	60bb      	str	r3, [r7, #8]
      break;
 80048b6:	e002      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048b8:	4b04      	ldr	r3, [pc, #16]	; (80048cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80048ba:	60bb      	str	r3, [r7, #8]
      break;
 80048bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048be:	68bb      	ldr	r3, [r7, #8]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048c8:	40023800 	.word	0x40023800
 80048cc:	00f42400 	.word	0x00f42400
 80048d0:	007a1200 	.word	0x007a1200

080048d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048d8:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048da:	681b      	ldr	r3, [r3, #0]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	20000000 	.word	0x20000000

080048ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048f0:	f7ff fff0 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 80048f4:	4601      	mov	r1, r0
 80048f6:	4b05      	ldr	r3, [pc, #20]	; (800490c <HAL_RCC_GetPCLK1Freq+0x20>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	0a9b      	lsrs	r3, r3, #10
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	4a03      	ldr	r2, [pc, #12]	; (8004910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004902:	5cd3      	ldrb	r3, [r2, r3]
 8004904:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004908:	4618      	mov	r0, r3
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40023800 	.word	0x40023800
 8004910:	08008824 	.word	0x08008824

08004914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004918:	f7ff ffdc 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 800491c:	4601      	mov	r1, r0
 800491e:	4b05      	ldr	r3, [pc, #20]	; (8004934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	0b5b      	lsrs	r3, r3, #13
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	4a03      	ldr	r2, [pc, #12]	; (8004938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800492a:	5cd3      	ldrb	r3, [r2, r3]
 800492c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004930:	4618      	mov	r0, r3
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40023800 	.word	0x40023800
 8004938:	08008824 	.word	0x08008824

0800493c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d012      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004964:	4b69      	ldr	r3, [pc, #420]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	4a68      	ldr	r2, [pc, #416]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800496a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800496e:	6093      	str	r3, [r2, #8]
 8004970:	4b66      	ldr	r3, [pc, #408]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	4964      	ldr	r1, [pc, #400]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497a:	4313      	orrs	r3, r2
 800497c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004986:	2301      	movs	r3, #1
 8004988:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d017      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004996:	4b5d      	ldr	r3, [pc, #372]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800499c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a4:	4959      	ldr	r1, [pc, #356]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b4:	d101      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80049b6:	2301      	movs	r3, #1
 80049b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80049c2:	2301      	movs	r3, #1
 80049c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d017      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049d2:	4b4e      	ldr	r3, [pc, #312]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	494a      	ldr	r1, [pc, #296]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049f0:	d101      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80049f2:	2301      	movs	r3, #1
 80049f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80049fe:	2301      	movs	r3, #1
 8004a00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 808b 	beq.w	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a20:	4b3a      	ldr	r3, [pc, #232]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	4a39      	ldr	r2, [pc, #228]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8004a2c:	4b37      	ldr	r3, [pc, #220]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a34:	60bb      	str	r3, [r7, #8]
 8004a36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a38:	4b35      	ldr	r3, [pc, #212]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a34      	ldr	r2, [pc, #208]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a44:	f7fd f986 	bl	8001d54 <HAL_GetTick>
 8004a48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a4c:	f7fd f982 	bl	8001d54 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b64      	cmp	r3, #100	; 0x64
 8004a58:	d901      	bls.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e357      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a5e:	4b2c      	ldr	r3, [pc, #176]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a6a:	4b28      	ldr	r3, [pc, #160]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d035      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d02e      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a88:	4b20      	ldr	r3, [pc, #128]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a92:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	4a1d      	ldr	r2, [pc, #116]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a9c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a9e:	4b1b      	ldr	r3, [pc, #108]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	4a1a      	ldr	r2, [pc, #104]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004aaa:	4a18      	ldr	r2, [pc, #96]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ab0:	4b16      	ldr	r3, [pc, #88]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d114      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fd f94a 	bl	8001d54 <HAL_GetTick>
 8004ac0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac2:	e00a      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac4:	f7fd f946 	bl	8001d54 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e319      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ada:	4b0c      	ldr	r3, [pc, #48]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0ee      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004af2:	d111      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004af4:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b00:	4b04      	ldr	r3, [pc, #16]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b02:	400b      	ands	r3, r1
 8004b04:	4901      	ldr	r1, [pc, #4]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	608b      	str	r3, [r1, #8]
 8004b0a:	e00b      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	40007000 	.word	0x40007000
 8004b14:	0ffffcff 	.word	0x0ffffcff
 8004b18:	4bb1      	ldr	r3, [pc, #708]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	4ab0      	ldr	r2, [pc, #704]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b1e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b22:	6093      	str	r3, [r2, #8]
 8004b24:	4bae      	ldr	r3, [pc, #696]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b30:	49ab      	ldr	r1, [pc, #684]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d010      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b42:	4ba7      	ldr	r3, [pc, #668]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b48:	4aa5      	ldr	r2, [pc, #660]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b52:	4ba3      	ldr	r3, [pc, #652]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b54:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	49a0      	ldr	r1, [pc, #640]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b70:	4b9b      	ldr	r3, [pc, #620]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b7e:	4998      	ldr	r1, [pc, #608]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b92:	4b93      	ldr	r3, [pc, #588]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ba0:	498f      	ldr	r1, [pc, #572]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bb4:	4b8a      	ldr	r3, [pc, #552]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bc2:	4987      	ldr	r1, [pc, #540]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bd6:	4b82      	ldr	r3, [pc, #520]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bdc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be4:	497e      	ldr	r1, [pc, #504]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00a      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bf8:	4b79      	ldr	r3, [pc, #484]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfe:	f023 0203 	bic.w	r2, r3, #3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c06:	4976      	ldr	r1, [pc, #472]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c1a:	4b71      	ldr	r3, [pc, #452]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c20:	f023 020c 	bic.w	r2, r3, #12
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c28:	496d      	ldr	r1, [pc, #436]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c3c:	4b68      	ldr	r3, [pc, #416]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4a:	4965      	ldr	r1, [pc, #404]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c5e:	4b60      	ldr	r3, [pc, #384]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c64:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6c:	495c      	ldr	r1, [pc, #368]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c80:	4b57      	ldr	r3, [pc, #348]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8e:	4954      	ldr	r1, [pc, #336]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004ca2:	4b4f      	ldr	r3, [pc, #316]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb0:	494b      	ldr	r1, [pc, #300]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004cc4:	4b46      	ldr	r3, [pc, #280]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd2:	4943      	ldr	r1, [pc, #268]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004ce6:	4b3e      	ldr	r3, [pc, #248]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf4:	493a      	ldr	r1, [pc, #232]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d08:	4b35      	ldr	r3, [pc, #212]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d16:	4932      	ldr	r1, [pc, #200]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d011      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d2a:	4b2d      	ldr	r3, [pc, #180]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d38:	4929      	ldr	r1, [pc, #164]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d48:	d101      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d6a:	4b1d      	ldr	r3, [pc, #116]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d70:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d78:	4919      	ldr	r1, [pc, #100]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00b      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d8c:	4b14      	ldr	r3, [pc, #80]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d9c:	4910      	ldr	r1, [pc, #64]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d006      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 80d9 	beq.w	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004db8:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a08      	ldr	r2, [pc, #32]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004dbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc4:	f7fc ffc6 	bl	8001d54 <HAL_GetTick>
 8004dc8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dca:	e00b      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dcc:	f7fc ffc2 	bl	8001d54 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b64      	cmp	r3, #100	; 0x64
 8004dd8:	d904      	bls.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e197      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004dde:	bf00      	nop
 8004de0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004de4:	4b6c      	ldr	r3, [pc, #432]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1ed      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d021      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d11d      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e04:	4b64      	ldr	r3, [pc, #400]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e0a:	0c1b      	lsrs	r3, r3, #16
 8004e0c:	f003 0303 	and.w	r3, r3, #3
 8004e10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e12:	4b61      	ldr	r3, [pc, #388]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e18:	0e1b      	lsrs	r3, r3, #24
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	019a      	lsls	r2, r3, #6
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	041b      	lsls	r3, r3, #16
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	061b      	lsls	r3, r3, #24
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	071b      	lsls	r3, r3, #28
 8004e38:	4957      	ldr	r1, [pc, #348]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d004      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e54:	d00a      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d02e      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e6a:	d129      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e6c:	4b4a      	ldr	r3, [pc, #296]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e72:	0c1b      	lsrs	r3, r3, #16
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e7a:	4b47      	ldr	r3, [pc, #284]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e80:	0f1b      	lsrs	r3, r3, #28
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	019a      	lsls	r2, r3, #6
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	041b      	lsls	r3, r3, #16
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	061b      	lsls	r3, r3, #24
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	071b      	lsls	r3, r3, #28
 8004ea0:	493d      	ldr	r1, [pc, #244]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ea8:	4b3b      	ldr	r3, [pc, #236]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eae:	f023 021f 	bic.w	r2, r3, #31
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	4937      	ldr	r1, [pc, #220]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d01d      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ecc:	4b32      	ldr	r3, [pc, #200]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed2:	0e1b      	lsrs	r3, r3, #24
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004eda:	4b2f      	ldr	r3, [pc, #188]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee0:	0f1b      	lsrs	r3, r3, #28
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	019a      	lsls	r2, r3, #6
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	041b      	lsls	r3, r3, #16
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	061b      	lsls	r3, r3, #24
 8004efa:	431a      	orrs	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	071b      	lsls	r3, r3, #28
 8004f00:	4925      	ldr	r1, [pc, #148]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d011      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	019a      	lsls	r2, r3, #6
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	041b      	lsls	r3, r3, #16
 8004f20:	431a      	orrs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	061b      	lsls	r3, r3, #24
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	071b      	lsls	r3, r3, #28
 8004f30:	4919      	ldr	r1, [pc, #100]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f38:	4b17      	ldr	r3, [pc, #92]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a16      	ldr	r2, [pc, #88]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f44:	f7fc ff06 	bl	8001d54 <HAL_GetTick>
 8004f48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f4c:	f7fc ff02 	bl	8001d54 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b64      	cmp	r3, #100	; 0x64
 8004f58:	d901      	bls.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e0d7      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f5e:	4b0e      	ldr	r3, [pc, #56]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	f040 80cd 	bne.w	800510c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f72:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a08      	ldr	r2, [pc, #32]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f7e:	f7fc fee9 	bl	8001d54 <HAL_GetTick>
 8004f82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f84:	e00a      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f86:	f7fc fee5 	bl	8001d54 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b64      	cmp	r3, #100	; 0x64
 8004f92:	d903      	bls.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e0ba      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004f98:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f9c:	4b5e      	ldr	r3, [pc, #376]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa8:	d0ed      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d009      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d02e      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d12a      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004fd2:	4b51      	ldr	r3, [pc, #324]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd8:	0c1b      	lsrs	r3, r3, #16
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fe0:	4b4d      	ldr	r3, [pc, #308]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe6:	0f1b      	lsrs	r3, r3, #28
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	019a      	lsls	r2, r3, #6
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	041b      	lsls	r3, r3, #16
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	061b      	lsls	r3, r3, #24
 8005000:	431a      	orrs	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	071b      	lsls	r3, r3, #28
 8005006:	4944      	ldr	r1, [pc, #272]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800500e:	4b42      	ldr	r3, [pc, #264]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005014:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	3b01      	subs	r3, #1
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	493d      	ldr	r1, [pc, #244]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d022      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005038:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800503c:	d11d      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800503e:	4b36      	ldr	r3, [pc, #216]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005044:	0e1b      	lsrs	r3, r3, #24
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800504c:	4b32      	ldr	r3, [pc, #200]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800504e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005052:	0f1b      	lsrs	r3, r3, #28
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	019a      	lsls	r2, r3, #6
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	041b      	lsls	r3, r3, #16
 8005066:	431a      	orrs	r2, r3
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	061b      	lsls	r3, r3, #24
 800506c:	431a      	orrs	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	071b      	lsls	r3, r3, #28
 8005072:	4929      	ldr	r1, [pc, #164]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b00      	cmp	r3, #0
 8005084:	d028      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005086:	4b24      	ldr	r3, [pc, #144]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508c:	0e1b      	lsrs	r3, r3, #24
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005094:	4b20      	ldr	r3, [pc, #128]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509a:	0c1b      	lsrs	r3, r3, #16
 800509c:	f003 0303 	and.w	r3, r3, #3
 80050a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	019a      	lsls	r2, r3, #6
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	041b      	lsls	r3, r3, #16
 80050ac:	431a      	orrs	r2, r3
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	061b      	lsls	r3, r3, #24
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	071b      	lsls	r3, r3, #28
 80050ba:	4917      	ldr	r1, [pc, #92]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80050c2:	4b15      	ldr	r3, [pc, #84]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	4911      	ldr	r1, [pc, #68]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80050d8:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a0e      	ldr	r2, [pc, #56]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e4:	f7fc fe36 	bl	8001d54 <HAL_GetTick>
 80050e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050ec:	f7fc fe32 	bl	8001d54 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b64      	cmp	r3, #100	; 0x64
 80050f8:	d901      	bls.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e007      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050fe:	4b06      	ldr	r3, [pc, #24]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005106:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800510a:	d1ef      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40023800 	.word	0x40023800

0800511c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e049      	b.n	80051c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fc fc48 	bl	80019d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3304      	adds	r3, #4
 8005158:	4619      	mov	r1, r3
 800515a:	4610      	mov	r0, r2
 800515c:	f000 fab4 	bl	80056c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
	...

080051cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d001      	beq.n	80051e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e054      	b.n	800528e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0201 	orr.w	r2, r2, #1
 80051fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a26      	ldr	r2, [pc, #152]	; (800529c <HAL_TIM_Base_Start_IT+0xd0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d022      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520e:	d01d      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a22      	ldr	r2, [pc, #136]	; (80052a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d018      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d013      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1f      	ldr	r2, [pc, #124]	; (80052a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00e      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1e      	ldr	r2, [pc, #120]	; (80052ac <HAL_TIM_Base_Start_IT+0xe0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d009      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1c      	ldr	r2, [pc, #112]	; (80052b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d004      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1b      	ldr	r2, [pc, #108]	; (80052b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d115      	bne.n	8005278 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	4b19      	ldr	r3, [pc, #100]	; (80052b8 <HAL_TIM_Base_Start_IT+0xec>)
 8005254:	4013      	ands	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b06      	cmp	r3, #6
 800525c:	d015      	beq.n	800528a <HAL_TIM_Base_Start_IT+0xbe>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005264:	d011      	beq.n	800528a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0201 	orr.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005276:	e008      	b.n	800528a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	e000      	b.n	800528c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40010000 	.word	0x40010000
 80052a0:	40000400 	.word	0x40000400
 80052a4:	40000800 	.word	0x40000800
 80052a8:	40000c00 	.word	0x40000c00
 80052ac:	40010400 	.word	0x40010400
 80052b0:	40014000 	.word	0x40014000
 80052b4:	40001800 	.word	0x40001800
 80052b8:	00010007 	.word	0x00010007

080052bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d122      	bne.n	8005318 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d11b      	bne.n	8005318 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0202 	mvn.w	r2, #2
 80052e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f9c4 	bl	800568c <HAL_TIM_IC_CaptureCallback>
 8005304:	e005      	b.n	8005312 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f9b6 	bl	8005678 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f9c7 	bl	80056a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b04      	cmp	r3, #4
 8005324:	d122      	bne.n	800536c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b04      	cmp	r3, #4
 8005332:	d11b      	bne.n	800536c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0204 	mvn.w	r2, #4
 800533c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2202      	movs	r2, #2
 8005342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f99a 	bl	800568c <HAL_TIM_IC_CaptureCallback>
 8005358:	e005      	b.n	8005366 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f98c 	bl	8005678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f99d 	bl	80056a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0308 	and.w	r3, r3, #8
 8005376:	2b08      	cmp	r3, #8
 8005378:	d122      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b08      	cmp	r3, #8
 8005386:	d11b      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0208 	mvn.w	r2, #8
 8005390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2204      	movs	r2, #4
 8005396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f970 	bl	800568c <HAL_TIM_IC_CaptureCallback>
 80053ac:	e005      	b.n	80053ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f962 	bl	8005678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f973 	bl	80056a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f003 0310 	and.w	r3, r3, #16
 80053ca:	2b10      	cmp	r3, #16
 80053cc:	d122      	bne.n	8005414 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b10      	cmp	r3, #16
 80053da:	d11b      	bne.n	8005414 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f06f 0210 	mvn.w	r2, #16
 80053e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2208      	movs	r2, #8
 80053ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f946 	bl	800568c <HAL_TIM_IC_CaptureCallback>
 8005400:	e005      	b.n	800540e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f938 	bl	8005678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f949 	bl	80056a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b01      	cmp	r3, #1
 8005420:	d10e      	bne.n	8005440 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b01      	cmp	r3, #1
 800542e:	d107      	bne.n	8005440 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f06f 0201 	mvn.w	r2, #1
 8005438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fc f91c 	bl	8001678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544a:	2b80      	cmp	r3, #128	; 0x80
 800544c:	d10e      	bne.n	800546c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005458:	2b80      	cmp	r3, #128	; 0x80
 800545a:	d107      	bne.n	800546c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fb00 	bl	8005a6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547a:	d10e      	bne.n	800549a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005486:	2b80      	cmp	r3, #128	; 0x80
 8005488:	d107      	bne.n	800549a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 faf3 	bl	8005a80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a4:	2b40      	cmp	r3, #64	; 0x40
 80054a6:	d10e      	bne.n	80054c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b2:	2b40      	cmp	r3, #64	; 0x40
 80054b4:	d107      	bne.n	80054c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f8f7 	bl	80056b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f003 0320 	and.w	r3, r3, #32
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d10e      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b20      	cmp	r3, #32
 80054e0:	d107      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f06f 0220 	mvn.w	r2, #32
 80054ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fab3 	bl	8005a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054f2:	bf00      	nop
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_TIM_ConfigClockSource+0x1c>
 8005514:	2302      	movs	r3, #2
 8005516:	e0a9      	b.n	800566c <HAL_TIM_ConfigClockSource+0x170>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	4b50      	ldr	r3, [pc, #320]	; (8005674 <HAL_TIM_ConfigClockSource+0x178>)
 8005534:	4013      	ands	r3, r2
 8005536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800553e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b40      	cmp	r3, #64	; 0x40
 800554e:	d067      	beq.n	8005620 <HAL_TIM_ConfigClockSource+0x124>
 8005550:	2b40      	cmp	r3, #64	; 0x40
 8005552:	d80b      	bhi.n	800556c <HAL_TIM_ConfigClockSource+0x70>
 8005554:	2b10      	cmp	r3, #16
 8005556:	d073      	beq.n	8005640 <HAL_TIM_ConfigClockSource+0x144>
 8005558:	2b10      	cmp	r3, #16
 800555a:	d802      	bhi.n	8005562 <HAL_TIM_ConfigClockSource+0x66>
 800555c:	2b00      	cmp	r3, #0
 800555e:	d06f      	beq.n	8005640 <HAL_TIM_ConfigClockSource+0x144>
 8005560:	e077      	b.n	8005652 <HAL_TIM_ConfigClockSource+0x156>
 8005562:	2b20      	cmp	r3, #32
 8005564:	d06c      	beq.n	8005640 <HAL_TIM_ConfigClockSource+0x144>
 8005566:	2b30      	cmp	r3, #48	; 0x30
 8005568:	d06a      	beq.n	8005640 <HAL_TIM_ConfigClockSource+0x144>
 800556a:	e072      	b.n	8005652 <HAL_TIM_ConfigClockSource+0x156>
 800556c:	2b70      	cmp	r3, #112	; 0x70
 800556e:	d00d      	beq.n	800558c <HAL_TIM_ConfigClockSource+0x90>
 8005570:	2b70      	cmp	r3, #112	; 0x70
 8005572:	d804      	bhi.n	800557e <HAL_TIM_ConfigClockSource+0x82>
 8005574:	2b50      	cmp	r3, #80	; 0x50
 8005576:	d033      	beq.n	80055e0 <HAL_TIM_ConfigClockSource+0xe4>
 8005578:	2b60      	cmp	r3, #96	; 0x60
 800557a:	d041      	beq.n	8005600 <HAL_TIM_ConfigClockSource+0x104>
 800557c:	e069      	b.n	8005652 <HAL_TIM_ConfigClockSource+0x156>
 800557e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005582:	d069      	beq.n	8005658 <HAL_TIM_ConfigClockSource+0x15c>
 8005584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005588:	d017      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0xbe>
 800558a:	e062      	b.n	8005652 <HAL_TIM_ConfigClockSource+0x156>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6818      	ldr	r0, [r3, #0]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	6899      	ldr	r1, [r3, #8]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f000 f9ae 	bl	80058fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	609a      	str	r2, [r3, #8]
      break;
 80055b8:	e04f      	b.n	800565a <HAL_TIM_ConfigClockSource+0x15e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6818      	ldr	r0, [r3, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	6899      	ldr	r1, [r3, #8]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f000 f997 	bl	80058fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055dc:	609a      	str	r2, [r3, #8]
      break;
 80055de:	e03c      	b.n	800565a <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6818      	ldr	r0, [r3, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	6859      	ldr	r1, [r3, #4]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	461a      	mov	r2, r3
 80055ee:	f000 f90b 	bl	8005808 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2150      	movs	r1, #80	; 0x50
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 f964 	bl	80058c6 <TIM_ITRx_SetConfig>
      break;
 80055fe:	e02c      	b.n	800565a <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6818      	ldr	r0, [r3, #0]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	6859      	ldr	r1, [r3, #4]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	461a      	mov	r2, r3
 800560e:	f000 f92a 	bl	8005866 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2160      	movs	r1, #96	; 0x60
 8005618:	4618      	mov	r0, r3
 800561a:	f000 f954 	bl	80058c6 <TIM_ITRx_SetConfig>
      break;
 800561e:	e01c      	b.n	800565a <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6818      	ldr	r0, [r3, #0]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	6859      	ldr	r1, [r3, #4]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	461a      	mov	r2, r3
 800562e:	f000 f8eb 	bl	8005808 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2140      	movs	r1, #64	; 0x40
 8005638:	4618      	mov	r0, r3
 800563a:	f000 f944 	bl	80058c6 <TIM_ITRx_SetConfig>
      break;
 800563e:	e00c      	b.n	800565a <HAL_TIM_ConfigClockSource+0x15e>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4619      	mov	r1, r3
 800564a:	4610      	mov	r0, r2
 800564c:	f000 f93b 	bl	80058c6 <TIM_ITRx_SetConfig>
      break;
 8005650:	e003      	b.n	800565a <HAL_TIM_ConfigClockSource+0x15e>
    }

    default:
      status = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	73fb      	strb	r3, [r7, #15]
      break;
 8005656:	e000      	b.n	800565a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8005658:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800566a:	7bfb      	ldrb	r3, [r7, #15]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	fffeff88 	.word	0xfffeff88

08005678 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a40      	ldr	r2, [pc, #256]	; (80057dc <TIM_Base_SetConfig+0x114>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d013      	beq.n	8005708 <TIM_Base_SetConfig+0x40>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e6:	d00f      	beq.n	8005708 <TIM_Base_SetConfig+0x40>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a3d      	ldr	r2, [pc, #244]	; (80057e0 <TIM_Base_SetConfig+0x118>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00b      	beq.n	8005708 <TIM_Base_SetConfig+0x40>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a3c      	ldr	r2, [pc, #240]	; (80057e4 <TIM_Base_SetConfig+0x11c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d007      	beq.n	8005708 <TIM_Base_SetConfig+0x40>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a3b      	ldr	r2, [pc, #236]	; (80057e8 <TIM_Base_SetConfig+0x120>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d003      	beq.n	8005708 <TIM_Base_SetConfig+0x40>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a3a      	ldr	r2, [pc, #232]	; (80057ec <TIM_Base_SetConfig+0x124>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d108      	bne.n	800571a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a2f      	ldr	r2, [pc, #188]	; (80057dc <TIM_Base_SetConfig+0x114>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d02b      	beq.n	800577a <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005728:	d027      	beq.n	800577a <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a2c      	ldr	r2, [pc, #176]	; (80057e0 <TIM_Base_SetConfig+0x118>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d023      	beq.n	800577a <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a2b      	ldr	r2, [pc, #172]	; (80057e4 <TIM_Base_SetConfig+0x11c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01f      	beq.n	800577a <TIM_Base_SetConfig+0xb2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a2a      	ldr	r2, [pc, #168]	; (80057e8 <TIM_Base_SetConfig+0x120>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d01b      	beq.n	800577a <TIM_Base_SetConfig+0xb2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a29      	ldr	r2, [pc, #164]	; (80057ec <TIM_Base_SetConfig+0x124>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d017      	beq.n	800577a <TIM_Base_SetConfig+0xb2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a28      	ldr	r2, [pc, #160]	; (80057f0 <TIM_Base_SetConfig+0x128>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d013      	beq.n	800577a <TIM_Base_SetConfig+0xb2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a27      	ldr	r2, [pc, #156]	; (80057f4 <TIM_Base_SetConfig+0x12c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00f      	beq.n	800577a <TIM_Base_SetConfig+0xb2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a26      	ldr	r2, [pc, #152]	; (80057f8 <TIM_Base_SetConfig+0x130>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00b      	beq.n	800577a <TIM_Base_SetConfig+0xb2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a25      	ldr	r2, [pc, #148]	; (80057fc <TIM_Base_SetConfig+0x134>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d007      	beq.n	800577a <TIM_Base_SetConfig+0xb2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a24      	ldr	r2, [pc, #144]	; (8005800 <TIM_Base_SetConfig+0x138>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d003      	beq.n	800577a <TIM_Base_SetConfig+0xb2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a23      	ldr	r2, [pc, #140]	; (8005804 <TIM_Base_SetConfig+0x13c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d108      	bne.n	800578c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	4313      	orrs	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a0a      	ldr	r2, [pc, #40]	; (80057dc <TIM_Base_SetConfig+0x114>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d003      	beq.n	80057c0 <TIM_Base_SetConfig+0xf8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a0c      	ldr	r2, [pc, #48]	; (80057ec <TIM_Base_SetConfig+0x124>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d103      	bne.n	80057c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	615a      	str	r2, [r3, #20]
}
 80057ce:	bf00      	nop
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	40010000 	.word	0x40010000
 80057e0:	40000400 	.word	0x40000400
 80057e4:	40000800 	.word	0x40000800
 80057e8:	40000c00 	.word	0x40000c00
 80057ec:	40010400 	.word	0x40010400
 80057f0:	40014000 	.word	0x40014000
 80057f4:	40014400 	.word	0x40014400
 80057f8:	40014800 	.word	0x40014800
 80057fc:	40001800 	.word	0x40001800
 8005800:	40001c00 	.word	0x40001c00
 8005804:	40002000 	.word	0x40002000

08005808 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	f023 0201 	bic.w	r2, r3, #1
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f023 030a 	bic.w	r3, r3, #10
 8005844:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	4313      	orrs	r3, r2
 800584c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	621a      	str	r2, [r3, #32]
}
 800585a:	bf00      	nop
 800585c:	371c      	adds	r7, #28
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005866:	b480      	push	{r7}
 8005868:	b087      	sub	sp, #28
 800586a:	af00      	add	r7, sp, #0
 800586c:	60f8      	str	r0, [r7, #12]
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f023 0210 	bic.w	r2, r3, #16
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005890:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	031b      	lsls	r3, r3, #12
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4313      	orrs	r3, r2
 800589a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	621a      	str	r2, [r3, #32]
}
 80058ba:	bf00      	nop
 80058bc:	371c      	adds	r7, #28
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b085      	sub	sp, #20
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f043 0307 	orr.w	r3, r3, #7
 80058e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	609a      	str	r2, [r3, #8]
}
 80058f0:	bf00      	nop
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
 8005908:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005916:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	021a      	lsls	r2, r3, #8
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	431a      	orrs	r2, r3
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4313      	orrs	r3, r2
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	609a      	str	r2, [r3, #8]
}
 8005930:	bf00      	nop
 8005932:	371c      	adds	r7, #28
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005950:	2302      	movs	r3, #2
 8005952:	e06d      	b.n	8005a30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a30      	ldr	r2, [pc, #192]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d004      	beq.n	8005988 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a2f      	ldr	r2, [pc, #188]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d108      	bne.n	800599a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800598e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a20      	ldr	r2, [pc, #128]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d022      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c6:	d01d      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a1d      	ldr	r2, [pc, #116]	; (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d018      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a1c      	ldr	r2, [pc, #112]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d013      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a1a      	ldr	r2, [pc, #104]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00e      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a15      	ldr	r2, [pc, #84]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d009      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a16      	ldr	r2, [pc, #88]	; (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d004      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a15      	ldr	r2, [pc, #84]	; (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d10c      	bne.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	40010000 	.word	0x40010000
 8005a40:	40010400 	.word	0x40010400
 8005a44:	40000400 	.word	0x40000400
 8005a48:	40000800 	.word	0x40000800
 8005a4c:	40000c00 	.word	0x40000c00
 8005a50:	40014000 	.word	0x40014000
 8005a54:	40001800 	.word	0x40001800

08005a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e040      	b.n	8005b28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fb ffb2 	bl	8001a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2224      	movs	r2, #36	; 0x24
 8005ac0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 0201 	bic.w	r2, r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f8c0 	bl	8005c58 <UART_SetConfig>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e022      	b.n	8005b28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fb14 	bl	8006118 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005afe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fb9b 	bl	800625c <UART_CheckIdleState>
 8005b26:	4603      	mov	r3, r0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b08a      	sub	sp, #40	; 0x28
 8005b34:	af02      	add	r7, sp, #8
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b44:	2b20      	cmp	r3, #32
 8005b46:	f040 8081 	bne.w	8005c4c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <HAL_UART_Transmit+0x26>
 8005b50:	88fb      	ldrh	r3, [r7, #6]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e079      	b.n	8005c4e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_UART_Transmit+0x38>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e072      	b.n	8005c4e <HAL_UART_Transmit+0x11e>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2221      	movs	r2, #33	; 0x21
 8005b7c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b7e:	f7fc f8e9 	bl	8001d54 <HAL_GetTick>
 8005b82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	88fa      	ldrh	r2, [r7, #6]
 8005b88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	88fa      	ldrh	r2, [r7, #6]
 8005b90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9c:	d108      	bne.n	8005bb0 <HAL_UART_Transmit+0x80>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d104      	bne.n	8005bb0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	e003      	b.n	8005bb8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005bc0:	e02c      	b.n	8005c1c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2180      	movs	r1, #128	; 0x80
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 fb78 	bl	80062c2 <UART_WaitOnFlagUntilTimeout>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e038      	b.n	8005c4e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10b      	bne.n	8005bfa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bf0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	3302      	adds	r3, #2
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	e007      	b.n	8005c0a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	781a      	ldrb	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	3301      	adds	r3, #1
 8005c08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1cc      	bne.n	8005bc2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2140      	movs	r1, #64	; 0x40
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 fb45 	bl	80062c2 <UART_WaitOnFlagUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e005      	b.n	8005c4e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e000      	b.n	8005c4e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005c4c:	2302      	movs	r3, #2
  }
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3720      	adds	r7, #32
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b088      	sub	sp, #32
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	4bb1      	ldr	r3, [pc, #708]	; (8005f48 <UART_SetConfig+0x2f0>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6812      	ldr	r2, [r2, #0]
 8005c8a:	6979      	ldr	r1, [r7, #20]
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a9f      	ldr	r2, [pc, #636]	; (8005f4c <UART_SetConfig+0x2f4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d121      	bne.n	8005d18 <UART_SetConfig+0xc0>
 8005cd4:	4b9e      	ldr	r3, [pc, #632]	; (8005f50 <UART_SetConfig+0x2f8>)
 8005cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cda:	f003 0303 	and.w	r3, r3, #3
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	d816      	bhi.n	8005d10 <UART_SetConfig+0xb8>
 8005ce2:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <UART_SetConfig+0x90>)
 8005ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce8:	08005cf9 	.word	0x08005cf9
 8005cec:	08005d05 	.word	0x08005d05
 8005cf0:	08005cff 	.word	0x08005cff
 8005cf4:	08005d0b 	.word	0x08005d0b
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	77fb      	strb	r3, [r7, #31]
 8005cfc:	e151      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	77fb      	strb	r3, [r7, #31]
 8005d02:	e14e      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005d04:	2304      	movs	r3, #4
 8005d06:	77fb      	strb	r3, [r7, #31]
 8005d08:	e14b      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005d0a:	2308      	movs	r3, #8
 8005d0c:	77fb      	strb	r3, [r7, #31]
 8005d0e:	e148      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005d10:	2310      	movs	r3, #16
 8005d12:	77fb      	strb	r3, [r7, #31]
 8005d14:	bf00      	nop
 8005d16:	e144      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a8d      	ldr	r2, [pc, #564]	; (8005f54 <UART_SetConfig+0x2fc>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d134      	bne.n	8005d8c <UART_SetConfig+0x134>
 8005d22:	4b8b      	ldr	r3, [pc, #556]	; (8005f50 <UART_SetConfig+0x2f8>)
 8005d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d28:	f003 030c 	and.w	r3, r3, #12
 8005d2c:	2b0c      	cmp	r3, #12
 8005d2e:	d829      	bhi.n	8005d84 <UART_SetConfig+0x12c>
 8005d30:	a201      	add	r2, pc, #4	; (adr r2, 8005d38 <UART_SetConfig+0xe0>)
 8005d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d36:	bf00      	nop
 8005d38:	08005d6d 	.word	0x08005d6d
 8005d3c:	08005d85 	.word	0x08005d85
 8005d40:	08005d85 	.word	0x08005d85
 8005d44:	08005d85 	.word	0x08005d85
 8005d48:	08005d79 	.word	0x08005d79
 8005d4c:	08005d85 	.word	0x08005d85
 8005d50:	08005d85 	.word	0x08005d85
 8005d54:	08005d85 	.word	0x08005d85
 8005d58:	08005d73 	.word	0x08005d73
 8005d5c:	08005d85 	.word	0x08005d85
 8005d60:	08005d85 	.word	0x08005d85
 8005d64:	08005d85 	.word	0x08005d85
 8005d68:	08005d7f 	.word	0x08005d7f
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	77fb      	strb	r3, [r7, #31]
 8005d70:	e117      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005d72:	2302      	movs	r3, #2
 8005d74:	77fb      	strb	r3, [r7, #31]
 8005d76:	e114      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005d78:	2304      	movs	r3, #4
 8005d7a:	77fb      	strb	r3, [r7, #31]
 8005d7c:	e111      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005d7e:	2308      	movs	r3, #8
 8005d80:	77fb      	strb	r3, [r7, #31]
 8005d82:	e10e      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005d84:	2310      	movs	r3, #16
 8005d86:	77fb      	strb	r3, [r7, #31]
 8005d88:	bf00      	nop
 8005d8a:	e10a      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a71      	ldr	r2, [pc, #452]	; (8005f58 <UART_SetConfig+0x300>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d120      	bne.n	8005dd8 <UART_SetConfig+0x180>
 8005d96:	4b6e      	ldr	r3, [pc, #440]	; (8005f50 <UART_SetConfig+0x2f8>)
 8005d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005da0:	2b10      	cmp	r3, #16
 8005da2:	d00f      	beq.n	8005dc4 <UART_SetConfig+0x16c>
 8005da4:	2b10      	cmp	r3, #16
 8005da6:	d802      	bhi.n	8005dae <UART_SetConfig+0x156>
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <UART_SetConfig+0x160>
 8005dac:	e010      	b.n	8005dd0 <UART_SetConfig+0x178>
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	d005      	beq.n	8005dbe <UART_SetConfig+0x166>
 8005db2:	2b30      	cmp	r3, #48	; 0x30
 8005db4:	d009      	beq.n	8005dca <UART_SetConfig+0x172>
 8005db6:	e00b      	b.n	8005dd0 <UART_SetConfig+0x178>
 8005db8:	2300      	movs	r3, #0
 8005dba:	77fb      	strb	r3, [r7, #31]
 8005dbc:	e0f1      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	77fb      	strb	r3, [r7, #31]
 8005dc2:	e0ee      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005dc4:	2304      	movs	r3, #4
 8005dc6:	77fb      	strb	r3, [r7, #31]
 8005dc8:	e0eb      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005dca:	2308      	movs	r3, #8
 8005dcc:	77fb      	strb	r3, [r7, #31]
 8005dce:	e0e8      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005dd0:	2310      	movs	r3, #16
 8005dd2:	77fb      	strb	r3, [r7, #31]
 8005dd4:	bf00      	nop
 8005dd6:	e0e4      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a5f      	ldr	r2, [pc, #380]	; (8005f5c <UART_SetConfig+0x304>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d120      	bne.n	8005e24 <UART_SetConfig+0x1cc>
 8005de2:	4b5b      	ldr	r3, [pc, #364]	; (8005f50 <UART_SetConfig+0x2f8>)
 8005de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dec:	2b40      	cmp	r3, #64	; 0x40
 8005dee:	d00f      	beq.n	8005e10 <UART_SetConfig+0x1b8>
 8005df0:	2b40      	cmp	r3, #64	; 0x40
 8005df2:	d802      	bhi.n	8005dfa <UART_SetConfig+0x1a2>
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <UART_SetConfig+0x1ac>
 8005df8:	e010      	b.n	8005e1c <UART_SetConfig+0x1c4>
 8005dfa:	2b80      	cmp	r3, #128	; 0x80
 8005dfc:	d005      	beq.n	8005e0a <UART_SetConfig+0x1b2>
 8005dfe:	2bc0      	cmp	r3, #192	; 0xc0
 8005e00:	d009      	beq.n	8005e16 <UART_SetConfig+0x1be>
 8005e02:	e00b      	b.n	8005e1c <UART_SetConfig+0x1c4>
 8005e04:	2300      	movs	r3, #0
 8005e06:	77fb      	strb	r3, [r7, #31]
 8005e08:	e0cb      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	77fb      	strb	r3, [r7, #31]
 8005e0e:	e0c8      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005e10:	2304      	movs	r3, #4
 8005e12:	77fb      	strb	r3, [r7, #31]
 8005e14:	e0c5      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005e16:	2308      	movs	r3, #8
 8005e18:	77fb      	strb	r3, [r7, #31]
 8005e1a:	e0c2      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005e1c:	2310      	movs	r3, #16
 8005e1e:	77fb      	strb	r3, [r7, #31]
 8005e20:	bf00      	nop
 8005e22:	e0be      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a4d      	ldr	r2, [pc, #308]	; (8005f60 <UART_SetConfig+0x308>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d124      	bne.n	8005e78 <UART_SetConfig+0x220>
 8005e2e:	4b48      	ldr	r3, [pc, #288]	; (8005f50 <UART_SetConfig+0x2f8>)
 8005e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e3c:	d012      	beq.n	8005e64 <UART_SetConfig+0x20c>
 8005e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e42:	d802      	bhi.n	8005e4a <UART_SetConfig+0x1f2>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d007      	beq.n	8005e58 <UART_SetConfig+0x200>
 8005e48:	e012      	b.n	8005e70 <UART_SetConfig+0x218>
 8005e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e4e:	d006      	beq.n	8005e5e <UART_SetConfig+0x206>
 8005e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e54:	d009      	beq.n	8005e6a <UART_SetConfig+0x212>
 8005e56:	e00b      	b.n	8005e70 <UART_SetConfig+0x218>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e0a1      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	77fb      	strb	r3, [r7, #31]
 8005e62:	e09e      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005e64:	2304      	movs	r3, #4
 8005e66:	77fb      	strb	r3, [r7, #31]
 8005e68:	e09b      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005e6a:	2308      	movs	r3, #8
 8005e6c:	77fb      	strb	r3, [r7, #31]
 8005e6e:	e098      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005e70:	2310      	movs	r3, #16
 8005e72:	77fb      	strb	r3, [r7, #31]
 8005e74:	bf00      	nop
 8005e76:	e094      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a39      	ldr	r2, [pc, #228]	; (8005f64 <UART_SetConfig+0x30c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d124      	bne.n	8005ecc <UART_SetConfig+0x274>
 8005e82:	4b33      	ldr	r3, [pc, #204]	; (8005f50 <UART_SetConfig+0x2f8>)
 8005e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e90:	d012      	beq.n	8005eb8 <UART_SetConfig+0x260>
 8005e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e96:	d802      	bhi.n	8005e9e <UART_SetConfig+0x246>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d007      	beq.n	8005eac <UART_SetConfig+0x254>
 8005e9c:	e012      	b.n	8005ec4 <UART_SetConfig+0x26c>
 8005e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ea2:	d006      	beq.n	8005eb2 <UART_SetConfig+0x25a>
 8005ea4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ea8:	d009      	beq.n	8005ebe <UART_SetConfig+0x266>
 8005eaa:	e00b      	b.n	8005ec4 <UART_SetConfig+0x26c>
 8005eac:	2301      	movs	r3, #1
 8005eae:	77fb      	strb	r3, [r7, #31]
 8005eb0:	e077      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	77fb      	strb	r3, [r7, #31]
 8005eb6:	e074      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005eb8:	2304      	movs	r3, #4
 8005eba:	77fb      	strb	r3, [r7, #31]
 8005ebc:	e071      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005ebe:	2308      	movs	r3, #8
 8005ec0:	77fb      	strb	r3, [r7, #31]
 8005ec2:	e06e      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	77fb      	strb	r3, [r7, #31]
 8005ec8:	bf00      	nop
 8005eca:	e06a      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a25      	ldr	r2, [pc, #148]	; (8005f68 <UART_SetConfig+0x310>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d124      	bne.n	8005f20 <UART_SetConfig+0x2c8>
 8005ed6:	4b1e      	ldr	r3, [pc, #120]	; (8005f50 <UART_SetConfig+0x2f8>)
 8005ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005edc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee4:	d012      	beq.n	8005f0c <UART_SetConfig+0x2b4>
 8005ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eea:	d802      	bhi.n	8005ef2 <UART_SetConfig+0x29a>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d007      	beq.n	8005f00 <UART_SetConfig+0x2a8>
 8005ef0:	e012      	b.n	8005f18 <UART_SetConfig+0x2c0>
 8005ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef6:	d006      	beq.n	8005f06 <UART_SetConfig+0x2ae>
 8005ef8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005efc:	d009      	beq.n	8005f12 <UART_SetConfig+0x2ba>
 8005efe:	e00b      	b.n	8005f18 <UART_SetConfig+0x2c0>
 8005f00:	2300      	movs	r3, #0
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e04d      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005f06:	2302      	movs	r3, #2
 8005f08:	77fb      	strb	r3, [r7, #31]
 8005f0a:	e04a      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e047      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005f12:	2308      	movs	r3, #8
 8005f14:	77fb      	strb	r3, [r7, #31]
 8005f16:	e044      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	77fb      	strb	r3, [r7, #31]
 8005f1c:	bf00      	nop
 8005f1e:	e040      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a11      	ldr	r2, [pc, #68]	; (8005f6c <UART_SetConfig+0x314>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d139      	bne.n	8005f9e <UART_SetConfig+0x346>
 8005f2a:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <UART_SetConfig+0x2f8>)
 8005f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f38:	d027      	beq.n	8005f8a <UART_SetConfig+0x332>
 8005f3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f3e:	d817      	bhi.n	8005f70 <UART_SetConfig+0x318>
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d01c      	beq.n	8005f7e <UART_SetConfig+0x326>
 8005f44:	e027      	b.n	8005f96 <UART_SetConfig+0x33e>
 8005f46:	bf00      	nop
 8005f48:	efff69f3 	.word	0xefff69f3
 8005f4c:	40011000 	.word	0x40011000
 8005f50:	40023800 	.word	0x40023800
 8005f54:	40004400 	.word	0x40004400
 8005f58:	40004800 	.word	0x40004800
 8005f5c:	40004c00 	.word	0x40004c00
 8005f60:	40005000 	.word	0x40005000
 8005f64:	40011400 	.word	0x40011400
 8005f68:	40007800 	.word	0x40007800
 8005f6c:	40007c00 	.word	0x40007c00
 8005f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f74:	d006      	beq.n	8005f84 <UART_SetConfig+0x32c>
 8005f76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f7a:	d009      	beq.n	8005f90 <UART_SetConfig+0x338>
 8005f7c:	e00b      	b.n	8005f96 <UART_SetConfig+0x33e>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	77fb      	strb	r3, [r7, #31]
 8005f82:	e00e      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005f84:	2302      	movs	r3, #2
 8005f86:	77fb      	strb	r3, [r7, #31]
 8005f88:	e00b      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005f8a:	2304      	movs	r3, #4
 8005f8c:	77fb      	strb	r3, [r7, #31]
 8005f8e:	e008      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005f90:	2308      	movs	r3, #8
 8005f92:	77fb      	strb	r3, [r7, #31]
 8005f94:	e005      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005f96:	2310      	movs	r3, #16
 8005f98:	77fb      	strb	r3, [r7, #31]
 8005f9a:	bf00      	nop
 8005f9c:	e001      	b.n	8005fa2 <UART_SetConfig+0x34a>
 8005f9e:	2310      	movs	r3, #16
 8005fa0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005faa:	d15a      	bne.n	8006062 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005fac:	7ffb      	ldrb	r3, [r7, #31]
 8005fae:	2b08      	cmp	r3, #8
 8005fb0:	d827      	bhi.n	8006002 <UART_SetConfig+0x3aa>
 8005fb2:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <UART_SetConfig+0x360>)
 8005fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb8:	08005fdd 	.word	0x08005fdd
 8005fbc:	08005fe5 	.word	0x08005fe5
 8005fc0:	08005fed 	.word	0x08005fed
 8005fc4:	08006003 	.word	0x08006003
 8005fc8:	08005ff3 	.word	0x08005ff3
 8005fcc:	08006003 	.word	0x08006003
 8005fd0:	08006003 	.word	0x08006003
 8005fd4:	08006003 	.word	0x08006003
 8005fd8:	08005ffb 	.word	0x08005ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fdc:	f7fe fc86 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 8005fe0:	61b8      	str	r0, [r7, #24]
        break;
 8005fe2:	e013      	b.n	800600c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fe4:	f7fe fc96 	bl	8004914 <HAL_RCC_GetPCLK2Freq>
 8005fe8:	61b8      	str	r0, [r7, #24]
        break;
 8005fea:	e00f      	b.n	800600c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fec:	4b49      	ldr	r3, [pc, #292]	; (8006114 <UART_SetConfig+0x4bc>)
 8005fee:	61bb      	str	r3, [r7, #24]
        break;
 8005ff0:	e00c      	b.n	800600c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ff2:	f7fe fb97 	bl	8004724 <HAL_RCC_GetSysClockFreq>
 8005ff6:	61b8      	str	r0, [r7, #24]
        break;
 8005ff8:	e008      	b.n	800600c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ffe:	61bb      	str	r3, [r7, #24]
        break;
 8006000:	e004      	b.n	800600c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	77bb      	strb	r3, [r7, #30]
        break;
 800600a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d074      	beq.n	80060fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	005a      	lsls	r2, r3, #1
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	085b      	lsrs	r3, r3, #1
 800601c:	441a      	add	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	fbb2 f3f3 	udiv	r3, r2, r3
 8006026:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	2b0f      	cmp	r3, #15
 800602c:	d916      	bls.n	800605c <UART_SetConfig+0x404>
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006034:	d212      	bcs.n	800605c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	b29b      	uxth	r3, r3
 800603a:	f023 030f 	bic.w	r3, r3, #15
 800603e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	085b      	lsrs	r3, r3, #1
 8006044:	b29b      	uxth	r3, r3
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	b29a      	uxth	r2, r3
 800604c:	89fb      	ldrh	r3, [r7, #14]
 800604e:	4313      	orrs	r3, r2
 8006050:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	89fa      	ldrh	r2, [r7, #14]
 8006058:	60da      	str	r2, [r3, #12]
 800605a:	e04f      	b.n	80060fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	77bb      	strb	r3, [r7, #30]
 8006060:	e04c      	b.n	80060fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006062:	7ffb      	ldrb	r3, [r7, #31]
 8006064:	2b08      	cmp	r3, #8
 8006066:	d828      	bhi.n	80060ba <UART_SetConfig+0x462>
 8006068:	a201      	add	r2, pc, #4	; (adr r2, 8006070 <UART_SetConfig+0x418>)
 800606a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606e:	bf00      	nop
 8006070:	08006095 	.word	0x08006095
 8006074:	0800609d 	.word	0x0800609d
 8006078:	080060a5 	.word	0x080060a5
 800607c:	080060bb 	.word	0x080060bb
 8006080:	080060ab 	.word	0x080060ab
 8006084:	080060bb 	.word	0x080060bb
 8006088:	080060bb 	.word	0x080060bb
 800608c:	080060bb 	.word	0x080060bb
 8006090:	080060b3 	.word	0x080060b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006094:	f7fe fc2a 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 8006098:	61b8      	str	r0, [r7, #24]
        break;
 800609a:	e013      	b.n	80060c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800609c:	f7fe fc3a 	bl	8004914 <HAL_RCC_GetPCLK2Freq>
 80060a0:	61b8      	str	r0, [r7, #24]
        break;
 80060a2:	e00f      	b.n	80060c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060a4:	4b1b      	ldr	r3, [pc, #108]	; (8006114 <UART_SetConfig+0x4bc>)
 80060a6:	61bb      	str	r3, [r7, #24]
        break;
 80060a8:	e00c      	b.n	80060c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060aa:	f7fe fb3b 	bl	8004724 <HAL_RCC_GetSysClockFreq>
 80060ae:	61b8      	str	r0, [r7, #24]
        break;
 80060b0:	e008      	b.n	80060c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060b6:	61bb      	str	r3, [r7, #24]
        break;
 80060b8:	e004      	b.n	80060c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	77bb      	strb	r3, [r7, #30]
        break;
 80060c2:	bf00      	nop
    }

    if (pclk != 0U)
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d018      	beq.n	80060fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	085a      	lsrs	r2, r3, #1
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	441a      	add	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b0f      	cmp	r3, #15
 80060e2:	d909      	bls.n	80060f8 <UART_SetConfig+0x4a0>
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ea:	d205      	bcs.n	80060f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	60da      	str	r2, [r3, #12]
 80060f6:	e001      	b.n	80060fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006108:	7fbb      	ldrb	r3, [r7, #30]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3720      	adds	r7, #32
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	00f42400 	.word	0x00f42400

08006118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00a      	beq.n	8006142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00a      	beq.n	8006186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	f003 0310 	and.w	r3, r3, #16
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00a      	beq.n	80061ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01a      	beq.n	800622e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006216:	d10a      	bne.n	800622e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	605a      	str	r2, [r3, #4]
  }
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af02      	add	r7, sp, #8
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800626c:	f7fb fd72 	bl	8001d54 <HAL_GetTick>
 8006270:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0308 	and.w	r3, r3, #8
 800627c:	2b08      	cmp	r3, #8
 800627e:	d10e      	bne.n	800629e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006280:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f817 	bl	80062c2 <UART_WaitOnFlagUntilTimeout>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e00d      	b.n	80062ba <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2220      	movs	r2, #32
 80062a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2220      	movs	r2, #32
 80062a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b09c      	sub	sp, #112	; 0x70
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	60f8      	str	r0, [r7, #12]
 80062ca:	60b9      	str	r1, [r7, #8]
 80062cc:	603b      	str	r3, [r7, #0]
 80062ce:	4613      	mov	r3, r2
 80062d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062d2:	e0a5      	b.n	8006420 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062da:	f000 80a1 	beq.w	8006420 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062de:	f7fb fd39 	bl	8001d54 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d302      	bcc.n	80062f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80062ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d13e      	bne.n	8006372 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006304:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006308:	667b      	str	r3, [r7, #100]	; 0x64
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006312:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006314:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006318:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e6      	bne.n	80062f4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3308      	adds	r3, #8
 800632c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006338:	f023 0301 	bic.w	r3, r3, #1
 800633c:	663b      	str	r3, [r7, #96]	; 0x60
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3308      	adds	r3, #8
 8006344:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006346:	64ba      	str	r2, [r7, #72]	; 0x48
 8006348:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800634c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e5      	bne.n	8006326 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2220      	movs	r2, #32
 800635e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2220      	movs	r2, #32
 8006364:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e067      	b.n	8006442 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	2b00      	cmp	r3, #0
 800637e:	d04f      	beq.n	8006420 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800638a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800638e:	d147      	bne.n	8006420 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006398:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	e853 3f00 	ldrex	r3, [r3]
 80063a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b8:	637b      	str	r3, [r7, #52]	; 0x34
 80063ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063c0:	e841 2300 	strex	r3, r2, [r1]
 80063c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1e6      	bne.n	800639a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3308      	adds	r3, #8
 80063d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	e853 3f00 	ldrex	r3, [r3]
 80063da:	613b      	str	r3, [r7, #16]
   return(result);
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	f023 0301 	bic.w	r3, r3, #1
 80063e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3308      	adds	r3, #8
 80063ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063ec:	623a      	str	r2, [r7, #32]
 80063ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	69f9      	ldr	r1, [r7, #28]
 80063f2:	6a3a      	ldr	r2, [r7, #32]
 80063f4:	e841 2300 	strex	r3, r2, [r1]
 80063f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e5      	bne.n	80063cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2220      	movs	r2, #32
 8006404:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2220      	movs	r2, #32
 800640a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2220      	movs	r2, #32
 8006410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e010      	b.n	8006442 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	69da      	ldr	r2, [r3, #28]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	4013      	ands	r3, r2
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	429a      	cmp	r2, r3
 800642e:	bf0c      	ite	eq
 8006430:	2301      	moveq	r3, #1
 8006432:	2300      	movne	r3, #0
 8006434:	b2db      	uxtb	r3, r3
 8006436:	461a      	mov	r2, r3
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	429a      	cmp	r2, r3
 800643c:	f43f af4a 	beq.w	80062d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3770      	adds	r7, #112	; 0x70
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
	...

0800644c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800644c:	b084      	sub	sp, #16
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	f107 001c 	add.w	r0, r7, #28
 800645a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	2b01      	cmp	r3, #1
 8006462:	d120      	bne.n	80064a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006468:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	4b20      	ldr	r3, [pc, #128]	; (80064f8 <USB_CoreInit+0xac>)
 8006476:	4013      	ands	r3, r2
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648a:	2b01      	cmp	r3, #1
 800648c:	d105      	bne.n	800649a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fa92 	bl	80069c4 <USB_CoreReset>
 80064a0:	4603      	mov	r3, r0
 80064a2:	73fb      	strb	r3, [r7, #15]
 80064a4:	e010      	b.n	80064c8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fa86 	bl	80069c4 <USB_CoreReset>
 80064b8:	4603      	mov	r3, r0
 80064ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d10b      	bne.n	80064e6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f043 0206 	orr.w	r2, r3, #6
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f043 0220 	orr.w	r2, r3, #32
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064f2:	b004      	add	sp, #16
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	ffbdffbf 	.word	0xffbdffbf

080064fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f023 0201 	bic.w	r2, r3, #1
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	460b      	mov	r3, r1
 8006528:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d115      	bne.n	800656c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800654c:	2001      	movs	r0, #1
 800654e:	f7fb fc0d 	bl	8001d6c <HAL_Delay>
      ms++;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3301      	adds	r3, #1
 8006556:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fa25 	bl	80069a8 <USB_GetMode>
 800655e:	4603      	mov	r3, r0
 8006560:	2b01      	cmp	r3, #1
 8006562:	d01e      	beq.n	80065a2 <USB_SetCurrentMode+0x84>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b31      	cmp	r3, #49	; 0x31
 8006568:	d9f0      	bls.n	800654c <USB_SetCurrentMode+0x2e>
 800656a:	e01a      	b.n	80065a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d115      	bne.n	800659e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800657e:	2001      	movs	r0, #1
 8006580:	f7fb fbf4 	bl	8001d6c <HAL_Delay>
      ms++;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	3301      	adds	r3, #1
 8006588:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fa0c 	bl	80069a8 <USB_GetMode>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d005      	beq.n	80065a2 <USB_SetCurrentMode+0x84>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b31      	cmp	r3, #49	; 0x31
 800659a:	d9f0      	bls.n	800657e <USB_SetCurrentMode+0x60>
 800659c:	e001      	b.n	80065a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e005      	b.n	80065ae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b32      	cmp	r3, #50	; 0x32
 80065a6:	d101      	bne.n	80065ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e000      	b.n	80065ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065b8:	b084      	sub	sp, #16
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b086      	sub	sp, #24
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065d2:	2300      	movs	r3, #0
 80065d4:	613b      	str	r3, [r7, #16]
 80065d6:	e009      	b.n	80065ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	3340      	adds	r3, #64	; 0x40
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	2200      	movs	r2, #0
 80065e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	3301      	adds	r3, #1
 80065ea:	613b      	str	r3, [r7, #16]
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	2b0e      	cmp	r3, #14
 80065f0:	d9f2      	bls.n	80065d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d11c      	bne.n	8006632 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006606:	f043 0302 	orr.w	r3, r3, #2
 800660a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006610:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	e005      	b.n	800663e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006636:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006644:	461a      	mov	r2, r3
 8006646:	2300      	movs	r3, #0
 8006648:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006650:	4619      	mov	r1, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006658:	461a      	mov	r2, r3
 800665a:	680b      	ldr	r3, [r1, #0]
 800665c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006660:	2b01      	cmp	r3, #1
 8006662:	d10c      	bne.n	800667e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	2b00      	cmp	r3, #0
 8006668:	d104      	bne.n	8006674 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800666a:	2100      	movs	r1, #0
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f961 	bl	8006934 <USB_SetDevSpeed>
 8006672:	e008      	b.n	8006686 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006674:	2101      	movs	r1, #1
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f95c 	bl	8006934 <USB_SetDevSpeed>
 800667c:	e003      	b.n	8006686 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800667e:	2103      	movs	r1, #3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f957 	bl	8006934 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006686:	2110      	movs	r1, #16
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f8f3 	bl	8006874 <USB_FlushTxFifo>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f91d 	bl	80068d8 <USB_FlushRxFifo>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ae:	461a      	mov	r2, r3
 80066b0:	2300      	movs	r3, #0
 80066b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ba:	461a      	mov	r2, r3
 80066bc:	2300      	movs	r3, #0
 80066be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c6:	461a      	mov	r2, r3
 80066c8:	2300      	movs	r3, #0
 80066ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066cc:	2300      	movs	r3, #0
 80066ce:	613b      	str	r3, [r7, #16]
 80066d0:	e043      	b.n	800675a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066e8:	d118      	bne.n	800671c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	461a      	mov	r2, r3
 80066fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	e013      	b.n	800672e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006712:	461a      	mov	r2, r3
 8006714:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	e008      	b.n	800672e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4413      	add	r3, r2
 8006724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006728:	461a      	mov	r2, r3
 800672a:	2300      	movs	r3, #0
 800672c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673a:	461a      	mov	r2, r3
 800673c:	2300      	movs	r3, #0
 800673e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674c:	461a      	mov	r2, r3
 800674e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006752:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	3301      	adds	r3, #1
 8006758:	613b      	str	r3, [r7, #16]
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	429a      	cmp	r2, r3
 8006760:	d3b7      	bcc.n	80066d2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006762:	2300      	movs	r3, #0
 8006764:	613b      	str	r3, [r7, #16]
 8006766:	e043      	b.n	80067f0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800677a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800677e:	d118      	bne.n	80067b2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10a      	bne.n	800679c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006792:	461a      	mov	r2, r3
 8006794:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	e013      	b.n	80067c4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a8:	461a      	mov	r2, r3
 80067aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	e008      	b.n	80067c4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067be:	461a      	mov	r2, r3
 80067c0:	2300      	movs	r3, #0
 80067c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d0:	461a      	mov	r2, r3
 80067d2:	2300      	movs	r3, #0
 80067d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e2:	461a      	mov	r2, r3
 80067e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	3301      	adds	r3, #1
 80067ee:	613b      	str	r3, [r7, #16]
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d3b7      	bcc.n	8006768 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006806:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800680a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006818:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	2b00      	cmp	r3, #0
 800681e:	d105      	bne.n	800682c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	f043 0210 	orr.w	r2, r3, #16
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699a      	ldr	r2, [r3, #24]
 8006830:	4b0e      	ldr	r3, [pc, #56]	; (800686c <USB_DevInit+0x2b4>)
 8006832:	4313      	orrs	r3, r2
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800683a:	2b00      	cmp	r3, #0
 800683c:	d005      	beq.n	800684a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	f043 0208 	orr.w	r2, r3, #8
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800684a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800684c:	2b01      	cmp	r3, #1
 800684e:	d105      	bne.n	800685c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	699a      	ldr	r2, [r3, #24]
 8006854:	4b06      	ldr	r3, [pc, #24]	; (8006870 <USB_DevInit+0x2b8>)
 8006856:	4313      	orrs	r3, r2
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800685c:	7dfb      	ldrb	r3, [r7, #23]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006868:	b004      	add	sp, #16
 800686a:	4770      	bx	lr
 800686c:	803c3800 	.word	0x803c3800
 8006870:	40000004 	.word	0x40000004

08006874 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800687e:	2300      	movs	r3, #0
 8006880:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3301      	adds	r3, #1
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	4a12      	ldr	r2, [pc, #72]	; (80068d4 <USB_FlushTxFifo+0x60>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d901      	bls.n	8006892 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e01a      	b.n	80068c8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	daf3      	bge.n	8006882 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	019b      	lsls	r3, r3, #6
 80068a2:	f043 0220 	orr.w	r2, r3, #32
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3301      	adds	r3, #1
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	4a08      	ldr	r2, [pc, #32]	; (80068d4 <USB_FlushTxFifo+0x60>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d901      	bls.n	80068ba <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e006      	b.n	80068c8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	d0f1      	beq.n	80068aa <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	00030d40 	.word	0x00030d40

080068d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068e0:	2300      	movs	r3, #0
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3301      	adds	r3, #1
 80068e8:	60fb      	str	r3, [r7, #12]
 80068ea:	4a11      	ldr	r2, [pc, #68]	; (8006930 <USB_FlushRxFifo+0x58>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d901      	bls.n	80068f4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e017      	b.n	8006924 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	daf3      	bge.n	80068e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2210      	movs	r2, #16
 8006904:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3301      	adds	r3, #1
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	4a08      	ldr	r2, [pc, #32]	; (8006930 <USB_FlushRxFifo+0x58>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d901      	bls.n	8006916 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e006      	b.n	8006924 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	f003 0310 	and.w	r3, r3, #16
 800691e:	2b10      	cmp	r3, #16
 8006920:	d0f1      	beq.n	8006906 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	00030d40 	.word	0x00030d40

08006934 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	68f9      	ldr	r1, [r7, #12]
 8006950:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006954:	4313      	orrs	r3, r2
 8006956:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006966:	b480      	push	{r7}
 8006968:	b085      	sub	sp, #20
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006980:	f023 0303 	bic.w	r3, r3, #3
 8006984:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006994:	f043 0302 	orr.w	r3, r3, #2
 8006998:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	f003 0301 	and.w	r3, r3, #1
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	3301      	adds	r3, #1
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	4a13      	ldr	r2, [pc, #76]	; (8006a24 <USB_CoreReset+0x60>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d901      	bls.n	80069e0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e01a      	b.n	8006a16 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	daf3      	bge.n	80069d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	f043 0201 	orr.w	r2, r3, #1
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3301      	adds	r3, #1
 80069fc:	60fb      	str	r3, [r7, #12]
 80069fe:	4a09      	ldr	r2, [pc, #36]	; (8006a24 <USB_CoreReset+0x60>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d901      	bls.n	8006a08 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e006      	b.n	8006a16 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d0f1      	beq.n	80069f8 <USB_CoreReset+0x34>

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	00030d40 	.word	0x00030d40

08006a28 <gcvt>:
 8006a28:	b530      	push	{r4, r5, lr}
 8006a2a:	ed2d 8b02 	vpush	{d8}
 8006a2e:	eeb0 8a40 	vmov.f32	s16, s0
 8006a32:	eef0 8a60 	vmov.f32	s17, s1
 8006a36:	460c      	mov	r4, r1
 8006a38:	2200      	movs	r2, #0
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	2300      	movs	r3, #0
 8006a40:	ec51 0b10 	vmov	r0, r1, d0
 8006a44:	f7fa f816 	bl	8000a74 <__aeabi_dcmplt>
 8006a48:	4622      	mov	r2, r4
 8006a4a:	b118      	cbz	r0, 8006a54 <gcvt+0x2c>
 8006a4c:	232d      	movs	r3, #45	; 0x2d
 8006a4e:	f802 3b01 	strb.w	r3, [r2], #1
 8006a52:	3d01      	subs	r5, #1
 8006a54:	2300      	movs	r3, #0
 8006a56:	4809      	ldr	r0, [pc, #36]	; (8006a7c <gcvt+0x54>)
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	4629      	mov	r1, r5
 8006a5c:	2367      	movs	r3, #103	; 0x67
 8006a5e:	eeb0 0a48 	vmov.f32	s0, s16
 8006a62:	eef0 0a68 	vmov.f32	s1, s17
 8006a66:	6800      	ldr	r0, [r0, #0]
 8006a68:	f001 fa3e 	bl	8007ee8 <_gcvt>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	bf14      	ite	ne
 8006a70:	4620      	movne	r0, r4
 8006a72:	2000      	moveq	r0, #0
 8006a74:	b003      	add	sp, #12
 8006a76:	ecbd 8b02 	vpop	{d8}
 8006a7a:	bd30      	pop	{r4, r5, pc}
 8006a7c:	2000000c 	.word	0x2000000c

08006a80 <__errno>:
 8006a80:	4b01      	ldr	r3, [pc, #4]	; (8006a88 <__errno+0x8>)
 8006a82:	6818      	ldr	r0, [r3, #0]
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	2000000c 	.word	0x2000000c

08006a8c <__libc_init_array>:
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	4e0d      	ldr	r6, [pc, #52]	; (8006ac4 <__libc_init_array+0x38>)
 8006a90:	4c0d      	ldr	r4, [pc, #52]	; (8006ac8 <__libc_init_array+0x3c>)
 8006a92:	1ba4      	subs	r4, r4, r6
 8006a94:	10a4      	asrs	r4, r4, #2
 8006a96:	2500      	movs	r5, #0
 8006a98:	42a5      	cmp	r5, r4
 8006a9a:	d109      	bne.n	8006ab0 <__libc_init_array+0x24>
 8006a9c:	4e0b      	ldr	r6, [pc, #44]	; (8006acc <__libc_init_array+0x40>)
 8006a9e:	4c0c      	ldr	r4, [pc, #48]	; (8006ad0 <__libc_init_array+0x44>)
 8006aa0:	f001 fea8 	bl	80087f4 <_init>
 8006aa4:	1ba4      	subs	r4, r4, r6
 8006aa6:	10a4      	asrs	r4, r4, #2
 8006aa8:	2500      	movs	r5, #0
 8006aaa:	42a5      	cmp	r5, r4
 8006aac:	d105      	bne.n	8006aba <__libc_init_array+0x2e>
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ab4:	4798      	blx	r3
 8006ab6:	3501      	adds	r5, #1
 8006ab8:	e7ee      	b.n	8006a98 <__libc_init_array+0xc>
 8006aba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006abe:	4798      	blx	r3
 8006ac0:	3501      	adds	r5, #1
 8006ac2:	e7f2      	b.n	8006aaa <__libc_init_array+0x1e>
 8006ac4:	08008a60 	.word	0x08008a60
 8006ac8:	08008a60 	.word	0x08008a60
 8006acc:	08008a60 	.word	0x08008a60
 8006ad0:	08008a64 	.word	0x08008a64

08006ad4 <memset>:
 8006ad4:	4402      	add	r2, r0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d100      	bne.n	8006ade <memset+0xa>
 8006adc:	4770      	bx	lr
 8006ade:	f803 1b01 	strb.w	r1, [r3], #1
 8006ae2:	e7f9      	b.n	8006ad8 <memset+0x4>

08006ae4 <__cvt>:
 8006ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae8:	ec55 4b10 	vmov	r4, r5, d0
 8006aec:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006aee:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006af2:	2d00      	cmp	r5, #0
 8006af4:	460e      	mov	r6, r1
 8006af6:	4691      	mov	r9, r2
 8006af8:	4619      	mov	r1, r3
 8006afa:	bfb8      	it	lt
 8006afc:	4622      	movlt	r2, r4
 8006afe:	462b      	mov	r3, r5
 8006b00:	f027 0720 	bic.w	r7, r7, #32
 8006b04:	bfbb      	ittet	lt
 8006b06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006b0a:	461d      	movlt	r5, r3
 8006b0c:	2300      	movge	r3, #0
 8006b0e:	232d      	movlt	r3, #45	; 0x2d
 8006b10:	bfb8      	it	lt
 8006b12:	4614      	movlt	r4, r2
 8006b14:	2f46      	cmp	r7, #70	; 0x46
 8006b16:	700b      	strb	r3, [r1, #0]
 8006b18:	d004      	beq.n	8006b24 <__cvt+0x40>
 8006b1a:	2f45      	cmp	r7, #69	; 0x45
 8006b1c:	d100      	bne.n	8006b20 <__cvt+0x3c>
 8006b1e:	3601      	adds	r6, #1
 8006b20:	2102      	movs	r1, #2
 8006b22:	e000      	b.n	8006b26 <__cvt+0x42>
 8006b24:	2103      	movs	r1, #3
 8006b26:	ab03      	add	r3, sp, #12
 8006b28:	9301      	str	r3, [sp, #4]
 8006b2a:	ab02      	add	r3, sp, #8
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	4632      	mov	r2, r6
 8006b30:	4653      	mov	r3, sl
 8006b32:	ec45 4b10 	vmov	d0, r4, r5
 8006b36:	f000 fbab 	bl	8007290 <_dtoa_r>
 8006b3a:	2f47      	cmp	r7, #71	; 0x47
 8006b3c:	4680      	mov	r8, r0
 8006b3e:	d102      	bne.n	8006b46 <__cvt+0x62>
 8006b40:	f019 0f01 	tst.w	r9, #1
 8006b44:	d026      	beq.n	8006b94 <__cvt+0xb0>
 8006b46:	2f46      	cmp	r7, #70	; 0x46
 8006b48:	eb08 0906 	add.w	r9, r8, r6
 8006b4c:	d111      	bne.n	8006b72 <__cvt+0x8e>
 8006b4e:	f898 3000 	ldrb.w	r3, [r8]
 8006b52:	2b30      	cmp	r3, #48	; 0x30
 8006b54:	d10a      	bne.n	8006b6c <__cvt+0x88>
 8006b56:	2200      	movs	r2, #0
 8006b58:	2300      	movs	r3, #0
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	f7f9 ff7f 	bl	8000a60 <__aeabi_dcmpeq>
 8006b62:	b918      	cbnz	r0, 8006b6c <__cvt+0x88>
 8006b64:	f1c6 0601 	rsb	r6, r6, #1
 8006b68:	f8ca 6000 	str.w	r6, [sl]
 8006b6c:	f8da 3000 	ldr.w	r3, [sl]
 8006b70:	4499      	add	r9, r3
 8006b72:	2200      	movs	r2, #0
 8006b74:	2300      	movs	r3, #0
 8006b76:	4620      	mov	r0, r4
 8006b78:	4629      	mov	r1, r5
 8006b7a:	f7f9 ff71 	bl	8000a60 <__aeabi_dcmpeq>
 8006b7e:	b938      	cbnz	r0, 8006b90 <__cvt+0xac>
 8006b80:	2230      	movs	r2, #48	; 0x30
 8006b82:	9b03      	ldr	r3, [sp, #12]
 8006b84:	454b      	cmp	r3, r9
 8006b86:	d205      	bcs.n	8006b94 <__cvt+0xb0>
 8006b88:	1c59      	adds	r1, r3, #1
 8006b8a:	9103      	str	r1, [sp, #12]
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	e7f8      	b.n	8006b82 <__cvt+0x9e>
 8006b90:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b94:	9b03      	ldr	r3, [sp, #12]
 8006b96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b98:	eba3 0308 	sub.w	r3, r3, r8
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	b004      	add	sp, #16
 8006ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006ba6 <__exponent>:
 8006ba6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ba8:	2900      	cmp	r1, #0
 8006baa:	4604      	mov	r4, r0
 8006bac:	bfba      	itte	lt
 8006bae:	4249      	neglt	r1, r1
 8006bb0:	232d      	movlt	r3, #45	; 0x2d
 8006bb2:	232b      	movge	r3, #43	; 0x2b
 8006bb4:	2909      	cmp	r1, #9
 8006bb6:	f804 2b02 	strb.w	r2, [r4], #2
 8006bba:	7043      	strb	r3, [r0, #1]
 8006bbc:	dd20      	ble.n	8006c00 <__exponent+0x5a>
 8006bbe:	f10d 0307 	add.w	r3, sp, #7
 8006bc2:	461f      	mov	r7, r3
 8006bc4:	260a      	movs	r6, #10
 8006bc6:	fb91 f5f6 	sdiv	r5, r1, r6
 8006bca:	fb06 1115 	mls	r1, r6, r5, r1
 8006bce:	3130      	adds	r1, #48	; 0x30
 8006bd0:	2d09      	cmp	r5, #9
 8006bd2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006bd6:	f103 32ff 	add.w	r2, r3, #4294967295
 8006bda:	4629      	mov	r1, r5
 8006bdc:	dc09      	bgt.n	8006bf2 <__exponent+0x4c>
 8006bde:	3130      	adds	r1, #48	; 0x30
 8006be0:	3b02      	subs	r3, #2
 8006be2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006be6:	42bb      	cmp	r3, r7
 8006be8:	4622      	mov	r2, r4
 8006bea:	d304      	bcc.n	8006bf6 <__exponent+0x50>
 8006bec:	1a10      	subs	r0, r2, r0
 8006bee:	b003      	add	sp, #12
 8006bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	e7e7      	b.n	8006bc6 <__exponent+0x20>
 8006bf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bfa:	f804 2b01 	strb.w	r2, [r4], #1
 8006bfe:	e7f2      	b.n	8006be6 <__exponent+0x40>
 8006c00:	2330      	movs	r3, #48	; 0x30
 8006c02:	4419      	add	r1, r3
 8006c04:	7083      	strb	r3, [r0, #2]
 8006c06:	1d02      	adds	r2, r0, #4
 8006c08:	70c1      	strb	r1, [r0, #3]
 8006c0a:	e7ef      	b.n	8006bec <__exponent+0x46>

08006c0c <_printf_float>:
 8006c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c10:	b08d      	sub	sp, #52	; 0x34
 8006c12:	460c      	mov	r4, r1
 8006c14:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006c18:	4616      	mov	r6, r2
 8006c1a:	461f      	mov	r7, r3
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	f001 fa2d 	bl	800807c <_localeconv_r>
 8006c22:	6803      	ldr	r3, [r0, #0]
 8006c24:	9304      	str	r3, [sp, #16]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7f9 faee 	bl	8000208 <strlen>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	930a      	str	r3, [sp, #40]	; 0x28
 8006c30:	f8d8 3000 	ldr.w	r3, [r8]
 8006c34:	9005      	str	r0, [sp, #20]
 8006c36:	3307      	adds	r3, #7
 8006c38:	f023 0307 	bic.w	r3, r3, #7
 8006c3c:	f103 0208 	add.w	r2, r3, #8
 8006c40:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006c44:	f8d4 b000 	ldr.w	fp, [r4]
 8006c48:	f8c8 2000 	str.w	r2, [r8]
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c54:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006c58:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c5c:	9307      	str	r3, [sp, #28]
 8006c5e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c62:	f04f 32ff 	mov.w	r2, #4294967295
 8006c66:	4ba7      	ldr	r3, [pc, #668]	; (8006f04 <_printf_float+0x2f8>)
 8006c68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c6c:	f7f9 ff2a 	bl	8000ac4 <__aeabi_dcmpun>
 8006c70:	bb70      	cbnz	r0, 8006cd0 <_printf_float+0xc4>
 8006c72:	f04f 32ff 	mov.w	r2, #4294967295
 8006c76:	4ba3      	ldr	r3, [pc, #652]	; (8006f04 <_printf_float+0x2f8>)
 8006c78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c7c:	f7f9 ff04 	bl	8000a88 <__aeabi_dcmple>
 8006c80:	bb30      	cbnz	r0, 8006cd0 <_printf_float+0xc4>
 8006c82:	2200      	movs	r2, #0
 8006c84:	2300      	movs	r3, #0
 8006c86:	4640      	mov	r0, r8
 8006c88:	4649      	mov	r1, r9
 8006c8a:	f7f9 fef3 	bl	8000a74 <__aeabi_dcmplt>
 8006c8e:	b110      	cbz	r0, 8006c96 <_printf_float+0x8a>
 8006c90:	232d      	movs	r3, #45	; 0x2d
 8006c92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c96:	4a9c      	ldr	r2, [pc, #624]	; (8006f08 <_printf_float+0x2fc>)
 8006c98:	4b9c      	ldr	r3, [pc, #624]	; (8006f0c <_printf_float+0x300>)
 8006c9a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006c9e:	bf8c      	ite	hi
 8006ca0:	4690      	movhi	r8, r2
 8006ca2:	4698      	movls	r8, r3
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	f02b 0204 	bic.w	r2, fp, #4
 8006caa:	6123      	str	r3, [r4, #16]
 8006cac:	6022      	str	r2, [r4, #0]
 8006cae:	f04f 0900 	mov.w	r9, #0
 8006cb2:	9700      	str	r7, [sp, #0]
 8006cb4:	4633      	mov	r3, r6
 8006cb6:	aa0b      	add	r2, sp, #44	; 0x2c
 8006cb8:	4621      	mov	r1, r4
 8006cba:	4628      	mov	r0, r5
 8006cbc:	f000 f9e6 	bl	800708c <_printf_common>
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	f040 808d 	bne.w	8006de0 <_printf_float+0x1d4>
 8006cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cca:	b00d      	add	sp, #52	; 0x34
 8006ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd0:	4642      	mov	r2, r8
 8006cd2:	464b      	mov	r3, r9
 8006cd4:	4640      	mov	r0, r8
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	f7f9 fef4 	bl	8000ac4 <__aeabi_dcmpun>
 8006cdc:	b110      	cbz	r0, 8006ce4 <_printf_float+0xd8>
 8006cde:	4a8c      	ldr	r2, [pc, #560]	; (8006f10 <_printf_float+0x304>)
 8006ce0:	4b8c      	ldr	r3, [pc, #560]	; (8006f14 <_printf_float+0x308>)
 8006ce2:	e7da      	b.n	8006c9a <_printf_float+0x8e>
 8006ce4:	6861      	ldr	r1, [r4, #4]
 8006ce6:	1c4b      	adds	r3, r1, #1
 8006ce8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006cec:	a80a      	add	r0, sp, #40	; 0x28
 8006cee:	d13e      	bne.n	8006d6e <_printf_float+0x162>
 8006cf0:	2306      	movs	r3, #6
 8006cf2:	6063      	str	r3, [r4, #4]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006cfa:	ab09      	add	r3, sp, #36	; 0x24
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	ec49 8b10 	vmov	d0, r8, r9
 8006d02:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d06:	6022      	str	r2, [r4, #0]
 8006d08:	f8cd a004 	str.w	sl, [sp, #4]
 8006d0c:	6861      	ldr	r1, [r4, #4]
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f7ff fee8 	bl	8006ae4 <__cvt>
 8006d14:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006d18:	2b47      	cmp	r3, #71	; 0x47
 8006d1a:	4680      	mov	r8, r0
 8006d1c:	d109      	bne.n	8006d32 <_printf_float+0x126>
 8006d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d20:	1cd8      	adds	r0, r3, #3
 8006d22:	db02      	blt.n	8006d2a <_printf_float+0x11e>
 8006d24:	6862      	ldr	r2, [r4, #4]
 8006d26:	4293      	cmp	r3, r2
 8006d28:	dd47      	ble.n	8006dba <_printf_float+0x1ae>
 8006d2a:	f1aa 0a02 	sub.w	sl, sl, #2
 8006d2e:	fa5f fa8a 	uxtb.w	sl, sl
 8006d32:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006d36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d38:	d824      	bhi.n	8006d84 <_printf_float+0x178>
 8006d3a:	3901      	subs	r1, #1
 8006d3c:	4652      	mov	r2, sl
 8006d3e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d42:	9109      	str	r1, [sp, #36]	; 0x24
 8006d44:	f7ff ff2f 	bl	8006ba6 <__exponent>
 8006d48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d4a:	1813      	adds	r3, r2, r0
 8006d4c:	2a01      	cmp	r2, #1
 8006d4e:	4681      	mov	r9, r0
 8006d50:	6123      	str	r3, [r4, #16]
 8006d52:	dc02      	bgt.n	8006d5a <_printf_float+0x14e>
 8006d54:	6822      	ldr	r2, [r4, #0]
 8006d56:	07d1      	lsls	r1, r2, #31
 8006d58:	d501      	bpl.n	8006d5e <_printf_float+0x152>
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	6123      	str	r3, [r4, #16]
 8006d5e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d0a5      	beq.n	8006cb2 <_printf_float+0xa6>
 8006d66:	232d      	movs	r3, #45	; 0x2d
 8006d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d6c:	e7a1      	b.n	8006cb2 <_printf_float+0xa6>
 8006d6e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006d72:	f000 8177 	beq.w	8007064 <_printf_float+0x458>
 8006d76:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006d7a:	d1bb      	bne.n	8006cf4 <_printf_float+0xe8>
 8006d7c:	2900      	cmp	r1, #0
 8006d7e:	d1b9      	bne.n	8006cf4 <_printf_float+0xe8>
 8006d80:	2301      	movs	r3, #1
 8006d82:	e7b6      	b.n	8006cf2 <_printf_float+0xe6>
 8006d84:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006d88:	d119      	bne.n	8006dbe <_printf_float+0x1b2>
 8006d8a:	2900      	cmp	r1, #0
 8006d8c:	6863      	ldr	r3, [r4, #4]
 8006d8e:	dd0c      	ble.n	8006daa <_printf_float+0x19e>
 8006d90:	6121      	str	r1, [r4, #16]
 8006d92:	b913      	cbnz	r3, 8006d9a <_printf_float+0x18e>
 8006d94:	6822      	ldr	r2, [r4, #0]
 8006d96:	07d2      	lsls	r2, r2, #31
 8006d98:	d502      	bpl.n	8006da0 <_printf_float+0x194>
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	440b      	add	r3, r1
 8006d9e:	6123      	str	r3, [r4, #16]
 8006da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da2:	65a3      	str	r3, [r4, #88]	; 0x58
 8006da4:	f04f 0900 	mov.w	r9, #0
 8006da8:	e7d9      	b.n	8006d5e <_printf_float+0x152>
 8006daa:	b913      	cbnz	r3, 8006db2 <_printf_float+0x1a6>
 8006dac:	6822      	ldr	r2, [r4, #0]
 8006dae:	07d0      	lsls	r0, r2, #31
 8006db0:	d501      	bpl.n	8006db6 <_printf_float+0x1aa>
 8006db2:	3302      	adds	r3, #2
 8006db4:	e7f3      	b.n	8006d9e <_printf_float+0x192>
 8006db6:	2301      	movs	r3, #1
 8006db8:	e7f1      	b.n	8006d9e <_printf_float+0x192>
 8006dba:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006dbe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	db05      	blt.n	8006dd2 <_printf_float+0x1c6>
 8006dc6:	6822      	ldr	r2, [r4, #0]
 8006dc8:	6123      	str	r3, [r4, #16]
 8006dca:	07d1      	lsls	r1, r2, #31
 8006dcc:	d5e8      	bpl.n	8006da0 <_printf_float+0x194>
 8006dce:	3301      	adds	r3, #1
 8006dd0:	e7e5      	b.n	8006d9e <_printf_float+0x192>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	bfd4      	ite	le
 8006dd6:	f1c3 0302 	rsble	r3, r3, #2
 8006dda:	2301      	movgt	r3, #1
 8006ddc:	4413      	add	r3, r2
 8006dde:	e7de      	b.n	8006d9e <_printf_float+0x192>
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	055a      	lsls	r2, r3, #21
 8006de4:	d407      	bmi.n	8006df6 <_printf_float+0x1ea>
 8006de6:	6923      	ldr	r3, [r4, #16]
 8006de8:	4642      	mov	r2, r8
 8006dea:	4631      	mov	r1, r6
 8006dec:	4628      	mov	r0, r5
 8006dee:	47b8      	blx	r7
 8006df0:	3001      	adds	r0, #1
 8006df2:	d12b      	bne.n	8006e4c <_printf_float+0x240>
 8006df4:	e767      	b.n	8006cc6 <_printf_float+0xba>
 8006df6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006dfa:	f240 80dc 	bls.w	8006fb6 <_printf_float+0x3aa>
 8006dfe:	2200      	movs	r2, #0
 8006e00:	2300      	movs	r3, #0
 8006e02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e06:	f7f9 fe2b 	bl	8000a60 <__aeabi_dcmpeq>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	d033      	beq.n	8006e76 <_printf_float+0x26a>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	4a41      	ldr	r2, [pc, #260]	; (8006f18 <_printf_float+0x30c>)
 8006e12:	4631      	mov	r1, r6
 8006e14:	4628      	mov	r0, r5
 8006e16:	47b8      	blx	r7
 8006e18:	3001      	adds	r0, #1
 8006e1a:	f43f af54 	beq.w	8006cc6 <_printf_float+0xba>
 8006e1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e22:	429a      	cmp	r2, r3
 8006e24:	db02      	blt.n	8006e2c <_printf_float+0x220>
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	07d8      	lsls	r0, r3, #31
 8006e2a:	d50f      	bpl.n	8006e4c <_printf_float+0x240>
 8006e2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e30:	4631      	mov	r1, r6
 8006e32:	4628      	mov	r0, r5
 8006e34:	47b8      	blx	r7
 8006e36:	3001      	adds	r0, #1
 8006e38:	f43f af45 	beq.w	8006cc6 <_printf_float+0xba>
 8006e3c:	f04f 0800 	mov.w	r8, #0
 8006e40:	f104 091a 	add.w	r9, r4, #26
 8006e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e46:	3b01      	subs	r3, #1
 8006e48:	4543      	cmp	r3, r8
 8006e4a:	dc09      	bgt.n	8006e60 <_printf_float+0x254>
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	079b      	lsls	r3, r3, #30
 8006e50:	f100 8103 	bmi.w	800705a <_printf_float+0x44e>
 8006e54:	68e0      	ldr	r0, [r4, #12]
 8006e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e58:	4298      	cmp	r0, r3
 8006e5a:	bfb8      	it	lt
 8006e5c:	4618      	movlt	r0, r3
 8006e5e:	e734      	b.n	8006cca <_printf_float+0xbe>
 8006e60:	2301      	movs	r3, #1
 8006e62:	464a      	mov	r2, r9
 8006e64:	4631      	mov	r1, r6
 8006e66:	4628      	mov	r0, r5
 8006e68:	47b8      	blx	r7
 8006e6a:	3001      	adds	r0, #1
 8006e6c:	f43f af2b 	beq.w	8006cc6 <_printf_float+0xba>
 8006e70:	f108 0801 	add.w	r8, r8, #1
 8006e74:	e7e6      	b.n	8006e44 <_printf_float+0x238>
 8006e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	dc2b      	bgt.n	8006ed4 <_printf_float+0x2c8>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	4a26      	ldr	r2, [pc, #152]	; (8006f18 <_printf_float+0x30c>)
 8006e80:	4631      	mov	r1, r6
 8006e82:	4628      	mov	r0, r5
 8006e84:	47b8      	blx	r7
 8006e86:	3001      	adds	r0, #1
 8006e88:	f43f af1d 	beq.w	8006cc6 <_printf_float+0xba>
 8006e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8e:	b923      	cbnz	r3, 8006e9a <_printf_float+0x28e>
 8006e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e92:	b913      	cbnz	r3, 8006e9a <_printf_float+0x28e>
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	07d9      	lsls	r1, r3, #31
 8006e98:	d5d8      	bpl.n	8006e4c <_printf_float+0x240>
 8006e9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	47b8      	blx	r7
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	f43f af0e 	beq.w	8006cc6 <_printf_float+0xba>
 8006eaa:	f04f 0900 	mov.w	r9, #0
 8006eae:	f104 0a1a 	add.w	sl, r4, #26
 8006eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb4:	425b      	negs	r3, r3
 8006eb6:	454b      	cmp	r3, r9
 8006eb8:	dc01      	bgt.n	8006ebe <_printf_float+0x2b2>
 8006eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ebc:	e794      	b.n	8006de8 <_printf_float+0x1dc>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	4652      	mov	r2, sl
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	47b8      	blx	r7
 8006ec8:	3001      	adds	r0, #1
 8006eca:	f43f aefc 	beq.w	8006cc6 <_printf_float+0xba>
 8006ece:	f109 0901 	add.w	r9, r9, #1
 8006ed2:	e7ee      	b.n	8006eb2 <_printf_float+0x2a6>
 8006ed4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ed6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	bfa8      	it	ge
 8006edc:	461a      	movge	r2, r3
 8006ede:	2a00      	cmp	r2, #0
 8006ee0:	4691      	mov	r9, r2
 8006ee2:	dd07      	ble.n	8006ef4 <_printf_float+0x2e8>
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	4631      	mov	r1, r6
 8006ee8:	4642      	mov	r2, r8
 8006eea:	4628      	mov	r0, r5
 8006eec:	47b8      	blx	r7
 8006eee:	3001      	adds	r0, #1
 8006ef0:	f43f aee9 	beq.w	8006cc6 <_printf_float+0xba>
 8006ef4:	f104 031a 	add.w	r3, r4, #26
 8006ef8:	f04f 0b00 	mov.w	fp, #0
 8006efc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f00:	9306      	str	r3, [sp, #24]
 8006f02:	e015      	b.n	8006f30 <_printf_float+0x324>
 8006f04:	7fefffff 	.word	0x7fefffff
 8006f08:	08008830 	.word	0x08008830
 8006f0c:	0800882c 	.word	0x0800882c
 8006f10:	08008838 	.word	0x08008838
 8006f14:	08008834 	.word	0x08008834
 8006f18:	0800883c 	.word	0x0800883c
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	9a06      	ldr	r2, [sp, #24]
 8006f20:	4631      	mov	r1, r6
 8006f22:	4628      	mov	r0, r5
 8006f24:	47b8      	blx	r7
 8006f26:	3001      	adds	r0, #1
 8006f28:	f43f aecd 	beq.w	8006cc6 <_printf_float+0xba>
 8006f2c:	f10b 0b01 	add.w	fp, fp, #1
 8006f30:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006f34:	ebaa 0309 	sub.w	r3, sl, r9
 8006f38:	455b      	cmp	r3, fp
 8006f3a:	dcef      	bgt.n	8006f1c <_printf_float+0x310>
 8006f3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f40:	429a      	cmp	r2, r3
 8006f42:	44d0      	add	r8, sl
 8006f44:	db15      	blt.n	8006f72 <_printf_float+0x366>
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	07da      	lsls	r2, r3, #31
 8006f4a:	d412      	bmi.n	8006f72 <_printf_float+0x366>
 8006f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f50:	eba3 020a 	sub.w	r2, r3, sl
 8006f54:	eba3 0a01 	sub.w	sl, r3, r1
 8006f58:	4592      	cmp	sl, r2
 8006f5a:	bfa8      	it	ge
 8006f5c:	4692      	movge	sl, r2
 8006f5e:	f1ba 0f00 	cmp.w	sl, #0
 8006f62:	dc0e      	bgt.n	8006f82 <_printf_float+0x376>
 8006f64:	f04f 0800 	mov.w	r8, #0
 8006f68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f6c:	f104 091a 	add.w	r9, r4, #26
 8006f70:	e019      	b.n	8006fa6 <_printf_float+0x39a>
 8006f72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f76:	4631      	mov	r1, r6
 8006f78:	4628      	mov	r0, r5
 8006f7a:	47b8      	blx	r7
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d1e5      	bne.n	8006f4c <_printf_float+0x340>
 8006f80:	e6a1      	b.n	8006cc6 <_printf_float+0xba>
 8006f82:	4653      	mov	r3, sl
 8006f84:	4642      	mov	r2, r8
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b8      	blx	r7
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	d1e9      	bne.n	8006f64 <_printf_float+0x358>
 8006f90:	e699      	b.n	8006cc6 <_printf_float+0xba>
 8006f92:	2301      	movs	r3, #1
 8006f94:	464a      	mov	r2, r9
 8006f96:	4631      	mov	r1, r6
 8006f98:	4628      	mov	r0, r5
 8006f9a:	47b8      	blx	r7
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	f43f ae92 	beq.w	8006cc6 <_printf_float+0xba>
 8006fa2:	f108 0801 	add.w	r8, r8, #1
 8006fa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006faa:	1a9b      	subs	r3, r3, r2
 8006fac:	eba3 030a 	sub.w	r3, r3, sl
 8006fb0:	4543      	cmp	r3, r8
 8006fb2:	dcee      	bgt.n	8006f92 <_printf_float+0x386>
 8006fb4:	e74a      	b.n	8006e4c <_printf_float+0x240>
 8006fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fb8:	2a01      	cmp	r2, #1
 8006fba:	dc01      	bgt.n	8006fc0 <_printf_float+0x3b4>
 8006fbc:	07db      	lsls	r3, r3, #31
 8006fbe:	d53a      	bpl.n	8007036 <_printf_float+0x42a>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	4642      	mov	r2, r8
 8006fc4:	4631      	mov	r1, r6
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	47b8      	blx	r7
 8006fca:	3001      	adds	r0, #1
 8006fcc:	f43f ae7b 	beq.w	8006cc6 <_printf_float+0xba>
 8006fd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	47b8      	blx	r7
 8006fda:	3001      	adds	r0, #1
 8006fdc:	f108 0801 	add.w	r8, r8, #1
 8006fe0:	f43f ae71 	beq.w	8006cc6 <_printf_float+0xba>
 8006fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f103 3aff 	add.w	sl, r3, #4294967295
 8006fec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f7f9 fd35 	bl	8000a60 <__aeabi_dcmpeq>
 8006ff6:	b9c8      	cbnz	r0, 800702c <_printf_float+0x420>
 8006ff8:	4653      	mov	r3, sl
 8006ffa:	4642      	mov	r2, r8
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	4628      	mov	r0, r5
 8007000:	47b8      	blx	r7
 8007002:	3001      	adds	r0, #1
 8007004:	d10e      	bne.n	8007024 <_printf_float+0x418>
 8007006:	e65e      	b.n	8006cc6 <_printf_float+0xba>
 8007008:	2301      	movs	r3, #1
 800700a:	4652      	mov	r2, sl
 800700c:	4631      	mov	r1, r6
 800700e:	4628      	mov	r0, r5
 8007010:	47b8      	blx	r7
 8007012:	3001      	adds	r0, #1
 8007014:	f43f ae57 	beq.w	8006cc6 <_printf_float+0xba>
 8007018:	f108 0801 	add.w	r8, r8, #1
 800701c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800701e:	3b01      	subs	r3, #1
 8007020:	4543      	cmp	r3, r8
 8007022:	dcf1      	bgt.n	8007008 <_printf_float+0x3fc>
 8007024:	464b      	mov	r3, r9
 8007026:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800702a:	e6de      	b.n	8006dea <_printf_float+0x1de>
 800702c:	f04f 0800 	mov.w	r8, #0
 8007030:	f104 0a1a 	add.w	sl, r4, #26
 8007034:	e7f2      	b.n	800701c <_printf_float+0x410>
 8007036:	2301      	movs	r3, #1
 8007038:	e7df      	b.n	8006ffa <_printf_float+0x3ee>
 800703a:	2301      	movs	r3, #1
 800703c:	464a      	mov	r2, r9
 800703e:	4631      	mov	r1, r6
 8007040:	4628      	mov	r0, r5
 8007042:	47b8      	blx	r7
 8007044:	3001      	adds	r0, #1
 8007046:	f43f ae3e 	beq.w	8006cc6 <_printf_float+0xba>
 800704a:	f108 0801 	add.w	r8, r8, #1
 800704e:	68e3      	ldr	r3, [r4, #12]
 8007050:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007052:	1a9b      	subs	r3, r3, r2
 8007054:	4543      	cmp	r3, r8
 8007056:	dcf0      	bgt.n	800703a <_printf_float+0x42e>
 8007058:	e6fc      	b.n	8006e54 <_printf_float+0x248>
 800705a:	f04f 0800 	mov.w	r8, #0
 800705e:	f104 0919 	add.w	r9, r4, #25
 8007062:	e7f4      	b.n	800704e <_printf_float+0x442>
 8007064:	2900      	cmp	r1, #0
 8007066:	f43f ae8b 	beq.w	8006d80 <_printf_float+0x174>
 800706a:	2300      	movs	r3, #0
 800706c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007070:	ab09      	add	r3, sp, #36	; 0x24
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	ec49 8b10 	vmov	d0, r8, r9
 8007078:	6022      	str	r2, [r4, #0]
 800707a:	f8cd a004 	str.w	sl, [sp, #4]
 800707e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007082:	4628      	mov	r0, r5
 8007084:	f7ff fd2e 	bl	8006ae4 <__cvt>
 8007088:	4680      	mov	r8, r0
 800708a:	e648      	b.n	8006d1e <_printf_float+0x112>

0800708c <_printf_common>:
 800708c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007090:	4691      	mov	r9, r2
 8007092:	461f      	mov	r7, r3
 8007094:	688a      	ldr	r2, [r1, #8]
 8007096:	690b      	ldr	r3, [r1, #16]
 8007098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800709c:	4293      	cmp	r3, r2
 800709e:	bfb8      	it	lt
 80070a0:	4613      	movlt	r3, r2
 80070a2:	f8c9 3000 	str.w	r3, [r9]
 80070a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070aa:	4606      	mov	r6, r0
 80070ac:	460c      	mov	r4, r1
 80070ae:	b112      	cbz	r2, 80070b6 <_printf_common+0x2a>
 80070b0:	3301      	adds	r3, #1
 80070b2:	f8c9 3000 	str.w	r3, [r9]
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	0699      	lsls	r1, r3, #26
 80070ba:	bf42      	ittt	mi
 80070bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80070c0:	3302      	addmi	r3, #2
 80070c2:	f8c9 3000 	strmi.w	r3, [r9]
 80070c6:	6825      	ldr	r5, [r4, #0]
 80070c8:	f015 0506 	ands.w	r5, r5, #6
 80070cc:	d107      	bne.n	80070de <_printf_common+0x52>
 80070ce:	f104 0a19 	add.w	sl, r4, #25
 80070d2:	68e3      	ldr	r3, [r4, #12]
 80070d4:	f8d9 2000 	ldr.w	r2, [r9]
 80070d8:	1a9b      	subs	r3, r3, r2
 80070da:	42ab      	cmp	r3, r5
 80070dc:	dc28      	bgt.n	8007130 <_printf_common+0xa4>
 80070de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80070e2:	6822      	ldr	r2, [r4, #0]
 80070e4:	3300      	adds	r3, #0
 80070e6:	bf18      	it	ne
 80070e8:	2301      	movne	r3, #1
 80070ea:	0692      	lsls	r2, r2, #26
 80070ec:	d42d      	bmi.n	800714a <_printf_common+0xbe>
 80070ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070f2:	4639      	mov	r1, r7
 80070f4:	4630      	mov	r0, r6
 80070f6:	47c0      	blx	r8
 80070f8:	3001      	adds	r0, #1
 80070fa:	d020      	beq.n	800713e <_printf_common+0xb2>
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	68e5      	ldr	r5, [r4, #12]
 8007100:	f8d9 2000 	ldr.w	r2, [r9]
 8007104:	f003 0306 	and.w	r3, r3, #6
 8007108:	2b04      	cmp	r3, #4
 800710a:	bf08      	it	eq
 800710c:	1aad      	subeq	r5, r5, r2
 800710e:	68a3      	ldr	r3, [r4, #8]
 8007110:	6922      	ldr	r2, [r4, #16]
 8007112:	bf0c      	ite	eq
 8007114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007118:	2500      	movne	r5, #0
 800711a:	4293      	cmp	r3, r2
 800711c:	bfc4      	itt	gt
 800711e:	1a9b      	subgt	r3, r3, r2
 8007120:	18ed      	addgt	r5, r5, r3
 8007122:	f04f 0900 	mov.w	r9, #0
 8007126:	341a      	adds	r4, #26
 8007128:	454d      	cmp	r5, r9
 800712a:	d11a      	bne.n	8007162 <_printf_common+0xd6>
 800712c:	2000      	movs	r0, #0
 800712e:	e008      	b.n	8007142 <_printf_common+0xb6>
 8007130:	2301      	movs	r3, #1
 8007132:	4652      	mov	r2, sl
 8007134:	4639      	mov	r1, r7
 8007136:	4630      	mov	r0, r6
 8007138:	47c0      	blx	r8
 800713a:	3001      	adds	r0, #1
 800713c:	d103      	bne.n	8007146 <_printf_common+0xba>
 800713e:	f04f 30ff 	mov.w	r0, #4294967295
 8007142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007146:	3501      	adds	r5, #1
 8007148:	e7c3      	b.n	80070d2 <_printf_common+0x46>
 800714a:	18e1      	adds	r1, r4, r3
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	2030      	movs	r0, #48	; 0x30
 8007150:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007154:	4422      	add	r2, r4
 8007156:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800715a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800715e:	3302      	adds	r3, #2
 8007160:	e7c5      	b.n	80070ee <_printf_common+0x62>
 8007162:	2301      	movs	r3, #1
 8007164:	4622      	mov	r2, r4
 8007166:	4639      	mov	r1, r7
 8007168:	4630      	mov	r0, r6
 800716a:	47c0      	blx	r8
 800716c:	3001      	adds	r0, #1
 800716e:	d0e6      	beq.n	800713e <_printf_common+0xb2>
 8007170:	f109 0901 	add.w	r9, r9, #1
 8007174:	e7d8      	b.n	8007128 <_printf_common+0x9c>

08007176 <quorem>:
 8007176:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717a:	6903      	ldr	r3, [r0, #16]
 800717c:	690c      	ldr	r4, [r1, #16]
 800717e:	42a3      	cmp	r3, r4
 8007180:	4680      	mov	r8, r0
 8007182:	f2c0 8082 	blt.w	800728a <quorem+0x114>
 8007186:	3c01      	subs	r4, #1
 8007188:	f101 0714 	add.w	r7, r1, #20
 800718c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007190:	f100 0614 	add.w	r6, r0, #20
 8007194:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007198:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800719c:	eb06 030c 	add.w	r3, r6, ip
 80071a0:	3501      	adds	r5, #1
 80071a2:	eb07 090c 	add.w	r9, r7, ip
 80071a6:	9301      	str	r3, [sp, #4]
 80071a8:	fbb0 f5f5 	udiv	r5, r0, r5
 80071ac:	b395      	cbz	r5, 8007214 <quorem+0x9e>
 80071ae:	f04f 0a00 	mov.w	sl, #0
 80071b2:	4638      	mov	r0, r7
 80071b4:	46b6      	mov	lr, r6
 80071b6:	46d3      	mov	fp, sl
 80071b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80071bc:	b293      	uxth	r3, r2
 80071be:	fb05 a303 	mla	r3, r5, r3, sl
 80071c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	ebab 0303 	sub.w	r3, fp, r3
 80071cc:	0c12      	lsrs	r2, r2, #16
 80071ce:	f8de b000 	ldr.w	fp, [lr]
 80071d2:	fb05 a202 	mla	r2, r5, r2, sl
 80071d6:	fa13 f38b 	uxtah	r3, r3, fp
 80071da:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80071de:	fa1f fb82 	uxth.w	fp, r2
 80071e2:	f8de 2000 	ldr.w	r2, [lr]
 80071e6:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80071ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071f4:	4581      	cmp	r9, r0
 80071f6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80071fa:	f84e 3b04 	str.w	r3, [lr], #4
 80071fe:	d2db      	bcs.n	80071b8 <quorem+0x42>
 8007200:	f856 300c 	ldr.w	r3, [r6, ip]
 8007204:	b933      	cbnz	r3, 8007214 <quorem+0x9e>
 8007206:	9b01      	ldr	r3, [sp, #4]
 8007208:	3b04      	subs	r3, #4
 800720a:	429e      	cmp	r6, r3
 800720c:	461a      	mov	r2, r3
 800720e:	d330      	bcc.n	8007272 <quorem+0xfc>
 8007210:	f8c8 4010 	str.w	r4, [r8, #16]
 8007214:	4640      	mov	r0, r8
 8007216:	f001 f967 	bl	80084e8 <__mcmp>
 800721a:	2800      	cmp	r0, #0
 800721c:	db25      	blt.n	800726a <quorem+0xf4>
 800721e:	3501      	adds	r5, #1
 8007220:	4630      	mov	r0, r6
 8007222:	f04f 0c00 	mov.w	ip, #0
 8007226:	f857 2b04 	ldr.w	r2, [r7], #4
 800722a:	f8d0 e000 	ldr.w	lr, [r0]
 800722e:	b293      	uxth	r3, r2
 8007230:	ebac 0303 	sub.w	r3, ip, r3
 8007234:	0c12      	lsrs	r2, r2, #16
 8007236:	fa13 f38e 	uxtah	r3, r3, lr
 800723a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800723e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007242:	b29b      	uxth	r3, r3
 8007244:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007248:	45b9      	cmp	r9, r7
 800724a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800724e:	f840 3b04 	str.w	r3, [r0], #4
 8007252:	d2e8      	bcs.n	8007226 <quorem+0xb0>
 8007254:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007258:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800725c:	b92a      	cbnz	r2, 800726a <quorem+0xf4>
 800725e:	3b04      	subs	r3, #4
 8007260:	429e      	cmp	r6, r3
 8007262:	461a      	mov	r2, r3
 8007264:	d30b      	bcc.n	800727e <quorem+0x108>
 8007266:	f8c8 4010 	str.w	r4, [r8, #16]
 800726a:	4628      	mov	r0, r5
 800726c:	b003      	add	sp, #12
 800726e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007272:	6812      	ldr	r2, [r2, #0]
 8007274:	3b04      	subs	r3, #4
 8007276:	2a00      	cmp	r2, #0
 8007278:	d1ca      	bne.n	8007210 <quorem+0x9a>
 800727a:	3c01      	subs	r4, #1
 800727c:	e7c5      	b.n	800720a <quorem+0x94>
 800727e:	6812      	ldr	r2, [r2, #0]
 8007280:	3b04      	subs	r3, #4
 8007282:	2a00      	cmp	r2, #0
 8007284:	d1ef      	bne.n	8007266 <quorem+0xf0>
 8007286:	3c01      	subs	r4, #1
 8007288:	e7ea      	b.n	8007260 <quorem+0xea>
 800728a:	2000      	movs	r0, #0
 800728c:	e7ee      	b.n	800726c <quorem+0xf6>
	...

08007290 <_dtoa_r>:
 8007290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007294:	ec57 6b10 	vmov	r6, r7, d0
 8007298:	b097      	sub	sp, #92	; 0x5c
 800729a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800729c:	9106      	str	r1, [sp, #24]
 800729e:	4604      	mov	r4, r0
 80072a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80072a2:	9312      	str	r3, [sp, #72]	; 0x48
 80072a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80072a8:	e9cd 6700 	strd	r6, r7, [sp]
 80072ac:	b93d      	cbnz	r5, 80072be <_dtoa_r+0x2e>
 80072ae:	2010      	movs	r0, #16
 80072b0:	f000 fef2 	bl	8008098 <malloc>
 80072b4:	6260      	str	r0, [r4, #36]	; 0x24
 80072b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80072ba:	6005      	str	r5, [r0, #0]
 80072bc:	60c5      	str	r5, [r0, #12]
 80072be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072c0:	6819      	ldr	r1, [r3, #0]
 80072c2:	b151      	cbz	r1, 80072da <_dtoa_r+0x4a>
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	604a      	str	r2, [r1, #4]
 80072c8:	2301      	movs	r3, #1
 80072ca:	4093      	lsls	r3, r2
 80072cc:	608b      	str	r3, [r1, #8]
 80072ce:	4620      	mov	r0, r4
 80072d0:	f000 ff29 	bl	8008126 <_Bfree>
 80072d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072d6:	2200      	movs	r2, #0
 80072d8:	601a      	str	r2, [r3, #0]
 80072da:	1e3b      	subs	r3, r7, #0
 80072dc:	bfbb      	ittet	lt
 80072de:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80072e2:	9301      	strlt	r3, [sp, #4]
 80072e4:	2300      	movge	r3, #0
 80072e6:	2201      	movlt	r2, #1
 80072e8:	bfac      	ite	ge
 80072ea:	f8c8 3000 	strge.w	r3, [r8]
 80072ee:	f8c8 2000 	strlt.w	r2, [r8]
 80072f2:	4baf      	ldr	r3, [pc, #700]	; (80075b0 <_dtoa_r+0x320>)
 80072f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80072f8:	ea33 0308 	bics.w	r3, r3, r8
 80072fc:	d114      	bne.n	8007328 <_dtoa_r+0x98>
 80072fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007300:	f242 730f 	movw	r3, #9999	; 0x270f
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	9b00      	ldr	r3, [sp, #0]
 8007308:	b923      	cbnz	r3, 8007314 <_dtoa_r+0x84>
 800730a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800730e:	2800      	cmp	r0, #0
 8007310:	f000 8542 	beq.w	8007d98 <_dtoa_r+0xb08>
 8007314:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007316:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80075c4 <_dtoa_r+0x334>
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 8544 	beq.w	8007da8 <_dtoa_r+0xb18>
 8007320:	f10b 0303 	add.w	r3, fp, #3
 8007324:	f000 bd3e 	b.w	8007da4 <_dtoa_r+0xb14>
 8007328:	e9dd 6700 	ldrd	r6, r7, [sp]
 800732c:	2200      	movs	r2, #0
 800732e:	2300      	movs	r3, #0
 8007330:	4630      	mov	r0, r6
 8007332:	4639      	mov	r1, r7
 8007334:	f7f9 fb94 	bl	8000a60 <__aeabi_dcmpeq>
 8007338:	4681      	mov	r9, r0
 800733a:	b168      	cbz	r0, 8007358 <_dtoa_r+0xc8>
 800733c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800733e:	2301      	movs	r3, #1
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 8524 	beq.w	8007d92 <_dtoa_r+0xb02>
 800734a:	4b9a      	ldr	r3, [pc, #616]	; (80075b4 <_dtoa_r+0x324>)
 800734c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800734e:	f103 3bff 	add.w	fp, r3, #4294967295
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	f000 bd28 	b.w	8007da8 <_dtoa_r+0xb18>
 8007358:	aa14      	add	r2, sp, #80	; 0x50
 800735a:	a915      	add	r1, sp, #84	; 0x54
 800735c:	ec47 6b10 	vmov	d0, r6, r7
 8007360:	4620      	mov	r0, r4
 8007362:	f001 f938 	bl	80085d6 <__d2b>
 8007366:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800736a:	9004      	str	r0, [sp, #16]
 800736c:	2d00      	cmp	r5, #0
 800736e:	d07c      	beq.n	800746a <_dtoa_r+0x1da>
 8007370:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007374:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007378:	46b2      	mov	sl, r6
 800737a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800737e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007382:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007386:	2200      	movs	r2, #0
 8007388:	4b8b      	ldr	r3, [pc, #556]	; (80075b8 <_dtoa_r+0x328>)
 800738a:	4650      	mov	r0, sl
 800738c:	4659      	mov	r1, fp
 800738e:	f7f8 ff47 	bl	8000220 <__aeabi_dsub>
 8007392:	a381      	add	r3, pc, #516	; (adr r3, 8007598 <_dtoa_r+0x308>)
 8007394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007398:	f7f9 f8fa 	bl	8000590 <__aeabi_dmul>
 800739c:	a380      	add	r3, pc, #512	; (adr r3, 80075a0 <_dtoa_r+0x310>)
 800739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a2:	f7f8 ff3f 	bl	8000224 <__adddf3>
 80073a6:	4606      	mov	r6, r0
 80073a8:	4628      	mov	r0, r5
 80073aa:	460f      	mov	r7, r1
 80073ac:	f7f9 f886 	bl	80004bc <__aeabi_i2d>
 80073b0:	a37d      	add	r3, pc, #500	; (adr r3, 80075a8 <_dtoa_r+0x318>)
 80073b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b6:	f7f9 f8eb 	bl	8000590 <__aeabi_dmul>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	4630      	mov	r0, r6
 80073c0:	4639      	mov	r1, r7
 80073c2:	f7f8 ff2f 	bl	8000224 <__adddf3>
 80073c6:	4606      	mov	r6, r0
 80073c8:	460f      	mov	r7, r1
 80073ca:	f7f9 fb91 	bl	8000af0 <__aeabi_d2iz>
 80073ce:	2200      	movs	r2, #0
 80073d0:	4682      	mov	sl, r0
 80073d2:	2300      	movs	r3, #0
 80073d4:	4630      	mov	r0, r6
 80073d6:	4639      	mov	r1, r7
 80073d8:	f7f9 fb4c 	bl	8000a74 <__aeabi_dcmplt>
 80073dc:	b148      	cbz	r0, 80073f2 <_dtoa_r+0x162>
 80073de:	4650      	mov	r0, sl
 80073e0:	f7f9 f86c 	bl	80004bc <__aeabi_i2d>
 80073e4:	4632      	mov	r2, r6
 80073e6:	463b      	mov	r3, r7
 80073e8:	f7f9 fb3a 	bl	8000a60 <__aeabi_dcmpeq>
 80073ec:	b908      	cbnz	r0, 80073f2 <_dtoa_r+0x162>
 80073ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073f2:	f1ba 0f16 	cmp.w	sl, #22
 80073f6:	d859      	bhi.n	80074ac <_dtoa_r+0x21c>
 80073f8:	4970      	ldr	r1, [pc, #448]	; (80075bc <_dtoa_r+0x32c>)
 80073fa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80073fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007402:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007406:	f7f9 fb53 	bl	8000ab0 <__aeabi_dcmpgt>
 800740a:	2800      	cmp	r0, #0
 800740c:	d050      	beq.n	80074b0 <_dtoa_r+0x220>
 800740e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007412:	2300      	movs	r3, #0
 8007414:	930f      	str	r3, [sp, #60]	; 0x3c
 8007416:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007418:	1b5d      	subs	r5, r3, r5
 800741a:	f1b5 0801 	subs.w	r8, r5, #1
 800741e:	bf49      	itett	mi
 8007420:	f1c5 0301 	rsbmi	r3, r5, #1
 8007424:	2300      	movpl	r3, #0
 8007426:	9305      	strmi	r3, [sp, #20]
 8007428:	f04f 0800 	movmi.w	r8, #0
 800742c:	bf58      	it	pl
 800742e:	9305      	strpl	r3, [sp, #20]
 8007430:	f1ba 0f00 	cmp.w	sl, #0
 8007434:	db3e      	blt.n	80074b4 <_dtoa_r+0x224>
 8007436:	2300      	movs	r3, #0
 8007438:	44d0      	add	r8, sl
 800743a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800743e:	9307      	str	r3, [sp, #28]
 8007440:	9b06      	ldr	r3, [sp, #24]
 8007442:	2b09      	cmp	r3, #9
 8007444:	f200 8090 	bhi.w	8007568 <_dtoa_r+0x2d8>
 8007448:	2b05      	cmp	r3, #5
 800744a:	bfc4      	itt	gt
 800744c:	3b04      	subgt	r3, #4
 800744e:	9306      	strgt	r3, [sp, #24]
 8007450:	9b06      	ldr	r3, [sp, #24]
 8007452:	f1a3 0302 	sub.w	r3, r3, #2
 8007456:	bfcc      	ite	gt
 8007458:	2500      	movgt	r5, #0
 800745a:	2501      	movle	r5, #1
 800745c:	2b03      	cmp	r3, #3
 800745e:	f200 808f 	bhi.w	8007580 <_dtoa_r+0x2f0>
 8007462:	e8df f003 	tbb	[pc, r3]
 8007466:	7f7d      	.short	0x7f7d
 8007468:	7131      	.short	0x7131
 800746a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800746e:	441d      	add	r5, r3
 8007470:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007474:	2820      	cmp	r0, #32
 8007476:	dd13      	ble.n	80074a0 <_dtoa_r+0x210>
 8007478:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800747c:	9b00      	ldr	r3, [sp, #0]
 800747e:	fa08 f800 	lsl.w	r8, r8, r0
 8007482:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007486:	fa23 f000 	lsr.w	r0, r3, r0
 800748a:	ea48 0000 	orr.w	r0, r8, r0
 800748e:	f7f9 f805 	bl	800049c <__aeabi_ui2d>
 8007492:	2301      	movs	r3, #1
 8007494:	4682      	mov	sl, r0
 8007496:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800749a:	3d01      	subs	r5, #1
 800749c:	9313      	str	r3, [sp, #76]	; 0x4c
 800749e:	e772      	b.n	8007386 <_dtoa_r+0xf6>
 80074a0:	9b00      	ldr	r3, [sp, #0]
 80074a2:	f1c0 0020 	rsb	r0, r0, #32
 80074a6:	fa03 f000 	lsl.w	r0, r3, r0
 80074aa:	e7f0      	b.n	800748e <_dtoa_r+0x1fe>
 80074ac:	2301      	movs	r3, #1
 80074ae:	e7b1      	b.n	8007414 <_dtoa_r+0x184>
 80074b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80074b2:	e7b0      	b.n	8007416 <_dtoa_r+0x186>
 80074b4:	9b05      	ldr	r3, [sp, #20]
 80074b6:	eba3 030a 	sub.w	r3, r3, sl
 80074ba:	9305      	str	r3, [sp, #20]
 80074bc:	f1ca 0300 	rsb	r3, sl, #0
 80074c0:	9307      	str	r3, [sp, #28]
 80074c2:	2300      	movs	r3, #0
 80074c4:	930e      	str	r3, [sp, #56]	; 0x38
 80074c6:	e7bb      	b.n	8007440 <_dtoa_r+0x1b0>
 80074c8:	2301      	movs	r3, #1
 80074ca:	930a      	str	r3, [sp, #40]	; 0x28
 80074cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	dd59      	ble.n	8007586 <_dtoa_r+0x2f6>
 80074d2:	9302      	str	r3, [sp, #8]
 80074d4:	4699      	mov	r9, r3
 80074d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80074d8:	2200      	movs	r2, #0
 80074da:	6072      	str	r2, [r6, #4]
 80074dc:	2204      	movs	r2, #4
 80074de:	f102 0014 	add.w	r0, r2, #20
 80074e2:	4298      	cmp	r0, r3
 80074e4:	6871      	ldr	r1, [r6, #4]
 80074e6:	d953      	bls.n	8007590 <_dtoa_r+0x300>
 80074e8:	4620      	mov	r0, r4
 80074ea:	f000 fde8 	bl	80080be <_Balloc>
 80074ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074f0:	6030      	str	r0, [r6, #0]
 80074f2:	f1b9 0f0e 	cmp.w	r9, #14
 80074f6:	f8d3 b000 	ldr.w	fp, [r3]
 80074fa:	f200 80e6 	bhi.w	80076ca <_dtoa_r+0x43a>
 80074fe:	2d00      	cmp	r5, #0
 8007500:	f000 80e3 	beq.w	80076ca <_dtoa_r+0x43a>
 8007504:	ed9d 7b00 	vldr	d7, [sp]
 8007508:	f1ba 0f00 	cmp.w	sl, #0
 800750c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007510:	dd74      	ble.n	80075fc <_dtoa_r+0x36c>
 8007512:	4a2a      	ldr	r2, [pc, #168]	; (80075bc <_dtoa_r+0x32c>)
 8007514:	f00a 030f 	and.w	r3, sl, #15
 8007518:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800751c:	ed93 7b00 	vldr	d7, [r3]
 8007520:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007524:	06f0      	lsls	r0, r6, #27
 8007526:	ed8d 7b08 	vstr	d7, [sp, #32]
 800752a:	d565      	bpl.n	80075f8 <_dtoa_r+0x368>
 800752c:	4b24      	ldr	r3, [pc, #144]	; (80075c0 <_dtoa_r+0x330>)
 800752e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007532:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007536:	f7f9 f955 	bl	80007e4 <__aeabi_ddiv>
 800753a:	e9cd 0100 	strd	r0, r1, [sp]
 800753e:	f006 060f 	and.w	r6, r6, #15
 8007542:	2503      	movs	r5, #3
 8007544:	4f1e      	ldr	r7, [pc, #120]	; (80075c0 <_dtoa_r+0x330>)
 8007546:	e04c      	b.n	80075e2 <_dtoa_r+0x352>
 8007548:	2301      	movs	r3, #1
 800754a:	930a      	str	r3, [sp, #40]	; 0x28
 800754c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800754e:	4453      	add	r3, sl
 8007550:	f103 0901 	add.w	r9, r3, #1
 8007554:	9302      	str	r3, [sp, #8]
 8007556:	464b      	mov	r3, r9
 8007558:	2b01      	cmp	r3, #1
 800755a:	bfb8      	it	lt
 800755c:	2301      	movlt	r3, #1
 800755e:	e7ba      	b.n	80074d6 <_dtoa_r+0x246>
 8007560:	2300      	movs	r3, #0
 8007562:	e7b2      	b.n	80074ca <_dtoa_r+0x23a>
 8007564:	2300      	movs	r3, #0
 8007566:	e7f0      	b.n	800754a <_dtoa_r+0x2ba>
 8007568:	2501      	movs	r5, #1
 800756a:	2300      	movs	r3, #0
 800756c:	9306      	str	r3, [sp, #24]
 800756e:	950a      	str	r5, [sp, #40]	; 0x28
 8007570:	f04f 33ff 	mov.w	r3, #4294967295
 8007574:	9302      	str	r3, [sp, #8]
 8007576:	4699      	mov	r9, r3
 8007578:	2200      	movs	r2, #0
 800757a:	2312      	movs	r3, #18
 800757c:	920b      	str	r2, [sp, #44]	; 0x2c
 800757e:	e7aa      	b.n	80074d6 <_dtoa_r+0x246>
 8007580:	2301      	movs	r3, #1
 8007582:	930a      	str	r3, [sp, #40]	; 0x28
 8007584:	e7f4      	b.n	8007570 <_dtoa_r+0x2e0>
 8007586:	2301      	movs	r3, #1
 8007588:	9302      	str	r3, [sp, #8]
 800758a:	4699      	mov	r9, r3
 800758c:	461a      	mov	r2, r3
 800758e:	e7f5      	b.n	800757c <_dtoa_r+0x2ec>
 8007590:	3101      	adds	r1, #1
 8007592:	6071      	str	r1, [r6, #4]
 8007594:	0052      	lsls	r2, r2, #1
 8007596:	e7a2      	b.n	80074de <_dtoa_r+0x24e>
 8007598:	636f4361 	.word	0x636f4361
 800759c:	3fd287a7 	.word	0x3fd287a7
 80075a0:	8b60c8b3 	.word	0x8b60c8b3
 80075a4:	3fc68a28 	.word	0x3fc68a28
 80075a8:	509f79fb 	.word	0x509f79fb
 80075ac:	3fd34413 	.word	0x3fd34413
 80075b0:	7ff00000 	.word	0x7ff00000
 80075b4:	0800883d 	.word	0x0800883d
 80075b8:	3ff80000 	.word	0x3ff80000
 80075bc:	08008878 	.word	0x08008878
 80075c0:	08008850 	.word	0x08008850
 80075c4:	08008847 	.word	0x08008847
 80075c8:	07f1      	lsls	r1, r6, #31
 80075ca:	d508      	bpl.n	80075de <_dtoa_r+0x34e>
 80075cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80075d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075d4:	f7f8 ffdc 	bl	8000590 <__aeabi_dmul>
 80075d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80075dc:	3501      	adds	r5, #1
 80075de:	1076      	asrs	r6, r6, #1
 80075e0:	3708      	adds	r7, #8
 80075e2:	2e00      	cmp	r6, #0
 80075e4:	d1f0      	bne.n	80075c8 <_dtoa_r+0x338>
 80075e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80075ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075ee:	f7f9 f8f9 	bl	80007e4 <__aeabi_ddiv>
 80075f2:	e9cd 0100 	strd	r0, r1, [sp]
 80075f6:	e01a      	b.n	800762e <_dtoa_r+0x39e>
 80075f8:	2502      	movs	r5, #2
 80075fa:	e7a3      	b.n	8007544 <_dtoa_r+0x2b4>
 80075fc:	f000 80a0 	beq.w	8007740 <_dtoa_r+0x4b0>
 8007600:	f1ca 0600 	rsb	r6, sl, #0
 8007604:	4b9f      	ldr	r3, [pc, #636]	; (8007884 <_dtoa_r+0x5f4>)
 8007606:	4fa0      	ldr	r7, [pc, #640]	; (8007888 <_dtoa_r+0x5f8>)
 8007608:	f006 020f 	and.w	r2, r6, #15
 800760c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007614:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007618:	f7f8 ffba 	bl	8000590 <__aeabi_dmul>
 800761c:	e9cd 0100 	strd	r0, r1, [sp]
 8007620:	1136      	asrs	r6, r6, #4
 8007622:	2300      	movs	r3, #0
 8007624:	2502      	movs	r5, #2
 8007626:	2e00      	cmp	r6, #0
 8007628:	d17f      	bne.n	800772a <_dtoa_r+0x49a>
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1e1      	bne.n	80075f2 <_dtoa_r+0x362>
 800762e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 8087 	beq.w	8007744 <_dtoa_r+0x4b4>
 8007636:	e9dd 6700 	ldrd	r6, r7, [sp]
 800763a:	2200      	movs	r2, #0
 800763c:	4b93      	ldr	r3, [pc, #588]	; (800788c <_dtoa_r+0x5fc>)
 800763e:	4630      	mov	r0, r6
 8007640:	4639      	mov	r1, r7
 8007642:	f7f9 fa17 	bl	8000a74 <__aeabi_dcmplt>
 8007646:	2800      	cmp	r0, #0
 8007648:	d07c      	beq.n	8007744 <_dtoa_r+0x4b4>
 800764a:	f1b9 0f00 	cmp.w	r9, #0
 800764e:	d079      	beq.n	8007744 <_dtoa_r+0x4b4>
 8007650:	9b02      	ldr	r3, [sp, #8]
 8007652:	2b00      	cmp	r3, #0
 8007654:	dd35      	ble.n	80076c2 <_dtoa_r+0x432>
 8007656:	f10a 33ff 	add.w	r3, sl, #4294967295
 800765a:	9308      	str	r3, [sp, #32]
 800765c:	4639      	mov	r1, r7
 800765e:	2200      	movs	r2, #0
 8007660:	4b8b      	ldr	r3, [pc, #556]	; (8007890 <_dtoa_r+0x600>)
 8007662:	4630      	mov	r0, r6
 8007664:	f7f8 ff94 	bl	8000590 <__aeabi_dmul>
 8007668:	e9cd 0100 	strd	r0, r1, [sp]
 800766c:	9f02      	ldr	r7, [sp, #8]
 800766e:	3501      	adds	r5, #1
 8007670:	4628      	mov	r0, r5
 8007672:	f7f8 ff23 	bl	80004bc <__aeabi_i2d>
 8007676:	e9dd 2300 	ldrd	r2, r3, [sp]
 800767a:	f7f8 ff89 	bl	8000590 <__aeabi_dmul>
 800767e:	2200      	movs	r2, #0
 8007680:	4b84      	ldr	r3, [pc, #528]	; (8007894 <_dtoa_r+0x604>)
 8007682:	f7f8 fdcf 	bl	8000224 <__adddf3>
 8007686:	4605      	mov	r5, r0
 8007688:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800768c:	2f00      	cmp	r7, #0
 800768e:	d15d      	bne.n	800774c <_dtoa_r+0x4bc>
 8007690:	2200      	movs	r2, #0
 8007692:	4b81      	ldr	r3, [pc, #516]	; (8007898 <_dtoa_r+0x608>)
 8007694:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007698:	f7f8 fdc2 	bl	8000220 <__aeabi_dsub>
 800769c:	462a      	mov	r2, r5
 800769e:	4633      	mov	r3, r6
 80076a0:	e9cd 0100 	strd	r0, r1, [sp]
 80076a4:	f7f9 fa04 	bl	8000ab0 <__aeabi_dcmpgt>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	f040 8288 	bne.w	8007bbe <_dtoa_r+0x92e>
 80076ae:	462a      	mov	r2, r5
 80076b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80076b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076b8:	f7f9 f9dc 	bl	8000a74 <__aeabi_dcmplt>
 80076bc:	2800      	cmp	r0, #0
 80076be:	f040 827c 	bne.w	8007bba <_dtoa_r+0x92a>
 80076c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076c6:	e9cd 2300 	strd	r2, r3, [sp]
 80076ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f2c0 8150 	blt.w	8007972 <_dtoa_r+0x6e2>
 80076d2:	f1ba 0f0e 	cmp.w	sl, #14
 80076d6:	f300 814c 	bgt.w	8007972 <_dtoa_r+0x6e2>
 80076da:	4b6a      	ldr	r3, [pc, #424]	; (8007884 <_dtoa_r+0x5f4>)
 80076dc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80076e0:	ed93 7b00 	vldr	d7, [r3]
 80076e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80076ec:	f280 80d8 	bge.w	80078a0 <_dtoa_r+0x610>
 80076f0:	f1b9 0f00 	cmp.w	r9, #0
 80076f4:	f300 80d4 	bgt.w	80078a0 <_dtoa_r+0x610>
 80076f8:	f040 825e 	bne.w	8007bb8 <_dtoa_r+0x928>
 80076fc:	2200      	movs	r2, #0
 80076fe:	4b66      	ldr	r3, [pc, #408]	; (8007898 <_dtoa_r+0x608>)
 8007700:	ec51 0b17 	vmov	r0, r1, d7
 8007704:	f7f8 ff44 	bl	8000590 <__aeabi_dmul>
 8007708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800770c:	f7f9 f9c6 	bl	8000a9c <__aeabi_dcmpge>
 8007710:	464f      	mov	r7, r9
 8007712:	464e      	mov	r6, r9
 8007714:	2800      	cmp	r0, #0
 8007716:	f040 8234 	bne.w	8007b82 <_dtoa_r+0x8f2>
 800771a:	2331      	movs	r3, #49	; 0x31
 800771c:	f10b 0501 	add.w	r5, fp, #1
 8007720:	f88b 3000 	strb.w	r3, [fp]
 8007724:	f10a 0a01 	add.w	sl, sl, #1
 8007728:	e22f      	b.n	8007b8a <_dtoa_r+0x8fa>
 800772a:	07f2      	lsls	r2, r6, #31
 800772c:	d505      	bpl.n	800773a <_dtoa_r+0x4aa>
 800772e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007732:	f7f8 ff2d 	bl	8000590 <__aeabi_dmul>
 8007736:	3501      	adds	r5, #1
 8007738:	2301      	movs	r3, #1
 800773a:	1076      	asrs	r6, r6, #1
 800773c:	3708      	adds	r7, #8
 800773e:	e772      	b.n	8007626 <_dtoa_r+0x396>
 8007740:	2502      	movs	r5, #2
 8007742:	e774      	b.n	800762e <_dtoa_r+0x39e>
 8007744:	f8cd a020 	str.w	sl, [sp, #32]
 8007748:	464f      	mov	r7, r9
 800774a:	e791      	b.n	8007670 <_dtoa_r+0x3e0>
 800774c:	4b4d      	ldr	r3, [pc, #308]	; (8007884 <_dtoa_r+0x5f4>)
 800774e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007752:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007758:	2b00      	cmp	r3, #0
 800775a:	d047      	beq.n	80077ec <_dtoa_r+0x55c>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	2000      	movs	r0, #0
 8007762:	494e      	ldr	r1, [pc, #312]	; (800789c <_dtoa_r+0x60c>)
 8007764:	f7f9 f83e 	bl	80007e4 <__aeabi_ddiv>
 8007768:	462a      	mov	r2, r5
 800776a:	4633      	mov	r3, r6
 800776c:	f7f8 fd58 	bl	8000220 <__aeabi_dsub>
 8007770:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007774:	465d      	mov	r5, fp
 8007776:	e9dd 0100 	ldrd	r0, r1, [sp]
 800777a:	f7f9 f9b9 	bl	8000af0 <__aeabi_d2iz>
 800777e:	4606      	mov	r6, r0
 8007780:	f7f8 fe9c 	bl	80004bc <__aeabi_i2d>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	e9dd 0100 	ldrd	r0, r1, [sp]
 800778c:	f7f8 fd48 	bl	8000220 <__aeabi_dsub>
 8007790:	3630      	adds	r6, #48	; 0x30
 8007792:	f805 6b01 	strb.w	r6, [r5], #1
 8007796:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800779a:	e9cd 0100 	strd	r0, r1, [sp]
 800779e:	f7f9 f969 	bl	8000a74 <__aeabi_dcmplt>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	d163      	bne.n	800786e <_dtoa_r+0x5de>
 80077a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077aa:	2000      	movs	r0, #0
 80077ac:	4937      	ldr	r1, [pc, #220]	; (800788c <_dtoa_r+0x5fc>)
 80077ae:	f7f8 fd37 	bl	8000220 <__aeabi_dsub>
 80077b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80077b6:	f7f9 f95d 	bl	8000a74 <__aeabi_dcmplt>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	f040 80b7 	bne.w	800792e <_dtoa_r+0x69e>
 80077c0:	eba5 030b 	sub.w	r3, r5, fp
 80077c4:	429f      	cmp	r7, r3
 80077c6:	f77f af7c 	ble.w	80076c2 <_dtoa_r+0x432>
 80077ca:	2200      	movs	r2, #0
 80077cc:	4b30      	ldr	r3, [pc, #192]	; (8007890 <_dtoa_r+0x600>)
 80077ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077d2:	f7f8 fedd 	bl	8000590 <__aeabi_dmul>
 80077d6:	2200      	movs	r2, #0
 80077d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80077dc:	4b2c      	ldr	r3, [pc, #176]	; (8007890 <_dtoa_r+0x600>)
 80077de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077e2:	f7f8 fed5 	bl	8000590 <__aeabi_dmul>
 80077e6:	e9cd 0100 	strd	r0, r1, [sp]
 80077ea:	e7c4      	b.n	8007776 <_dtoa_r+0x4e6>
 80077ec:	462a      	mov	r2, r5
 80077ee:	4633      	mov	r3, r6
 80077f0:	f7f8 fece 	bl	8000590 <__aeabi_dmul>
 80077f4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80077f8:	eb0b 0507 	add.w	r5, fp, r7
 80077fc:	465e      	mov	r6, fp
 80077fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007802:	f7f9 f975 	bl	8000af0 <__aeabi_d2iz>
 8007806:	4607      	mov	r7, r0
 8007808:	f7f8 fe58 	bl	80004bc <__aeabi_i2d>
 800780c:	3730      	adds	r7, #48	; 0x30
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007816:	f7f8 fd03 	bl	8000220 <__aeabi_dsub>
 800781a:	f806 7b01 	strb.w	r7, [r6], #1
 800781e:	42ae      	cmp	r6, r5
 8007820:	e9cd 0100 	strd	r0, r1, [sp]
 8007824:	f04f 0200 	mov.w	r2, #0
 8007828:	d126      	bne.n	8007878 <_dtoa_r+0x5e8>
 800782a:	4b1c      	ldr	r3, [pc, #112]	; (800789c <_dtoa_r+0x60c>)
 800782c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007830:	f7f8 fcf8 	bl	8000224 <__adddf3>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	e9dd 0100 	ldrd	r0, r1, [sp]
 800783c:	f7f9 f938 	bl	8000ab0 <__aeabi_dcmpgt>
 8007840:	2800      	cmp	r0, #0
 8007842:	d174      	bne.n	800792e <_dtoa_r+0x69e>
 8007844:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007848:	2000      	movs	r0, #0
 800784a:	4914      	ldr	r1, [pc, #80]	; (800789c <_dtoa_r+0x60c>)
 800784c:	f7f8 fce8 	bl	8000220 <__aeabi_dsub>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007858:	f7f9 f90c 	bl	8000a74 <__aeabi_dcmplt>
 800785c:	2800      	cmp	r0, #0
 800785e:	f43f af30 	beq.w	80076c2 <_dtoa_r+0x432>
 8007862:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007866:	2b30      	cmp	r3, #48	; 0x30
 8007868:	f105 32ff 	add.w	r2, r5, #4294967295
 800786c:	d002      	beq.n	8007874 <_dtoa_r+0x5e4>
 800786e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007872:	e04a      	b.n	800790a <_dtoa_r+0x67a>
 8007874:	4615      	mov	r5, r2
 8007876:	e7f4      	b.n	8007862 <_dtoa_r+0x5d2>
 8007878:	4b05      	ldr	r3, [pc, #20]	; (8007890 <_dtoa_r+0x600>)
 800787a:	f7f8 fe89 	bl	8000590 <__aeabi_dmul>
 800787e:	e9cd 0100 	strd	r0, r1, [sp]
 8007882:	e7bc      	b.n	80077fe <_dtoa_r+0x56e>
 8007884:	08008878 	.word	0x08008878
 8007888:	08008850 	.word	0x08008850
 800788c:	3ff00000 	.word	0x3ff00000
 8007890:	40240000 	.word	0x40240000
 8007894:	401c0000 	.word	0x401c0000
 8007898:	40140000 	.word	0x40140000
 800789c:	3fe00000 	.word	0x3fe00000
 80078a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80078a4:	465d      	mov	r5, fp
 80078a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078aa:	4630      	mov	r0, r6
 80078ac:	4639      	mov	r1, r7
 80078ae:	f7f8 ff99 	bl	80007e4 <__aeabi_ddiv>
 80078b2:	f7f9 f91d 	bl	8000af0 <__aeabi_d2iz>
 80078b6:	4680      	mov	r8, r0
 80078b8:	f7f8 fe00 	bl	80004bc <__aeabi_i2d>
 80078bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078c0:	f7f8 fe66 	bl	8000590 <__aeabi_dmul>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4630      	mov	r0, r6
 80078ca:	4639      	mov	r1, r7
 80078cc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80078d0:	f7f8 fca6 	bl	8000220 <__aeabi_dsub>
 80078d4:	f805 6b01 	strb.w	r6, [r5], #1
 80078d8:	eba5 060b 	sub.w	r6, r5, fp
 80078dc:	45b1      	cmp	r9, r6
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	d139      	bne.n	8007958 <_dtoa_r+0x6c8>
 80078e4:	f7f8 fc9e 	bl	8000224 <__adddf3>
 80078e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078ec:	4606      	mov	r6, r0
 80078ee:	460f      	mov	r7, r1
 80078f0:	f7f9 f8de 	bl	8000ab0 <__aeabi_dcmpgt>
 80078f4:	b9c8      	cbnz	r0, 800792a <_dtoa_r+0x69a>
 80078f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078fa:	4630      	mov	r0, r6
 80078fc:	4639      	mov	r1, r7
 80078fe:	f7f9 f8af 	bl	8000a60 <__aeabi_dcmpeq>
 8007902:	b110      	cbz	r0, 800790a <_dtoa_r+0x67a>
 8007904:	f018 0f01 	tst.w	r8, #1
 8007908:	d10f      	bne.n	800792a <_dtoa_r+0x69a>
 800790a:	9904      	ldr	r1, [sp, #16]
 800790c:	4620      	mov	r0, r4
 800790e:	f000 fc0a 	bl	8008126 <_Bfree>
 8007912:	2300      	movs	r3, #0
 8007914:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007916:	702b      	strb	r3, [r5, #0]
 8007918:	f10a 0301 	add.w	r3, sl, #1
 800791c:	6013      	str	r3, [r2, #0]
 800791e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 8241 	beq.w	8007da8 <_dtoa_r+0xb18>
 8007926:	601d      	str	r5, [r3, #0]
 8007928:	e23e      	b.n	8007da8 <_dtoa_r+0xb18>
 800792a:	f8cd a020 	str.w	sl, [sp, #32]
 800792e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007932:	2a39      	cmp	r2, #57	; 0x39
 8007934:	f105 33ff 	add.w	r3, r5, #4294967295
 8007938:	d108      	bne.n	800794c <_dtoa_r+0x6bc>
 800793a:	459b      	cmp	fp, r3
 800793c:	d10a      	bne.n	8007954 <_dtoa_r+0x6c4>
 800793e:	9b08      	ldr	r3, [sp, #32]
 8007940:	3301      	adds	r3, #1
 8007942:	9308      	str	r3, [sp, #32]
 8007944:	2330      	movs	r3, #48	; 0x30
 8007946:	f88b 3000 	strb.w	r3, [fp]
 800794a:	465b      	mov	r3, fp
 800794c:	781a      	ldrb	r2, [r3, #0]
 800794e:	3201      	adds	r2, #1
 8007950:	701a      	strb	r2, [r3, #0]
 8007952:	e78c      	b.n	800786e <_dtoa_r+0x5de>
 8007954:	461d      	mov	r5, r3
 8007956:	e7ea      	b.n	800792e <_dtoa_r+0x69e>
 8007958:	2200      	movs	r2, #0
 800795a:	4b9b      	ldr	r3, [pc, #620]	; (8007bc8 <_dtoa_r+0x938>)
 800795c:	f7f8 fe18 	bl	8000590 <__aeabi_dmul>
 8007960:	2200      	movs	r2, #0
 8007962:	2300      	movs	r3, #0
 8007964:	4606      	mov	r6, r0
 8007966:	460f      	mov	r7, r1
 8007968:	f7f9 f87a 	bl	8000a60 <__aeabi_dcmpeq>
 800796c:	2800      	cmp	r0, #0
 800796e:	d09a      	beq.n	80078a6 <_dtoa_r+0x616>
 8007970:	e7cb      	b.n	800790a <_dtoa_r+0x67a>
 8007972:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007974:	2a00      	cmp	r2, #0
 8007976:	f000 808b 	beq.w	8007a90 <_dtoa_r+0x800>
 800797a:	9a06      	ldr	r2, [sp, #24]
 800797c:	2a01      	cmp	r2, #1
 800797e:	dc6e      	bgt.n	8007a5e <_dtoa_r+0x7ce>
 8007980:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007982:	2a00      	cmp	r2, #0
 8007984:	d067      	beq.n	8007a56 <_dtoa_r+0x7c6>
 8007986:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800798a:	9f07      	ldr	r7, [sp, #28]
 800798c:	9d05      	ldr	r5, [sp, #20]
 800798e:	9a05      	ldr	r2, [sp, #20]
 8007990:	2101      	movs	r1, #1
 8007992:	441a      	add	r2, r3
 8007994:	4620      	mov	r0, r4
 8007996:	9205      	str	r2, [sp, #20]
 8007998:	4498      	add	r8, r3
 800799a:	f000 fc64 	bl	8008266 <__i2b>
 800799e:	4606      	mov	r6, r0
 80079a0:	2d00      	cmp	r5, #0
 80079a2:	dd0c      	ble.n	80079be <_dtoa_r+0x72e>
 80079a4:	f1b8 0f00 	cmp.w	r8, #0
 80079a8:	dd09      	ble.n	80079be <_dtoa_r+0x72e>
 80079aa:	4545      	cmp	r5, r8
 80079ac:	9a05      	ldr	r2, [sp, #20]
 80079ae:	462b      	mov	r3, r5
 80079b0:	bfa8      	it	ge
 80079b2:	4643      	movge	r3, r8
 80079b4:	1ad2      	subs	r2, r2, r3
 80079b6:	9205      	str	r2, [sp, #20]
 80079b8:	1aed      	subs	r5, r5, r3
 80079ba:	eba8 0803 	sub.w	r8, r8, r3
 80079be:	9b07      	ldr	r3, [sp, #28]
 80079c0:	b1eb      	cbz	r3, 80079fe <_dtoa_r+0x76e>
 80079c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d067      	beq.n	8007a98 <_dtoa_r+0x808>
 80079c8:	b18f      	cbz	r7, 80079ee <_dtoa_r+0x75e>
 80079ca:	4631      	mov	r1, r6
 80079cc:	463a      	mov	r2, r7
 80079ce:	4620      	mov	r0, r4
 80079d0:	f000 fce8 	bl	80083a4 <__pow5mult>
 80079d4:	9a04      	ldr	r2, [sp, #16]
 80079d6:	4601      	mov	r1, r0
 80079d8:	4606      	mov	r6, r0
 80079da:	4620      	mov	r0, r4
 80079dc:	f000 fc4c 	bl	8008278 <__multiply>
 80079e0:	9904      	ldr	r1, [sp, #16]
 80079e2:	9008      	str	r0, [sp, #32]
 80079e4:	4620      	mov	r0, r4
 80079e6:	f000 fb9e 	bl	8008126 <_Bfree>
 80079ea:	9b08      	ldr	r3, [sp, #32]
 80079ec:	9304      	str	r3, [sp, #16]
 80079ee:	9b07      	ldr	r3, [sp, #28]
 80079f0:	1bda      	subs	r2, r3, r7
 80079f2:	d004      	beq.n	80079fe <_dtoa_r+0x76e>
 80079f4:	9904      	ldr	r1, [sp, #16]
 80079f6:	4620      	mov	r0, r4
 80079f8:	f000 fcd4 	bl	80083a4 <__pow5mult>
 80079fc:	9004      	str	r0, [sp, #16]
 80079fe:	2101      	movs	r1, #1
 8007a00:	4620      	mov	r0, r4
 8007a02:	f000 fc30 	bl	8008266 <__i2b>
 8007a06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a08:	4607      	mov	r7, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 81d0 	beq.w	8007db0 <_dtoa_r+0xb20>
 8007a10:	461a      	mov	r2, r3
 8007a12:	4601      	mov	r1, r0
 8007a14:	4620      	mov	r0, r4
 8007a16:	f000 fcc5 	bl	80083a4 <__pow5mult>
 8007a1a:	9b06      	ldr	r3, [sp, #24]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	4607      	mov	r7, r0
 8007a20:	dc40      	bgt.n	8007aa4 <_dtoa_r+0x814>
 8007a22:	9b00      	ldr	r3, [sp, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d139      	bne.n	8007a9c <_dtoa_r+0x80c>
 8007a28:	9b01      	ldr	r3, [sp, #4]
 8007a2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d136      	bne.n	8007aa0 <_dtoa_r+0x810>
 8007a32:	9b01      	ldr	r3, [sp, #4]
 8007a34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a38:	0d1b      	lsrs	r3, r3, #20
 8007a3a:	051b      	lsls	r3, r3, #20
 8007a3c:	b12b      	cbz	r3, 8007a4a <_dtoa_r+0x7ba>
 8007a3e:	9b05      	ldr	r3, [sp, #20]
 8007a40:	3301      	adds	r3, #1
 8007a42:	9305      	str	r3, [sp, #20]
 8007a44:	f108 0801 	add.w	r8, r8, #1
 8007a48:	2301      	movs	r3, #1
 8007a4a:	9307      	str	r3, [sp, #28]
 8007a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d12a      	bne.n	8007aa8 <_dtoa_r+0x818>
 8007a52:	2001      	movs	r0, #1
 8007a54:	e030      	b.n	8007ab8 <_dtoa_r+0x828>
 8007a56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a58:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a5c:	e795      	b.n	800798a <_dtoa_r+0x6fa>
 8007a5e:	9b07      	ldr	r3, [sp, #28]
 8007a60:	f109 37ff 	add.w	r7, r9, #4294967295
 8007a64:	42bb      	cmp	r3, r7
 8007a66:	bfbf      	itttt	lt
 8007a68:	9b07      	ldrlt	r3, [sp, #28]
 8007a6a:	9707      	strlt	r7, [sp, #28]
 8007a6c:	1afa      	sublt	r2, r7, r3
 8007a6e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007a70:	bfbb      	ittet	lt
 8007a72:	189b      	addlt	r3, r3, r2
 8007a74:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007a76:	1bdf      	subge	r7, r3, r7
 8007a78:	2700      	movlt	r7, #0
 8007a7a:	f1b9 0f00 	cmp.w	r9, #0
 8007a7e:	bfb5      	itete	lt
 8007a80:	9b05      	ldrlt	r3, [sp, #20]
 8007a82:	9d05      	ldrge	r5, [sp, #20]
 8007a84:	eba3 0509 	sublt.w	r5, r3, r9
 8007a88:	464b      	movge	r3, r9
 8007a8a:	bfb8      	it	lt
 8007a8c:	2300      	movlt	r3, #0
 8007a8e:	e77e      	b.n	800798e <_dtoa_r+0x6fe>
 8007a90:	9f07      	ldr	r7, [sp, #28]
 8007a92:	9d05      	ldr	r5, [sp, #20]
 8007a94:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007a96:	e783      	b.n	80079a0 <_dtoa_r+0x710>
 8007a98:	9a07      	ldr	r2, [sp, #28]
 8007a9a:	e7ab      	b.n	80079f4 <_dtoa_r+0x764>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	e7d4      	b.n	8007a4a <_dtoa_r+0x7ba>
 8007aa0:	9b00      	ldr	r3, [sp, #0]
 8007aa2:	e7d2      	b.n	8007a4a <_dtoa_r+0x7ba>
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	9307      	str	r3, [sp, #28]
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007aae:	6918      	ldr	r0, [r3, #16]
 8007ab0:	f000 fb8b 	bl	80081ca <__hi0bits>
 8007ab4:	f1c0 0020 	rsb	r0, r0, #32
 8007ab8:	4440      	add	r0, r8
 8007aba:	f010 001f 	ands.w	r0, r0, #31
 8007abe:	d047      	beq.n	8007b50 <_dtoa_r+0x8c0>
 8007ac0:	f1c0 0320 	rsb	r3, r0, #32
 8007ac4:	2b04      	cmp	r3, #4
 8007ac6:	dd3b      	ble.n	8007b40 <_dtoa_r+0x8b0>
 8007ac8:	9b05      	ldr	r3, [sp, #20]
 8007aca:	f1c0 001c 	rsb	r0, r0, #28
 8007ace:	4403      	add	r3, r0
 8007ad0:	9305      	str	r3, [sp, #20]
 8007ad2:	4405      	add	r5, r0
 8007ad4:	4480      	add	r8, r0
 8007ad6:	9b05      	ldr	r3, [sp, #20]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	dd05      	ble.n	8007ae8 <_dtoa_r+0x858>
 8007adc:	461a      	mov	r2, r3
 8007ade:	9904      	ldr	r1, [sp, #16]
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f000 fcad 	bl	8008440 <__lshift>
 8007ae6:	9004      	str	r0, [sp, #16]
 8007ae8:	f1b8 0f00 	cmp.w	r8, #0
 8007aec:	dd05      	ble.n	8007afa <_dtoa_r+0x86a>
 8007aee:	4639      	mov	r1, r7
 8007af0:	4642      	mov	r2, r8
 8007af2:	4620      	mov	r0, r4
 8007af4:	f000 fca4 	bl	8008440 <__lshift>
 8007af8:	4607      	mov	r7, r0
 8007afa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007afc:	b353      	cbz	r3, 8007b54 <_dtoa_r+0x8c4>
 8007afe:	4639      	mov	r1, r7
 8007b00:	9804      	ldr	r0, [sp, #16]
 8007b02:	f000 fcf1 	bl	80084e8 <__mcmp>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	da24      	bge.n	8007b54 <_dtoa_r+0x8c4>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	220a      	movs	r2, #10
 8007b0e:	9904      	ldr	r1, [sp, #16]
 8007b10:	4620      	mov	r0, r4
 8007b12:	f000 fb1f 	bl	8008154 <__multadd>
 8007b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b18:	9004      	str	r0, [sp, #16]
 8007b1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 814d 	beq.w	8007dbe <_dtoa_r+0xb2e>
 8007b24:	2300      	movs	r3, #0
 8007b26:	4631      	mov	r1, r6
 8007b28:	220a      	movs	r2, #10
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 fb12 	bl	8008154 <__multadd>
 8007b30:	9b02      	ldr	r3, [sp, #8]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	4606      	mov	r6, r0
 8007b36:	dc4f      	bgt.n	8007bd8 <_dtoa_r+0x948>
 8007b38:	9b06      	ldr	r3, [sp, #24]
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	dd4c      	ble.n	8007bd8 <_dtoa_r+0x948>
 8007b3e:	e011      	b.n	8007b64 <_dtoa_r+0x8d4>
 8007b40:	d0c9      	beq.n	8007ad6 <_dtoa_r+0x846>
 8007b42:	9a05      	ldr	r2, [sp, #20]
 8007b44:	331c      	adds	r3, #28
 8007b46:	441a      	add	r2, r3
 8007b48:	9205      	str	r2, [sp, #20]
 8007b4a:	441d      	add	r5, r3
 8007b4c:	4498      	add	r8, r3
 8007b4e:	e7c2      	b.n	8007ad6 <_dtoa_r+0x846>
 8007b50:	4603      	mov	r3, r0
 8007b52:	e7f6      	b.n	8007b42 <_dtoa_r+0x8b2>
 8007b54:	f1b9 0f00 	cmp.w	r9, #0
 8007b58:	dc38      	bgt.n	8007bcc <_dtoa_r+0x93c>
 8007b5a:	9b06      	ldr	r3, [sp, #24]
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	dd35      	ble.n	8007bcc <_dtoa_r+0x93c>
 8007b60:	f8cd 9008 	str.w	r9, [sp, #8]
 8007b64:	9b02      	ldr	r3, [sp, #8]
 8007b66:	b963      	cbnz	r3, 8007b82 <_dtoa_r+0x8f2>
 8007b68:	4639      	mov	r1, r7
 8007b6a:	2205      	movs	r2, #5
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f000 faf1 	bl	8008154 <__multadd>
 8007b72:	4601      	mov	r1, r0
 8007b74:	4607      	mov	r7, r0
 8007b76:	9804      	ldr	r0, [sp, #16]
 8007b78:	f000 fcb6 	bl	80084e8 <__mcmp>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	f73f adcc 	bgt.w	800771a <_dtoa_r+0x48a>
 8007b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b84:	465d      	mov	r5, fp
 8007b86:	ea6f 0a03 	mvn.w	sl, r3
 8007b8a:	f04f 0900 	mov.w	r9, #0
 8007b8e:	4639      	mov	r1, r7
 8007b90:	4620      	mov	r0, r4
 8007b92:	f000 fac8 	bl	8008126 <_Bfree>
 8007b96:	2e00      	cmp	r6, #0
 8007b98:	f43f aeb7 	beq.w	800790a <_dtoa_r+0x67a>
 8007b9c:	f1b9 0f00 	cmp.w	r9, #0
 8007ba0:	d005      	beq.n	8007bae <_dtoa_r+0x91e>
 8007ba2:	45b1      	cmp	r9, r6
 8007ba4:	d003      	beq.n	8007bae <_dtoa_r+0x91e>
 8007ba6:	4649      	mov	r1, r9
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f000 fabc 	bl	8008126 <_Bfree>
 8007bae:	4631      	mov	r1, r6
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f000 fab8 	bl	8008126 <_Bfree>
 8007bb6:	e6a8      	b.n	800790a <_dtoa_r+0x67a>
 8007bb8:	2700      	movs	r7, #0
 8007bba:	463e      	mov	r6, r7
 8007bbc:	e7e1      	b.n	8007b82 <_dtoa_r+0x8f2>
 8007bbe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007bc2:	463e      	mov	r6, r7
 8007bc4:	e5a9      	b.n	800771a <_dtoa_r+0x48a>
 8007bc6:	bf00      	nop
 8007bc8:	40240000 	.word	0x40240000
 8007bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bce:	f8cd 9008 	str.w	r9, [sp, #8]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 80fa 	beq.w	8007dcc <_dtoa_r+0xb3c>
 8007bd8:	2d00      	cmp	r5, #0
 8007bda:	dd05      	ble.n	8007be8 <_dtoa_r+0x958>
 8007bdc:	4631      	mov	r1, r6
 8007bde:	462a      	mov	r2, r5
 8007be0:	4620      	mov	r0, r4
 8007be2:	f000 fc2d 	bl	8008440 <__lshift>
 8007be6:	4606      	mov	r6, r0
 8007be8:	9b07      	ldr	r3, [sp, #28]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d04c      	beq.n	8007c88 <_dtoa_r+0x9f8>
 8007bee:	6871      	ldr	r1, [r6, #4]
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f000 fa64 	bl	80080be <_Balloc>
 8007bf6:	6932      	ldr	r2, [r6, #16]
 8007bf8:	3202      	adds	r2, #2
 8007bfa:	4605      	mov	r5, r0
 8007bfc:	0092      	lsls	r2, r2, #2
 8007bfe:	f106 010c 	add.w	r1, r6, #12
 8007c02:	300c      	adds	r0, #12
 8007c04:	f000 fa50 	bl	80080a8 <memcpy>
 8007c08:	2201      	movs	r2, #1
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f000 fc17 	bl	8008440 <__lshift>
 8007c12:	9b00      	ldr	r3, [sp, #0]
 8007c14:	f8cd b014 	str.w	fp, [sp, #20]
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	46b1      	mov	r9, r6
 8007c1e:	9307      	str	r3, [sp, #28]
 8007c20:	4606      	mov	r6, r0
 8007c22:	4639      	mov	r1, r7
 8007c24:	9804      	ldr	r0, [sp, #16]
 8007c26:	f7ff faa6 	bl	8007176 <quorem>
 8007c2a:	4649      	mov	r1, r9
 8007c2c:	4605      	mov	r5, r0
 8007c2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007c32:	9804      	ldr	r0, [sp, #16]
 8007c34:	f000 fc58 	bl	80084e8 <__mcmp>
 8007c38:	4632      	mov	r2, r6
 8007c3a:	9000      	str	r0, [sp, #0]
 8007c3c:	4639      	mov	r1, r7
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f000 fc6c 	bl	800851c <__mdiff>
 8007c44:	68c3      	ldr	r3, [r0, #12]
 8007c46:	4602      	mov	r2, r0
 8007c48:	bb03      	cbnz	r3, 8007c8c <_dtoa_r+0x9fc>
 8007c4a:	4601      	mov	r1, r0
 8007c4c:	9008      	str	r0, [sp, #32]
 8007c4e:	9804      	ldr	r0, [sp, #16]
 8007c50:	f000 fc4a 	bl	80084e8 <__mcmp>
 8007c54:	9a08      	ldr	r2, [sp, #32]
 8007c56:	4603      	mov	r3, r0
 8007c58:	4611      	mov	r1, r2
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	9308      	str	r3, [sp, #32]
 8007c5e:	f000 fa62 	bl	8008126 <_Bfree>
 8007c62:	9b08      	ldr	r3, [sp, #32]
 8007c64:	b9a3      	cbnz	r3, 8007c90 <_dtoa_r+0xa00>
 8007c66:	9a06      	ldr	r2, [sp, #24]
 8007c68:	b992      	cbnz	r2, 8007c90 <_dtoa_r+0xa00>
 8007c6a:	9a07      	ldr	r2, [sp, #28]
 8007c6c:	b982      	cbnz	r2, 8007c90 <_dtoa_r+0xa00>
 8007c6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007c72:	d029      	beq.n	8007cc8 <_dtoa_r+0xa38>
 8007c74:	9b00      	ldr	r3, [sp, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	dd01      	ble.n	8007c7e <_dtoa_r+0x9ee>
 8007c7a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007c7e:	9b05      	ldr	r3, [sp, #20]
 8007c80:	1c5d      	adds	r5, r3, #1
 8007c82:	f883 8000 	strb.w	r8, [r3]
 8007c86:	e782      	b.n	8007b8e <_dtoa_r+0x8fe>
 8007c88:	4630      	mov	r0, r6
 8007c8a:	e7c2      	b.n	8007c12 <_dtoa_r+0x982>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e7e3      	b.n	8007c58 <_dtoa_r+0x9c8>
 8007c90:	9a00      	ldr	r2, [sp, #0]
 8007c92:	2a00      	cmp	r2, #0
 8007c94:	db04      	blt.n	8007ca0 <_dtoa_r+0xa10>
 8007c96:	d125      	bne.n	8007ce4 <_dtoa_r+0xa54>
 8007c98:	9a06      	ldr	r2, [sp, #24]
 8007c9a:	bb1a      	cbnz	r2, 8007ce4 <_dtoa_r+0xa54>
 8007c9c:	9a07      	ldr	r2, [sp, #28]
 8007c9e:	bb0a      	cbnz	r2, 8007ce4 <_dtoa_r+0xa54>
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	ddec      	ble.n	8007c7e <_dtoa_r+0x9ee>
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	9904      	ldr	r1, [sp, #16]
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f000 fbc9 	bl	8008440 <__lshift>
 8007cae:	4639      	mov	r1, r7
 8007cb0:	9004      	str	r0, [sp, #16]
 8007cb2:	f000 fc19 	bl	80084e8 <__mcmp>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	dc03      	bgt.n	8007cc2 <_dtoa_r+0xa32>
 8007cba:	d1e0      	bne.n	8007c7e <_dtoa_r+0x9ee>
 8007cbc:	f018 0f01 	tst.w	r8, #1
 8007cc0:	d0dd      	beq.n	8007c7e <_dtoa_r+0x9ee>
 8007cc2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007cc6:	d1d8      	bne.n	8007c7a <_dtoa_r+0x9ea>
 8007cc8:	9b05      	ldr	r3, [sp, #20]
 8007cca:	9a05      	ldr	r2, [sp, #20]
 8007ccc:	1c5d      	adds	r5, r3, #1
 8007cce:	2339      	movs	r3, #57	; 0x39
 8007cd0:	7013      	strb	r3, [r2, #0]
 8007cd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007cd6:	2b39      	cmp	r3, #57	; 0x39
 8007cd8:	f105 32ff 	add.w	r2, r5, #4294967295
 8007cdc:	d04f      	beq.n	8007d7e <_dtoa_r+0xaee>
 8007cde:	3301      	adds	r3, #1
 8007ce0:	7013      	strb	r3, [r2, #0]
 8007ce2:	e754      	b.n	8007b8e <_dtoa_r+0x8fe>
 8007ce4:	9a05      	ldr	r2, [sp, #20]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f102 0501 	add.w	r5, r2, #1
 8007cec:	dd06      	ble.n	8007cfc <_dtoa_r+0xa6c>
 8007cee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007cf2:	d0e9      	beq.n	8007cc8 <_dtoa_r+0xa38>
 8007cf4:	f108 0801 	add.w	r8, r8, #1
 8007cf8:	9b05      	ldr	r3, [sp, #20]
 8007cfa:	e7c2      	b.n	8007c82 <_dtoa_r+0x9f2>
 8007cfc:	9a02      	ldr	r2, [sp, #8]
 8007cfe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007d02:	eba5 030b 	sub.w	r3, r5, fp
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d021      	beq.n	8007d4e <_dtoa_r+0xabe>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	220a      	movs	r2, #10
 8007d0e:	9904      	ldr	r1, [sp, #16]
 8007d10:	4620      	mov	r0, r4
 8007d12:	f000 fa1f 	bl	8008154 <__multadd>
 8007d16:	45b1      	cmp	r9, r6
 8007d18:	9004      	str	r0, [sp, #16]
 8007d1a:	f04f 0300 	mov.w	r3, #0
 8007d1e:	f04f 020a 	mov.w	r2, #10
 8007d22:	4649      	mov	r1, r9
 8007d24:	4620      	mov	r0, r4
 8007d26:	d105      	bne.n	8007d34 <_dtoa_r+0xaa4>
 8007d28:	f000 fa14 	bl	8008154 <__multadd>
 8007d2c:	4681      	mov	r9, r0
 8007d2e:	4606      	mov	r6, r0
 8007d30:	9505      	str	r5, [sp, #20]
 8007d32:	e776      	b.n	8007c22 <_dtoa_r+0x992>
 8007d34:	f000 fa0e 	bl	8008154 <__multadd>
 8007d38:	4631      	mov	r1, r6
 8007d3a:	4681      	mov	r9, r0
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	220a      	movs	r2, #10
 8007d40:	4620      	mov	r0, r4
 8007d42:	f000 fa07 	bl	8008154 <__multadd>
 8007d46:	4606      	mov	r6, r0
 8007d48:	e7f2      	b.n	8007d30 <_dtoa_r+0xaa0>
 8007d4a:	f04f 0900 	mov.w	r9, #0
 8007d4e:	2201      	movs	r2, #1
 8007d50:	9904      	ldr	r1, [sp, #16]
 8007d52:	4620      	mov	r0, r4
 8007d54:	f000 fb74 	bl	8008440 <__lshift>
 8007d58:	4639      	mov	r1, r7
 8007d5a:	9004      	str	r0, [sp, #16]
 8007d5c:	f000 fbc4 	bl	80084e8 <__mcmp>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	dcb6      	bgt.n	8007cd2 <_dtoa_r+0xa42>
 8007d64:	d102      	bne.n	8007d6c <_dtoa_r+0xadc>
 8007d66:	f018 0f01 	tst.w	r8, #1
 8007d6a:	d1b2      	bne.n	8007cd2 <_dtoa_r+0xa42>
 8007d6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d70:	2b30      	cmp	r3, #48	; 0x30
 8007d72:	f105 32ff 	add.w	r2, r5, #4294967295
 8007d76:	f47f af0a 	bne.w	8007b8e <_dtoa_r+0x8fe>
 8007d7a:	4615      	mov	r5, r2
 8007d7c:	e7f6      	b.n	8007d6c <_dtoa_r+0xadc>
 8007d7e:	4593      	cmp	fp, r2
 8007d80:	d105      	bne.n	8007d8e <_dtoa_r+0xafe>
 8007d82:	2331      	movs	r3, #49	; 0x31
 8007d84:	f10a 0a01 	add.w	sl, sl, #1
 8007d88:	f88b 3000 	strb.w	r3, [fp]
 8007d8c:	e6ff      	b.n	8007b8e <_dtoa_r+0x8fe>
 8007d8e:	4615      	mov	r5, r2
 8007d90:	e79f      	b.n	8007cd2 <_dtoa_r+0xa42>
 8007d92:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007df8 <_dtoa_r+0xb68>
 8007d96:	e007      	b.n	8007da8 <_dtoa_r+0xb18>
 8007d98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d9a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007dfc <_dtoa_r+0xb6c>
 8007d9e:	b11b      	cbz	r3, 8007da8 <_dtoa_r+0xb18>
 8007da0:	f10b 0308 	add.w	r3, fp, #8
 8007da4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007da6:	6013      	str	r3, [r2, #0]
 8007da8:	4658      	mov	r0, fp
 8007daa:	b017      	add	sp, #92	; 0x5c
 8007dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db0:	9b06      	ldr	r3, [sp, #24]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	f77f ae35 	ble.w	8007a22 <_dtoa_r+0x792>
 8007db8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dba:	9307      	str	r3, [sp, #28]
 8007dbc:	e649      	b.n	8007a52 <_dtoa_r+0x7c2>
 8007dbe:	9b02      	ldr	r3, [sp, #8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	dc03      	bgt.n	8007dcc <_dtoa_r+0xb3c>
 8007dc4:	9b06      	ldr	r3, [sp, #24]
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	f73f aecc 	bgt.w	8007b64 <_dtoa_r+0x8d4>
 8007dcc:	465d      	mov	r5, fp
 8007dce:	4639      	mov	r1, r7
 8007dd0:	9804      	ldr	r0, [sp, #16]
 8007dd2:	f7ff f9d0 	bl	8007176 <quorem>
 8007dd6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007dda:	f805 8b01 	strb.w	r8, [r5], #1
 8007dde:	9a02      	ldr	r2, [sp, #8]
 8007de0:	eba5 030b 	sub.w	r3, r5, fp
 8007de4:	429a      	cmp	r2, r3
 8007de6:	ddb0      	ble.n	8007d4a <_dtoa_r+0xaba>
 8007de8:	2300      	movs	r3, #0
 8007dea:	220a      	movs	r2, #10
 8007dec:	9904      	ldr	r1, [sp, #16]
 8007dee:	4620      	mov	r0, r4
 8007df0:	f000 f9b0 	bl	8008154 <__multadd>
 8007df4:	9004      	str	r0, [sp, #16]
 8007df6:	e7ea      	b.n	8007dce <_dtoa_r+0xb3e>
 8007df8:	0800883c 	.word	0x0800883c
 8007dfc:	0800883e 	.word	0x0800883e

08007e00 <print_e>:
 8007e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e02:	b087      	sub	sp, #28
 8007e04:	ec43 2b10 	vmov	d0, r2, r3
 8007e08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007e0a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8007e0e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007e10:	ab04      	add	r3, sp, #16
 8007e12:	9301      	str	r3, [sp, #4]
 8007e14:	ab03      	add	r3, sp, #12
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	460f      	mov	r7, r1
 8007e1a:	ab05      	add	r3, sp, #20
 8007e1c:	2102      	movs	r1, #2
 8007e1e:	1c62      	adds	r2, r4, #1
 8007e20:	f7ff fa36 	bl	8007290 <_dtoa_r>
 8007e24:	4601      	mov	r1, r0
 8007e26:	9805      	ldr	r0, [sp, #20]
 8007e28:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e2c:	4298      	cmp	r0, r3
 8007e2e:	d104      	bne.n	8007e3a <print_e+0x3a>
 8007e30:	4638      	mov	r0, r7
 8007e32:	f000 fcb5 	bl	80087a0 <strcpy>
 8007e36:	b007      	add	sp, #28
 8007e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e3a:	780b      	ldrb	r3, [r1, #0]
 8007e3c:	703b      	strb	r3, [r7, #0]
 8007e3e:	2d00      	cmp	r5, #0
 8007e40:	d143      	bne.n	8007eca <print_e+0xca>
 8007e42:	2c00      	cmp	r4, #0
 8007e44:	d141      	bne.n	8007eca <print_e+0xca>
 8007e46:	1c7b      	adds	r3, r7, #1
 8007e48:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007e4c:	b10a      	cbz	r2, 8007e52 <print_e+0x52>
 8007e4e:	2c00      	cmp	r4, #0
 8007e50:	dc3f      	bgt.n	8007ed2 <print_e+0xd2>
 8007e52:	2e67      	cmp	r6, #103	; 0x67
 8007e54:	d044      	beq.n	8007ee0 <print_e+0xe0>
 8007e56:	2e47      	cmp	r6, #71	; 0x47
 8007e58:	d044      	beq.n	8007ee4 <print_e+0xe4>
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	191d      	adds	r5, r3, r4
 8007e5e:	2730      	movs	r7, #48	; 0x30
 8007e60:	1aa9      	subs	r1, r5, r2
 8007e62:	2900      	cmp	r1, #0
 8007e64:	dc39      	bgt.n	8007eda <print_e+0xda>
 8007e66:	2c00      	cmp	r4, #0
 8007e68:	bfa8      	it	ge
 8007e6a:	191b      	addge	r3, r3, r4
 8007e6c:	1e41      	subs	r1, r0, #1
 8007e6e:	2900      	cmp	r1, #0
 8007e70:	bfb8      	it	lt
 8007e72:	f1c0 0001 	rsblt	r0, r0, #1
 8007e76:	9105      	str	r1, [sp, #20]
 8007e78:	bfb8      	it	lt
 8007e7a:	9005      	strlt	r0, [sp, #20]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	9805      	ldr	r0, [sp, #20]
 8007e80:	f802 6b02 	strb.w	r6, [r2], #2
 8007e84:	bfb5      	itete	lt
 8007e86:	212d      	movlt	r1, #45	; 0x2d
 8007e88:	212b      	movge	r1, #43	; 0x2b
 8007e8a:	7059      	strblt	r1, [r3, #1]
 8007e8c:	7059      	strbge	r1, [r3, #1]
 8007e8e:	2863      	cmp	r0, #99	; 0x63
 8007e90:	dd0b      	ble.n	8007eaa <print_e+0xaa>
 8007e92:	2164      	movs	r1, #100	; 0x64
 8007e94:	fb90 f1f1 	sdiv	r1, r0, r1
 8007e98:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8007e9c:	1cda      	adds	r2, r3, #3
 8007e9e:	709c      	strb	r4, [r3, #2]
 8007ea0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8007ea4:	fb03 0101 	mla	r1, r3, r1, r0
 8007ea8:	9105      	str	r1, [sp, #20]
 8007eaa:	9905      	ldr	r1, [sp, #20]
 8007eac:	230a      	movs	r3, #10
 8007eae:	fb91 f3f3 	sdiv	r3, r1, r3
 8007eb2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007eb6:	7010      	strb	r0, [r2, #0]
 8007eb8:	f06f 0009 	mvn.w	r0, #9
 8007ebc:	fb00 1303 	mla	r3, r0, r3, r1
 8007ec0:	3330      	adds	r3, #48	; 0x30
 8007ec2:	7053      	strb	r3, [r2, #1]
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	7093      	strb	r3, [r2, #2]
 8007ec8:	e7b5      	b.n	8007e36 <print_e+0x36>
 8007eca:	222e      	movs	r2, #46	; 0x2e
 8007ecc:	1cbb      	adds	r3, r7, #2
 8007ece:	707a      	strb	r2, [r7, #1]
 8007ed0:	e7ba      	b.n	8007e48 <print_e+0x48>
 8007ed2:	f803 2b01 	strb.w	r2, [r3], #1
 8007ed6:	3c01      	subs	r4, #1
 8007ed8:	e7b6      	b.n	8007e48 <print_e+0x48>
 8007eda:	f802 7b01 	strb.w	r7, [r2], #1
 8007ede:	e7bf      	b.n	8007e60 <print_e+0x60>
 8007ee0:	2665      	movs	r6, #101	; 0x65
 8007ee2:	e7c3      	b.n	8007e6c <print_e+0x6c>
 8007ee4:	2645      	movs	r6, #69	; 0x45
 8007ee6:	e7c1      	b.n	8007e6c <print_e+0x6c>

08007ee8 <_gcvt>:
 8007ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eec:	ec55 4b10 	vmov	r4, r5, d0
 8007ef0:	b088      	sub	sp, #32
 8007ef2:	4681      	mov	r9, r0
 8007ef4:	460f      	mov	r7, r1
 8007ef6:	4616      	mov	r6, r2
 8007ef8:	469a      	mov	sl, r3
 8007efa:	2200      	movs	r2, #0
 8007efc:	2300      	movs	r3, #0
 8007efe:	ee10 0a10 	vmov	r0, s0
 8007f02:	4629      	mov	r1, r5
 8007f04:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8007f08:	f7f8 fdb4 	bl	8000a74 <__aeabi_dcmplt>
 8007f0c:	b110      	cbz	r0, 8007f14 <_gcvt+0x2c>
 8007f0e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007f12:	461d      	mov	r5, r3
 8007f14:	2200      	movs	r2, #0
 8007f16:	2300      	movs	r3, #0
 8007f18:	4620      	mov	r0, r4
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	f7f8 fda0 	bl	8000a60 <__aeabi_dcmpeq>
 8007f20:	b138      	cbz	r0, 8007f32 <_gcvt+0x4a>
 8007f22:	2330      	movs	r3, #48	; 0x30
 8007f24:	7033      	strb	r3, [r6, #0]
 8007f26:	2300      	movs	r3, #0
 8007f28:	7073      	strb	r3, [r6, #1]
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	b008      	add	sp, #32
 8007f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f32:	a350      	add	r3, pc, #320	; (adr r3, 8008074 <_gcvt+0x18c>)
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	4620      	mov	r0, r4
 8007f3a:	4629      	mov	r1, r5
 8007f3c:	f7f8 fda4 	bl	8000a88 <__aeabi_dcmple>
 8007f40:	b150      	cbz	r0, 8007f58 <_gcvt+0x70>
 8007f42:	3f01      	subs	r7, #1
 8007f44:	e9cd a801 	strd	sl, r8, [sp, #4]
 8007f48:	9700      	str	r7, [sp, #0]
 8007f4a:	4622      	mov	r2, r4
 8007f4c:	462b      	mov	r3, r5
 8007f4e:	4631      	mov	r1, r6
 8007f50:	4648      	mov	r0, r9
 8007f52:	f7ff ff55 	bl	8007e00 <print_e>
 8007f56:	e7e8      	b.n	8007f2a <_gcvt+0x42>
 8007f58:	4638      	mov	r0, r7
 8007f5a:	f000 fb8b 	bl	8008674 <_mprec_log10>
 8007f5e:	4622      	mov	r2, r4
 8007f60:	462b      	mov	r3, r5
 8007f62:	ec51 0b10 	vmov	r0, r1, d0
 8007f66:	f7f8 fd8f 	bl	8000a88 <__aeabi_dcmple>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d1e9      	bne.n	8007f42 <_gcvt+0x5a>
 8007f6e:	2200      	movs	r2, #0
 8007f70:	4b3f      	ldr	r3, [pc, #252]	; (8008070 <_gcvt+0x188>)
 8007f72:	4620      	mov	r0, r4
 8007f74:	4629      	mov	r1, r5
 8007f76:	f7f8 fd7d 	bl	8000a74 <__aeabi_dcmplt>
 8007f7a:	aa07      	add	r2, sp, #28
 8007f7c:	ab06      	add	r3, sp, #24
 8007f7e:	e9cd 3200 	strd	r3, r2, [sp]
 8007f82:	ab05      	add	r3, sp, #20
 8007f84:	463a      	mov	r2, r7
 8007f86:	b360      	cbz	r0, 8007fe2 <_gcvt+0xfa>
 8007f88:	2103      	movs	r1, #3
 8007f8a:	ec45 4b10 	vmov	d0, r4, r5
 8007f8e:	4648      	mov	r0, r9
 8007f90:	f7ff f97e 	bl	8007290 <_dtoa_r>
 8007f94:	9a05      	ldr	r2, [sp, #20]
 8007f96:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d023      	beq.n	8007fe6 <_gcvt+0xfe>
 8007f9e:	4633      	mov	r3, r6
 8007fa0:	4437      	add	r7, r6
 8007fa2:	4601      	mov	r1, r0
 8007fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fa8:	9d05      	ldr	r5, [sp, #20]
 8007faa:	1afc      	subs	r4, r7, r3
 8007fac:	b32a      	cbz	r2, 8007ffa <_gcvt+0x112>
 8007fae:	2d00      	cmp	r5, #0
 8007fb0:	dc1e      	bgt.n	8007ff0 <_gcvt+0x108>
 8007fb2:	f1b8 0f00 	cmp.w	r8, #0
 8007fb6:	d102      	bne.n	8007fbe <_gcvt+0xd6>
 8007fb8:	780a      	ldrb	r2, [r1, #0]
 8007fba:	2a00      	cmp	r2, #0
 8007fbc:	d045      	beq.n	800804a <_gcvt+0x162>
 8007fbe:	429e      	cmp	r6, r3
 8007fc0:	bf02      	ittt	eq
 8007fc2:	1c73      	addeq	r3, r6, #1
 8007fc4:	2230      	moveq	r2, #48	; 0x30
 8007fc6:	7032      	strbeq	r2, [r6, #0]
 8007fc8:	222e      	movs	r2, #46	; 0x2e
 8007fca:	701a      	strb	r2, [r3, #0]
 8007fcc:	9a05      	ldr	r2, [sp, #20]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	2730      	movs	r7, #48	; 0x30
 8007fd4:	2a00      	cmp	r2, #0
 8007fd6:	4615      	mov	r5, r2
 8007fd8:	db24      	blt.n	8008024 <_gcvt+0x13c>
 8007fda:	b100      	cbz	r0, 8007fde <_gcvt+0xf6>
 8007fdc:	9205      	str	r2, [sp, #20]
 8007fde:	1e4a      	subs	r2, r1, #1
 8007fe0:	e02b      	b.n	800803a <_gcvt+0x152>
 8007fe2:	2102      	movs	r1, #2
 8007fe4:	e7d1      	b.n	8007f8a <_gcvt+0xa2>
 8007fe6:	4601      	mov	r1, r0
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f000 fbd9 	bl	80087a0 <strcpy>
 8007fee:	e79c      	b.n	8007f2a <_gcvt+0x42>
 8007ff0:	3d01      	subs	r5, #1
 8007ff2:	f803 2b01 	strb.w	r2, [r3], #1
 8007ff6:	9505      	str	r5, [sp, #20]
 8007ff8:	e7d3      	b.n	8007fa2 <_gcvt+0xba>
 8007ffa:	1b2d      	subs	r5, r5, r4
 8007ffc:	2730      	movs	r7, #48	; 0x30
 8007ffe:	e005      	b.n	800800c <_gcvt+0x124>
 8008000:	2c00      	cmp	r4, #0
 8008002:	dd06      	ble.n	8008012 <_gcvt+0x12a>
 8008004:	f803 7b01 	strb.w	r7, [r3], #1
 8008008:	3c01      	subs	r4, #1
 800800a:	2201      	movs	r2, #1
 800800c:	1928      	adds	r0, r5, r4
 800800e:	2800      	cmp	r0, #0
 8008010:	dcf6      	bgt.n	8008000 <_gcvt+0x118>
 8008012:	2a00      	cmp	r2, #0
 8008014:	d0cd      	beq.n	8007fb2 <_gcvt+0xca>
 8008016:	9005      	str	r0, [sp, #20]
 8008018:	e7cb      	b.n	8007fb2 <_gcvt+0xca>
 800801a:	f803 7b01 	strb.w	r7, [r3], #1
 800801e:	3c01      	subs	r4, #1
 8008020:	2001      	movs	r0, #1
 8008022:	e7d7      	b.n	8007fd4 <_gcvt+0xec>
 8008024:	2c00      	cmp	r4, #0
 8008026:	f102 0201 	add.w	r2, r2, #1
 800802a:	dcf6      	bgt.n	800801a <_gcvt+0x132>
 800802c:	2800      	cmp	r0, #0
 800802e:	d0d6      	beq.n	8007fde <_gcvt+0xf6>
 8008030:	9505      	str	r5, [sp, #20]
 8008032:	e7d4      	b.n	8007fde <_gcvt+0xf6>
 8008034:	f803 1b01 	strb.w	r1, [r3], #1
 8008038:	3c01      	subs	r4, #1
 800803a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800803e:	b109      	cbz	r1, 8008044 <_gcvt+0x15c>
 8008040:	2c00      	cmp	r4, #0
 8008042:	dcf7      	bgt.n	8008034 <_gcvt+0x14c>
 8008044:	f1b8 0f00 	cmp.w	r8, #0
 8008048:	d10b      	bne.n	8008062 <_gcvt+0x17a>
 800804a:	2200      	movs	r2, #0
 800804c:	701a      	strb	r2, [r3, #0]
 800804e:	e76c      	b.n	8007f2a <_gcvt+0x42>
 8008050:	f802 5b01 	strb.w	r5, [r2], #1
 8008054:	1a81      	subs	r1, r0, r2
 8008056:	2900      	cmp	r1, #0
 8008058:	dcfa      	bgt.n	8008050 <_gcvt+0x168>
 800805a:	2c00      	cmp	r4, #0
 800805c:	bfa8      	it	ge
 800805e:	191b      	addge	r3, r3, r4
 8008060:	e7f3      	b.n	800804a <_gcvt+0x162>
 8008062:	461a      	mov	r2, r3
 8008064:	1918      	adds	r0, r3, r4
 8008066:	2530      	movs	r5, #48	; 0x30
 8008068:	e7f4      	b.n	8008054 <_gcvt+0x16c>
 800806a:	bf00      	nop
 800806c:	f3af 8000 	nop.w
 8008070:	3ff00000 	.word	0x3ff00000
 8008074:	eb1c432d 	.word	0xeb1c432d
 8008078:	3f1a36e2 	.word	0x3f1a36e2

0800807c <_localeconv_r>:
 800807c:	4b04      	ldr	r3, [pc, #16]	; (8008090 <_localeconv_r+0x14>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6a18      	ldr	r0, [r3, #32]
 8008082:	4b04      	ldr	r3, [pc, #16]	; (8008094 <_localeconv_r+0x18>)
 8008084:	2800      	cmp	r0, #0
 8008086:	bf08      	it	eq
 8008088:	4618      	moveq	r0, r3
 800808a:	30f0      	adds	r0, #240	; 0xf0
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	2000000c 	.word	0x2000000c
 8008094:	20000070 	.word	0x20000070

08008098 <malloc>:
 8008098:	4b02      	ldr	r3, [pc, #8]	; (80080a4 <malloc+0xc>)
 800809a:	4601      	mov	r1, r0
 800809c:	6818      	ldr	r0, [r3, #0]
 800809e:	f000 bb15 	b.w	80086cc <_malloc_r>
 80080a2:	bf00      	nop
 80080a4:	2000000c 	.word	0x2000000c

080080a8 <memcpy>:
 80080a8:	b510      	push	{r4, lr}
 80080aa:	1e43      	subs	r3, r0, #1
 80080ac:	440a      	add	r2, r1
 80080ae:	4291      	cmp	r1, r2
 80080b0:	d100      	bne.n	80080b4 <memcpy+0xc>
 80080b2:	bd10      	pop	{r4, pc}
 80080b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080bc:	e7f7      	b.n	80080ae <memcpy+0x6>

080080be <_Balloc>:
 80080be:	b570      	push	{r4, r5, r6, lr}
 80080c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80080c2:	4604      	mov	r4, r0
 80080c4:	460e      	mov	r6, r1
 80080c6:	b93d      	cbnz	r5, 80080d8 <_Balloc+0x1a>
 80080c8:	2010      	movs	r0, #16
 80080ca:	f7ff ffe5 	bl	8008098 <malloc>
 80080ce:	6260      	str	r0, [r4, #36]	; 0x24
 80080d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80080d4:	6005      	str	r5, [r0, #0]
 80080d6:	60c5      	str	r5, [r0, #12]
 80080d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80080da:	68eb      	ldr	r3, [r5, #12]
 80080dc:	b183      	cbz	r3, 8008100 <_Balloc+0x42>
 80080de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80080e6:	b9b8      	cbnz	r0, 8008118 <_Balloc+0x5a>
 80080e8:	2101      	movs	r1, #1
 80080ea:	fa01 f506 	lsl.w	r5, r1, r6
 80080ee:	1d6a      	adds	r2, r5, #5
 80080f0:	0092      	lsls	r2, r2, #2
 80080f2:	4620      	mov	r0, r4
 80080f4:	f000 fadc 	bl	80086b0 <_calloc_r>
 80080f8:	b160      	cbz	r0, 8008114 <_Balloc+0x56>
 80080fa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80080fe:	e00e      	b.n	800811e <_Balloc+0x60>
 8008100:	2221      	movs	r2, #33	; 0x21
 8008102:	2104      	movs	r1, #4
 8008104:	4620      	mov	r0, r4
 8008106:	f000 fad3 	bl	80086b0 <_calloc_r>
 800810a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800810c:	60e8      	str	r0, [r5, #12]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1e4      	bne.n	80080de <_Balloc+0x20>
 8008114:	2000      	movs	r0, #0
 8008116:	bd70      	pop	{r4, r5, r6, pc}
 8008118:	6802      	ldr	r2, [r0, #0]
 800811a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800811e:	2300      	movs	r3, #0
 8008120:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008124:	e7f7      	b.n	8008116 <_Balloc+0x58>

08008126 <_Bfree>:
 8008126:	b570      	push	{r4, r5, r6, lr}
 8008128:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800812a:	4606      	mov	r6, r0
 800812c:	460d      	mov	r5, r1
 800812e:	b93c      	cbnz	r4, 8008140 <_Bfree+0x1a>
 8008130:	2010      	movs	r0, #16
 8008132:	f7ff ffb1 	bl	8008098 <malloc>
 8008136:	6270      	str	r0, [r6, #36]	; 0x24
 8008138:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800813c:	6004      	str	r4, [r0, #0]
 800813e:	60c4      	str	r4, [r0, #12]
 8008140:	b13d      	cbz	r5, 8008152 <_Bfree+0x2c>
 8008142:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008144:	686a      	ldr	r2, [r5, #4]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800814c:	6029      	str	r1, [r5, #0]
 800814e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008152:	bd70      	pop	{r4, r5, r6, pc}

08008154 <__multadd>:
 8008154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008158:	690d      	ldr	r5, [r1, #16]
 800815a:	461f      	mov	r7, r3
 800815c:	4606      	mov	r6, r0
 800815e:	460c      	mov	r4, r1
 8008160:	f101 0c14 	add.w	ip, r1, #20
 8008164:	2300      	movs	r3, #0
 8008166:	f8dc 0000 	ldr.w	r0, [ip]
 800816a:	b281      	uxth	r1, r0
 800816c:	fb02 7101 	mla	r1, r2, r1, r7
 8008170:	0c0f      	lsrs	r7, r1, #16
 8008172:	0c00      	lsrs	r0, r0, #16
 8008174:	fb02 7000 	mla	r0, r2, r0, r7
 8008178:	b289      	uxth	r1, r1
 800817a:	3301      	adds	r3, #1
 800817c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008180:	429d      	cmp	r5, r3
 8008182:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008186:	f84c 1b04 	str.w	r1, [ip], #4
 800818a:	dcec      	bgt.n	8008166 <__multadd+0x12>
 800818c:	b1d7      	cbz	r7, 80081c4 <__multadd+0x70>
 800818e:	68a3      	ldr	r3, [r4, #8]
 8008190:	42ab      	cmp	r3, r5
 8008192:	dc12      	bgt.n	80081ba <__multadd+0x66>
 8008194:	6861      	ldr	r1, [r4, #4]
 8008196:	4630      	mov	r0, r6
 8008198:	3101      	adds	r1, #1
 800819a:	f7ff ff90 	bl	80080be <_Balloc>
 800819e:	6922      	ldr	r2, [r4, #16]
 80081a0:	3202      	adds	r2, #2
 80081a2:	f104 010c 	add.w	r1, r4, #12
 80081a6:	4680      	mov	r8, r0
 80081a8:	0092      	lsls	r2, r2, #2
 80081aa:	300c      	adds	r0, #12
 80081ac:	f7ff ff7c 	bl	80080a8 <memcpy>
 80081b0:	4621      	mov	r1, r4
 80081b2:	4630      	mov	r0, r6
 80081b4:	f7ff ffb7 	bl	8008126 <_Bfree>
 80081b8:	4644      	mov	r4, r8
 80081ba:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081be:	3501      	adds	r5, #1
 80081c0:	615f      	str	r7, [r3, #20]
 80081c2:	6125      	str	r5, [r4, #16]
 80081c4:	4620      	mov	r0, r4
 80081c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080081ca <__hi0bits>:
 80081ca:	0c02      	lsrs	r2, r0, #16
 80081cc:	0412      	lsls	r2, r2, #16
 80081ce:	4603      	mov	r3, r0
 80081d0:	b9b2      	cbnz	r2, 8008200 <__hi0bits+0x36>
 80081d2:	0403      	lsls	r3, r0, #16
 80081d4:	2010      	movs	r0, #16
 80081d6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80081da:	bf04      	itt	eq
 80081dc:	021b      	lsleq	r3, r3, #8
 80081de:	3008      	addeq	r0, #8
 80081e0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80081e4:	bf04      	itt	eq
 80081e6:	011b      	lsleq	r3, r3, #4
 80081e8:	3004      	addeq	r0, #4
 80081ea:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80081ee:	bf04      	itt	eq
 80081f0:	009b      	lsleq	r3, r3, #2
 80081f2:	3002      	addeq	r0, #2
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	db06      	blt.n	8008206 <__hi0bits+0x3c>
 80081f8:	005b      	lsls	r3, r3, #1
 80081fa:	d503      	bpl.n	8008204 <__hi0bits+0x3a>
 80081fc:	3001      	adds	r0, #1
 80081fe:	4770      	bx	lr
 8008200:	2000      	movs	r0, #0
 8008202:	e7e8      	b.n	80081d6 <__hi0bits+0xc>
 8008204:	2020      	movs	r0, #32
 8008206:	4770      	bx	lr

08008208 <__lo0bits>:
 8008208:	6803      	ldr	r3, [r0, #0]
 800820a:	f013 0207 	ands.w	r2, r3, #7
 800820e:	4601      	mov	r1, r0
 8008210:	d00b      	beq.n	800822a <__lo0bits+0x22>
 8008212:	07da      	lsls	r2, r3, #31
 8008214:	d423      	bmi.n	800825e <__lo0bits+0x56>
 8008216:	0798      	lsls	r0, r3, #30
 8008218:	bf49      	itett	mi
 800821a:	085b      	lsrmi	r3, r3, #1
 800821c:	089b      	lsrpl	r3, r3, #2
 800821e:	2001      	movmi	r0, #1
 8008220:	600b      	strmi	r3, [r1, #0]
 8008222:	bf5c      	itt	pl
 8008224:	600b      	strpl	r3, [r1, #0]
 8008226:	2002      	movpl	r0, #2
 8008228:	4770      	bx	lr
 800822a:	b298      	uxth	r0, r3
 800822c:	b9a8      	cbnz	r0, 800825a <__lo0bits+0x52>
 800822e:	0c1b      	lsrs	r3, r3, #16
 8008230:	2010      	movs	r0, #16
 8008232:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008236:	bf04      	itt	eq
 8008238:	0a1b      	lsreq	r3, r3, #8
 800823a:	3008      	addeq	r0, #8
 800823c:	071a      	lsls	r2, r3, #28
 800823e:	bf04      	itt	eq
 8008240:	091b      	lsreq	r3, r3, #4
 8008242:	3004      	addeq	r0, #4
 8008244:	079a      	lsls	r2, r3, #30
 8008246:	bf04      	itt	eq
 8008248:	089b      	lsreq	r3, r3, #2
 800824a:	3002      	addeq	r0, #2
 800824c:	07da      	lsls	r2, r3, #31
 800824e:	d402      	bmi.n	8008256 <__lo0bits+0x4e>
 8008250:	085b      	lsrs	r3, r3, #1
 8008252:	d006      	beq.n	8008262 <__lo0bits+0x5a>
 8008254:	3001      	adds	r0, #1
 8008256:	600b      	str	r3, [r1, #0]
 8008258:	4770      	bx	lr
 800825a:	4610      	mov	r0, r2
 800825c:	e7e9      	b.n	8008232 <__lo0bits+0x2a>
 800825e:	2000      	movs	r0, #0
 8008260:	4770      	bx	lr
 8008262:	2020      	movs	r0, #32
 8008264:	4770      	bx	lr

08008266 <__i2b>:
 8008266:	b510      	push	{r4, lr}
 8008268:	460c      	mov	r4, r1
 800826a:	2101      	movs	r1, #1
 800826c:	f7ff ff27 	bl	80080be <_Balloc>
 8008270:	2201      	movs	r2, #1
 8008272:	6144      	str	r4, [r0, #20]
 8008274:	6102      	str	r2, [r0, #16]
 8008276:	bd10      	pop	{r4, pc}

08008278 <__multiply>:
 8008278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827c:	4614      	mov	r4, r2
 800827e:	690a      	ldr	r2, [r1, #16]
 8008280:	6923      	ldr	r3, [r4, #16]
 8008282:	429a      	cmp	r2, r3
 8008284:	bfb8      	it	lt
 8008286:	460b      	movlt	r3, r1
 8008288:	4688      	mov	r8, r1
 800828a:	bfbc      	itt	lt
 800828c:	46a0      	movlt	r8, r4
 800828e:	461c      	movlt	r4, r3
 8008290:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008294:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008298:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800829c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80082a0:	eb07 0609 	add.w	r6, r7, r9
 80082a4:	42b3      	cmp	r3, r6
 80082a6:	bfb8      	it	lt
 80082a8:	3101      	addlt	r1, #1
 80082aa:	f7ff ff08 	bl	80080be <_Balloc>
 80082ae:	f100 0514 	add.w	r5, r0, #20
 80082b2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80082b6:	462b      	mov	r3, r5
 80082b8:	2200      	movs	r2, #0
 80082ba:	4573      	cmp	r3, lr
 80082bc:	d316      	bcc.n	80082ec <__multiply+0x74>
 80082be:	f104 0214 	add.w	r2, r4, #20
 80082c2:	f108 0114 	add.w	r1, r8, #20
 80082c6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80082ca:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	9b00      	ldr	r3, [sp, #0]
 80082d2:	9201      	str	r2, [sp, #4]
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d80c      	bhi.n	80082f2 <__multiply+0x7a>
 80082d8:	2e00      	cmp	r6, #0
 80082da:	dd03      	ble.n	80082e4 <__multiply+0x6c>
 80082dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d05d      	beq.n	80083a0 <__multiply+0x128>
 80082e4:	6106      	str	r6, [r0, #16]
 80082e6:	b003      	add	sp, #12
 80082e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ec:	f843 2b04 	str.w	r2, [r3], #4
 80082f0:	e7e3      	b.n	80082ba <__multiply+0x42>
 80082f2:	f8b2 b000 	ldrh.w	fp, [r2]
 80082f6:	f1bb 0f00 	cmp.w	fp, #0
 80082fa:	d023      	beq.n	8008344 <__multiply+0xcc>
 80082fc:	4689      	mov	r9, r1
 80082fe:	46ac      	mov	ip, r5
 8008300:	f04f 0800 	mov.w	r8, #0
 8008304:	f859 4b04 	ldr.w	r4, [r9], #4
 8008308:	f8dc a000 	ldr.w	sl, [ip]
 800830c:	b2a3      	uxth	r3, r4
 800830e:	fa1f fa8a 	uxth.w	sl, sl
 8008312:	fb0b a303 	mla	r3, fp, r3, sl
 8008316:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800831a:	f8dc 4000 	ldr.w	r4, [ip]
 800831e:	4443      	add	r3, r8
 8008320:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008324:	fb0b 840a 	mla	r4, fp, sl, r8
 8008328:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800832c:	46e2      	mov	sl, ip
 800832e:	b29b      	uxth	r3, r3
 8008330:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008334:	454f      	cmp	r7, r9
 8008336:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800833a:	f84a 3b04 	str.w	r3, [sl], #4
 800833e:	d82b      	bhi.n	8008398 <__multiply+0x120>
 8008340:	f8cc 8004 	str.w	r8, [ip, #4]
 8008344:	9b01      	ldr	r3, [sp, #4]
 8008346:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800834a:	3204      	adds	r2, #4
 800834c:	f1ba 0f00 	cmp.w	sl, #0
 8008350:	d020      	beq.n	8008394 <__multiply+0x11c>
 8008352:	682b      	ldr	r3, [r5, #0]
 8008354:	4689      	mov	r9, r1
 8008356:	46a8      	mov	r8, r5
 8008358:	f04f 0b00 	mov.w	fp, #0
 800835c:	f8b9 c000 	ldrh.w	ip, [r9]
 8008360:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008364:	fb0a 440c 	mla	r4, sl, ip, r4
 8008368:	445c      	add	r4, fp
 800836a:	46c4      	mov	ip, r8
 800836c:	b29b      	uxth	r3, r3
 800836e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008372:	f84c 3b04 	str.w	r3, [ip], #4
 8008376:	f859 3b04 	ldr.w	r3, [r9], #4
 800837a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800837e:	0c1b      	lsrs	r3, r3, #16
 8008380:	fb0a b303 	mla	r3, sl, r3, fp
 8008384:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008388:	454f      	cmp	r7, r9
 800838a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800838e:	d805      	bhi.n	800839c <__multiply+0x124>
 8008390:	f8c8 3004 	str.w	r3, [r8, #4]
 8008394:	3504      	adds	r5, #4
 8008396:	e79b      	b.n	80082d0 <__multiply+0x58>
 8008398:	46d4      	mov	ip, sl
 800839a:	e7b3      	b.n	8008304 <__multiply+0x8c>
 800839c:	46e0      	mov	r8, ip
 800839e:	e7dd      	b.n	800835c <__multiply+0xe4>
 80083a0:	3e01      	subs	r6, #1
 80083a2:	e799      	b.n	80082d8 <__multiply+0x60>

080083a4 <__pow5mult>:
 80083a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083a8:	4615      	mov	r5, r2
 80083aa:	f012 0203 	ands.w	r2, r2, #3
 80083ae:	4606      	mov	r6, r0
 80083b0:	460f      	mov	r7, r1
 80083b2:	d007      	beq.n	80083c4 <__pow5mult+0x20>
 80083b4:	3a01      	subs	r2, #1
 80083b6:	4c21      	ldr	r4, [pc, #132]	; (800843c <__pow5mult+0x98>)
 80083b8:	2300      	movs	r3, #0
 80083ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083be:	f7ff fec9 	bl	8008154 <__multadd>
 80083c2:	4607      	mov	r7, r0
 80083c4:	10ad      	asrs	r5, r5, #2
 80083c6:	d035      	beq.n	8008434 <__pow5mult+0x90>
 80083c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80083ca:	b93c      	cbnz	r4, 80083dc <__pow5mult+0x38>
 80083cc:	2010      	movs	r0, #16
 80083ce:	f7ff fe63 	bl	8008098 <malloc>
 80083d2:	6270      	str	r0, [r6, #36]	; 0x24
 80083d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083d8:	6004      	str	r4, [r0, #0]
 80083da:	60c4      	str	r4, [r0, #12]
 80083dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80083e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083e4:	b94c      	cbnz	r4, 80083fa <__pow5mult+0x56>
 80083e6:	f240 2171 	movw	r1, #625	; 0x271
 80083ea:	4630      	mov	r0, r6
 80083ec:	f7ff ff3b 	bl	8008266 <__i2b>
 80083f0:	2300      	movs	r3, #0
 80083f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80083f6:	4604      	mov	r4, r0
 80083f8:	6003      	str	r3, [r0, #0]
 80083fa:	f04f 0800 	mov.w	r8, #0
 80083fe:	07eb      	lsls	r3, r5, #31
 8008400:	d50a      	bpl.n	8008418 <__pow5mult+0x74>
 8008402:	4639      	mov	r1, r7
 8008404:	4622      	mov	r2, r4
 8008406:	4630      	mov	r0, r6
 8008408:	f7ff ff36 	bl	8008278 <__multiply>
 800840c:	4639      	mov	r1, r7
 800840e:	4681      	mov	r9, r0
 8008410:	4630      	mov	r0, r6
 8008412:	f7ff fe88 	bl	8008126 <_Bfree>
 8008416:	464f      	mov	r7, r9
 8008418:	106d      	asrs	r5, r5, #1
 800841a:	d00b      	beq.n	8008434 <__pow5mult+0x90>
 800841c:	6820      	ldr	r0, [r4, #0]
 800841e:	b938      	cbnz	r0, 8008430 <__pow5mult+0x8c>
 8008420:	4622      	mov	r2, r4
 8008422:	4621      	mov	r1, r4
 8008424:	4630      	mov	r0, r6
 8008426:	f7ff ff27 	bl	8008278 <__multiply>
 800842a:	6020      	str	r0, [r4, #0]
 800842c:	f8c0 8000 	str.w	r8, [r0]
 8008430:	4604      	mov	r4, r0
 8008432:	e7e4      	b.n	80083fe <__pow5mult+0x5a>
 8008434:	4638      	mov	r0, r7
 8008436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800843a:	bf00      	nop
 800843c:	08008940 	.word	0x08008940

08008440 <__lshift>:
 8008440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008444:	460c      	mov	r4, r1
 8008446:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800844a:	6923      	ldr	r3, [r4, #16]
 800844c:	6849      	ldr	r1, [r1, #4]
 800844e:	eb0a 0903 	add.w	r9, sl, r3
 8008452:	68a3      	ldr	r3, [r4, #8]
 8008454:	4607      	mov	r7, r0
 8008456:	4616      	mov	r6, r2
 8008458:	f109 0501 	add.w	r5, r9, #1
 800845c:	42ab      	cmp	r3, r5
 800845e:	db32      	blt.n	80084c6 <__lshift+0x86>
 8008460:	4638      	mov	r0, r7
 8008462:	f7ff fe2c 	bl	80080be <_Balloc>
 8008466:	2300      	movs	r3, #0
 8008468:	4680      	mov	r8, r0
 800846a:	f100 0114 	add.w	r1, r0, #20
 800846e:	461a      	mov	r2, r3
 8008470:	4553      	cmp	r3, sl
 8008472:	db2b      	blt.n	80084cc <__lshift+0x8c>
 8008474:	6920      	ldr	r0, [r4, #16]
 8008476:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800847a:	f104 0314 	add.w	r3, r4, #20
 800847e:	f016 021f 	ands.w	r2, r6, #31
 8008482:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008486:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800848a:	d025      	beq.n	80084d8 <__lshift+0x98>
 800848c:	f1c2 0e20 	rsb	lr, r2, #32
 8008490:	2000      	movs	r0, #0
 8008492:	681e      	ldr	r6, [r3, #0]
 8008494:	468a      	mov	sl, r1
 8008496:	4096      	lsls	r6, r2
 8008498:	4330      	orrs	r0, r6
 800849a:	f84a 0b04 	str.w	r0, [sl], #4
 800849e:	f853 0b04 	ldr.w	r0, [r3], #4
 80084a2:	459c      	cmp	ip, r3
 80084a4:	fa20 f00e 	lsr.w	r0, r0, lr
 80084a8:	d814      	bhi.n	80084d4 <__lshift+0x94>
 80084aa:	6048      	str	r0, [r1, #4]
 80084ac:	b108      	cbz	r0, 80084b2 <__lshift+0x72>
 80084ae:	f109 0502 	add.w	r5, r9, #2
 80084b2:	3d01      	subs	r5, #1
 80084b4:	4638      	mov	r0, r7
 80084b6:	f8c8 5010 	str.w	r5, [r8, #16]
 80084ba:	4621      	mov	r1, r4
 80084bc:	f7ff fe33 	bl	8008126 <_Bfree>
 80084c0:	4640      	mov	r0, r8
 80084c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c6:	3101      	adds	r1, #1
 80084c8:	005b      	lsls	r3, r3, #1
 80084ca:	e7c7      	b.n	800845c <__lshift+0x1c>
 80084cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80084d0:	3301      	adds	r3, #1
 80084d2:	e7cd      	b.n	8008470 <__lshift+0x30>
 80084d4:	4651      	mov	r1, sl
 80084d6:	e7dc      	b.n	8008492 <__lshift+0x52>
 80084d8:	3904      	subs	r1, #4
 80084da:	f853 2b04 	ldr.w	r2, [r3], #4
 80084de:	f841 2f04 	str.w	r2, [r1, #4]!
 80084e2:	459c      	cmp	ip, r3
 80084e4:	d8f9      	bhi.n	80084da <__lshift+0x9a>
 80084e6:	e7e4      	b.n	80084b2 <__lshift+0x72>

080084e8 <__mcmp>:
 80084e8:	6903      	ldr	r3, [r0, #16]
 80084ea:	690a      	ldr	r2, [r1, #16]
 80084ec:	1a9b      	subs	r3, r3, r2
 80084ee:	b530      	push	{r4, r5, lr}
 80084f0:	d10c      	bne.n	800850c <__mcmp+0x24>
 80084f2:	0092      	lsls	r2, r2, #2
 80084f4:	3014      	adds	r0, #20
 80084f6:	3114      	adds	r1, #20
 80084f8:	1884      	adds	r4, r0, r2
 80084fa:	4411      	add	r1, r2
 80084fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008500:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008504:	4295      	cmp	r5, r2
 8008506:	d003      	beq.n	8008510 <__mcmp+0x28>
 8008508:	d305      	bcc.n	8008516 <__mcmp+0x2e>
 800850a:	2301      	movs	r3, #1
 800850c:	4618      	mov	r0, r3
 800850e:	bd30      	pop	{r4, r5, pc}
 8008510:	42a0      	cmp	r0, r4
 8008512:	d3f3      	bcc.n	80084fc <__mcmp+0x14>
 8008514:	e7fa      	b.n	800850c <__mcmp+0x24>
 8008516:	f04f 33ff 	mov.w	r3, #4294967295
 800851a:	e7f7      	b.n	800850c <__mcmp+0x24>

0800851c <__mdiff>:
 800851c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008520:	460d      	mov	r5, r1
 8008522:	4607      	mov	r7, r0
 8008524:	4611      	mov	r1, r2
 8008526:	4628      	mov	r0, r5
 8008528:	4614      	mov	r4, r2
 800852a:	f7ff ffdd 	bl	80084e8 <__mcmp>
 800852e:	1e06      	subs	r6, r0, #0
 8008530:	d108      	bne.n	8008544 <__mdiff+0x28>
 8008532:	4631      	mov	r1, r6
 8008534:	4638      	mov	r0, r7
 8008536:	f7ff fdc2 	bl	80080be <_Balloc>
 800853a:	2301      	movs	r3, #1
 800853c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008544:	bfa4      	itt	ge
 8008546:	4623      	movge	r3, r4
 8008548:	462c      	movge	r4, r5
 800854a:	4638      	mov	r0, r7
 800854c:	6861      	ldr	r1, [r4, #4]
 800854e:	bfa6      	itte	ge
 8008550:	461d      	movge	r5, r3
 8008552:	2600      	movge	r6, #0
 8008554:	2601      	movlt	r6, #1
 8008556:	f7ff fdb2 	bl	80080be <_Balloc>
 800855a:	692b      	ldr	r3, [r5, #16]
 800855c:	60c6      	str	r6, [r0, #12]
 800855e:	6926      	ldr	r6, [r4, #16]
 8008560:	f105 0914 	add.w	r9, r5, #20
 8008564:	f104 0214 	add.w	r2, r4, #20
 8008568:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800856c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008570:	f100 0514 	add.w	r5, r0, #20
 8008574:	f04f 0e00 	mov.w	lr, #0
 8008578:	f852 ab04 	ldr.w	sl, [r2], #4
 800857c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008580:	fa1e f18a 	uxtah	r1, lr, sl
 8008584:	b2a3      	uxth	r3, r4
 8008586:	1ac9      	subs	r1, r1, r3
 8008588:	0c23      	lsrs	r3, r4, #16
 800858a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800858e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008592:	b289      	uxth	r1, r1
 8008594:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008598:	45c8      	cmp	r8, r9
 800859a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800859e:	4694      	mov	ip, r2
 80085a0:	f845 3b04 	str.w	r3, [r5], #4
 80085a4:	d8e8      	bhi.n	8008578 <__mdiff+0x5c>
 80085a6:	45bc      	cmp	ip, r7
 80085a8:	d304      	bcc.n	80085b4 <__mdiff+0x98>
 80085aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80085ae:	b183      	cbz	r3, 80085d2 <__mdiff+0xb6>
 80085b0:	6106      	str	r6, [r0, #16]
 80085b2:	e7c5      	b.n	8008540 <__mdiff+0x24>
 80085b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80085b8:	fa1e f381 	uxtah	r3, lr, r1
 80085bc:	141a      	asrs	r2, r3, #16
 80085be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085c8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80085cc:	f845 3b04 	str.w	r3, [r5], #4
 80085d0:	e7e9      	b.n	80085a6 <__mdiff+0x8a>
 80085d2:	3e01      	subs	r6, #1
 80085d4:	e7e9      	b.n	80085aa <__mdiff+0x8e>

080085d6 <__d2b>:
 80085d6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085da:	460e      	mov	r6, r1
 80085dc:	2101      	movs	r1, #1
 80085de:	ec59 8b10 	vmov	r8, r9, d0
 80085e2:	4615      	mov	r5, r2
 80085e4:	f7ff fd6b 	bl	80080be <_Balloc>
 80085e8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80085ec:	4607      	mov	r7, r0
 80085ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085f2:	bb34      	cbnz	r4, 8008642 <__d2b+0x6c>
 80085f4:	9301      	str	r3, [sp, #4]
 80085f6:	f1b8 0300 	subs.w	r3, r8, #0
 80085fa:	d027      	beq.n	800864c <__d2b+0x76>
 80085fc:	a802      	add	r0, sp, #8
 80085fe:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008602:	f7ff fe01 	bl	8008208 <__lo0bits>
 8008606:	9900      	ldr	r1, [sp, #0]
 8008608:	b1f0      	cbz	r0, 8008648 <__d2b+0x72>
 800860a:	9a01      	ldr	r2, [sp, #4]
 800860c:	f1c0 0320 	rsb	r3, r0, #32
 8008610:	fa02 f303 	lsl.w	r3, r2, r3
 8008614:	430b      	orrs	r3, r1
 8008616:	40c2      	lsrs	r2, r0
 8008618:	617b      	str	r3, [r7, #20]
 800861a:	9201      	str	r2, [sp, #4]
 800861c:	9b01      	ldr	r3, [sp, #4]
 800861e:	61bb      	str	r3, [r7, #24]
 8008620:	2b00      	cmp	r3, #0
 8008622:	bf14      	ite	ne
 8008624:	2102      	movne	r1, #2
 8008626:	2101      	moveq	r1, #1
 8008628:	6139      	str	r1, [r7, #16]
 800862a:	b1c4      	cbz	r4, 800865e <__d2b+0x88>
 800862c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008630:	4404      	add	r4, r0
 8008632:	6034      	str	r4, [r6, #0]
 8008634:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008638:	6028      	str	r0, [r5, #0]
 800863a:	4638      	mov	r0, r7
 800863c:	b003      	add	sp, #12
 800863e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008646:	e7d5      	b.n	80085f4 <__d2b+0x1e>
 8008648:	6179      	str	r1, [r7, #20]
 800864a:	e7e7      	b.n	800861c <__d2b+0x46>
 800864c:	a801      	add	r0, sp, #4
 800864e:	f7ff fddb 	bl	8008208 <__lo0bits>
 8008652:	9b01      	ldr	r3, [sp, #4]
 8008654:	617b      	str	r3, [r7, #20]
 8008656:	2101      	movs	r1, #1
 8008658:	6139      	str	r1, [r7, #16]
 800865a:	3020      	adds	r0, #32
 800865c:	e7e5      	b.n	800862a <__d2b+0x54>
 800865e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008662:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008666:	6030      	str	r0, [r6, #0]
 8008668:	6918      	ldr	r0, [r3, #16]
 800866a:	f7ff fdae 	bl	80081ca <__hi0bits>
 800866e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008672:	e7e1      	b.n	8008638 <__d2b+0x62>

08008674 <_mprec_log10>:
 8008674:	2817      	cmp	r0, #23
 8008676:	b5d0      	push	{r4, r6, r7, lr}
 8008678:	4604      	mov	r4, r0
 800867a:	dc07      	bgt.n	800868c <_mprec_log10+0x18>
 800867c:	4b09      	ldr	r3, [pc, #36]	; (80086a4 <_mprec_log10+0x30>)
 800867e:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8008682:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008686:	ec41 0b10 	vmov	d0, r0, r1
 800868a:	bdd0      	pop	{r4, r6, r7, pc}
 800868c:	4906      	ldr	r1, [pc, #24]	; (80086a8 <_mprec_log10+0x34>)
 800868e:	4f07      	ldr	r7, [pc, #28]	; (80086ac <_mprec_log10+0x38>)
 8008690:	2000      	movs	r0, #0
 8008692:	2600      	movs	r6, #0
 8008694:	4632      	mov	r2, r6
 8008696:	463b      	mov	r3, r7
 8008698:	f7f7 ff7a 	bl	8000590 <__aeabi_dmul>
 800869c:	3c01      	subs	r4, #1
 800869e:	d1f9      	bne.n	8008694 <_mprec_log10+0x20>
 80086a0:	e7f1      	b.n	8008686 <_mprec_log10+0x12>
 80086a2:	bf00      	nop
 80086a4:	08008878 	.word	0x08008878
 80086a8:	3ff00000 	.word	0x3ff00000
 80086ac:	40240000 	.word	0x40240000

080086b0 <_calloc_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	fb02 f401 	mul.w	r4, r2, r1
 80086b6:	4621      	mov	r1, r4
 80086b8:	f000 f808 	bl	80086cc <_malloc_r>
 80086bc:	4605      	mov	r5, r0
 80086be:	b118      	cbz	r0, 80086c8 <_calloc_r+0x18>
 80086c0:	4622      	mov	r2, r4
 80086c2:	2100      	movs	r1, #0
 80086c4:	f7fe fa06 	bl	8006ad4 <memset>
 80086c8:	4628      	mov	r0, r5
 80086ca:	bd38      	pop	{r3, r4, r5, pc}

080086cc <_malloc_r>:
 80086cc:	b570      	push	{r4, r5, r6, lr}
 80086ce:	1ccd      	adds	r5, r1, #3
 80086d0:	f025 0503 	bic.w	r5, r5, #3
 80086d4:	3508      	adds	r5, #8
 80086d6:	2d0c      	cmp	r5, #12
 80086d8:	bf38      	it	cc
 80086da:	250c      	movcc	r5, #12
 80086dc:	2d00      	cmp	r5, #0
 80086de:	4606      	mov	r6, r0
 80086e0:	db01      	blt.n	80086e6 <_malloc_r+0x1a>
 80086e2:	42a9      	cmp	r1, r5
 80086e4:	d903      	bls.n	80086ee <_malloc_r+0x22>
 80086e6:	230c      	movs	r3, #12
 80086e8:	6033      	str	r3, [r6, #0]
 80086ea:	2000      	movs	r0, #0
 80086ec:	bd70      	pop	{r4, r5, r6, pc}
 80086ee:	f000 f871 	bl	80087d4 <__malloc_lock>
 80086f2:	4a21      	ldr	r2, [pc, #132]	; (8008778 <_malloc_r+0xac>)
 80086f4:	6814      	ldr	r4, [r2, #0]
 80086f6:	4621      	mov	r1, r4
 80086f8:	b991      	cbnz	r1, 8008720 <_malloc_r+0x54>
 80086fa:	4c20      	ldr	r4, [pc, #128]	; (800877c <_malloc_r+0xb0>)
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	b91b      	cbnz	r3, 8008708 <_malloc_r+0x3c>
 8008700:	4630      	mov	r0, r6
 8008702:	f000 f83d 	bl	8008780 <_sbrk_r>
 8008706:	6020      	str	r0, [r4, #0]
 8008708:	4629      	mov	r1, r5
 800870a:	4630      	mov	r0, r6
 800870c:	f000 f838 	bl	8008780 <_sbrk_r>
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d124      	bne.n	800875e <_malloc_r+0x92>
 8008714:	230c      	movs	r3, #12
 8008716:	6033      	str	r3, [r6, #0]
 8008718:	4630      	mov	r0, r6
 800871a:	f000 f85c 	bl	80087d6 <__malloc_unlock>
 800871e:	e7e4      	b.n	80086ea <_malloc_r+0x1e>
 8008720:	680b      	ldr	r3, [r1, #0]
 8008722:	1b5b      	subs	r3, r3, r5
 8008724:	d418      	bmi.n	8008758 <_malloc_r+0x8c>
 8008726:	2b0b      	cmp	r3, #11
 8008728:	d90f      	bls.n	800874a <_malloc_r+0x7e>
 800872a:	600b      	str	r3, [r1, #0]
 800872c:	50cd      	str	r5, [r1, r3]
 800872e:	18cc      	adds	r4, r1, r3
 8008730:	4630      	mov	r0, r6
 8008732:	f000 f850 	bl	80087d6 <__malloc_unlock>
 8008736:	f104 000b 	add.w	r0, r4, #11
 800873a:	1d23      	adds	r3, r4, #4
 800873c:	f020 0007 	bic.w	r0, r0, #7
 8008740:	1ac3      	subs	r3, r0, r3
 8008742:	d0d3      	beq.n	80086ec <_malloc_r+0x20>
 8008744:	425a      	negs	r2, r3
 8008746:	50e2      	str	r2, [r4, r3]
 8008748:	e7d0      	b.n	80086ec <_malloc_r+0x20>
 800874a:	428c      	cmp	r4, r1
 800874c:	684b      	ldr	r3, [r1, #4]
 800874e:	bf16      	itet	ne
 8008750:	6063      	strne	r3, [r4, #4]
 8008752:	6013      	streq	r3, [r2, #0]
 8008754:	460c      	movne	r4, r1
 8008756:	e7eb      	b.n	8008730 <_malloc_r+0x64>
 8008758:	460c      	mov	r4, r1
 800875a:	6849      	ldr	r1, [r1, #4]
 800875c:	e7cc      	b.n	80086f8 <_malloc_r+0x2c>
 800875e:	1cc4      	adds	r4, r0, #3
 8008760:	f024 0403 	bic.w	r4, r4, #3
 8008764:	42a0      	cmp	r0, r4
 8008766:	d005      	beq.n	8008774 <_malloc_r+0xa8>
 8008768:	1a21      	subs	r1, r4, r0
 800876a:	4630      	mov	r0, r6
 800876c:	f000 f808 	bl	8008780 <_sbrk_r>
 8008770:	3001      	adds	r0, #1
 8008772:	d0cf      	beq.n	8008714 <_malloc_r+0x48>
 8008774:	6025      	str	r5, [r4, #0]
 8008776:	e7db      	b.n	8008730 <_malloc_r+0x64>
 8008778:	20000204 	.word	0x20000204
 800877c:	20000208 	.word	0x20000208

08008780 <_sbrk_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	4c06      	ldr	r4, [pc, #24]	; (800879c <_sbrk_r+0x1c>)
 8008784:	2300      	movs	r3, #0
 8008786:	4605      	mov	r5, r0
 8008788:	4608      	mov	r0, r1
 800878a:	6023      	str	r3, [r4, #0]
 800878c:	f7f9 fa20 	bl	8001bd0 <_sbrk>
 8008790:	1c43      	adds	r3, r0, #1
 8008792:	d102      	bne.n	800879a <_sbrk_r+0x1a>
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	b103      	cbz	r3, 800879a <_sbrk_r+0x1a>
 8008798:	602b      	str	r3, [r5, #0]
 800879a:	bd38      	pop	{r3, r4, r5, pc}
 800879c:	200007dc 	.word	0x200007dc

080087a0 <strcpy>:
 80087a0:	4603      	mov	r3, r0
 80087a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087a6:	f803 2b01 	strb.w	r2, [r3], #1
 80087aa:	2a00      	cmp	r2, #0
 80087ac:	d1f9      	bne.n	80087a2 <strcpy+0x2>
 80087ae:	4770      	bx	lr

080087b0 <__ascii_mbtowc>:
 80087b0:	b082      	sub	sp, #8
 80087b2:	b901      	cbnz	r1, 80087b6 <__ascii_mbtowc+0x6>
 80087b4:	a901      	add	r1, sp, #4
 80087b6:	b142      	cbz	r2, 80087ca <__ascii_mbtowc+0x1a>
 80087b8:	b14b      	cbz	r3, 80087ce <__ascii_mbtowc+0x1e>
 80087ba:	7813      	ldrb	r3, [r2, #0]
 80087bc:	600b      	str	r3, [r1, #0]
 80087be:	7812      	ldrb	r2, [r2, #0]
 80087c0:	1c10      	adds	r0, r2, #0
 80087c2:	bf18      	it	ne
 80087c4:	2001      	movne	r0, #1
 80087c6:	b002      	add	sp, #8
 80087c8:	4770      	bx	lr
 80087ca:	4610      	mov	r0, r2
 80087cc:	e7fb      	b.n	80087c6 <__ascii_mbtowc+0x16>
 80087ce:	f06f 0001 	mvn.w	r0, #1
 80087d2:	e7f8      	b.n	80087c6 <__ascii_mbtowc+0x16>

080087d4 <__malloc_lock>:
 80087d4:	4770      	bx	lr

080087d6 <__malloc_unlock>:
 80087d6:	4770      	bx	lr

080087d8 <__ascii_wctomb>:
 80087d8:	b149      	cbz	r1, 80087ee <__ascii_wctomb+0x16>
 80087da:	2aff      	cmp	r2, #255	; 0xff
 80087dc:	bf85      	ittet	hi
 80087de:	238a      	movhi	r3, #138	; 0x8a
 80087e0:	6003      	strhi	r3, [r0, #0]
 80087e2:	700a      	strbls	r2, [r1, #0]
 80087e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80087e8:	bf98      	it	ls
 80087ea:	2001      	movls	r0, #1
 80087ec:	4770      	bx	lr
 80087ee:	4608      	mov	r0, r1
 80087f0:	4770      	bx	lr
	...

080087f4 <_init>:
 80087f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f6:	bf00      	nop
 80087f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087fa:	bc08      	pop	{r3}
 80087fc:	469e      	mov	lr, r3
 80087fe:	4770      	bx	lr

08008800 <_fini>:
 8008800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008802:	bf00      	nop
 8008804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008806:	bc08      	pop	{r3}
 8008808:	469e      	mov	lr, r3
 800880a:	4770      	bx	lr
